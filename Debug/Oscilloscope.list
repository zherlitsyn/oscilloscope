
Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a8c  0800ab18  0800ab18  0001ab18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5a4  0800c5a4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5a4  0800c5a4  0001c5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5ac  0800c5ac  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5ac  0800c5ac  0001c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5b0  0800c5b0  0001c5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000210  0800c7c4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001df4  0800c7c4  00021df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f42d  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002488  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00031b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b7  00000000  00000000  00032a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010622  00000000  00000000  0004b2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bcb1  00000000  00000000  0005b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b7e  00000000  00000000  000f75a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fd4  00000000  00000000  000f8120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000fd0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aafc 	.word	0x0800aafc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800aafc 	.word	0x0800aafc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ILI9341_WriteCommand>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"

// Send command to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteCommand(ILI9341TypeDef *display, uint8_t command)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	ILI9341_COMMAND(display);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	8a5b      	ldrh	r3, [r3, #18]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	0412      	lsls	r2, r2, #16
 8000ecc:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &command, 1, 1);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	1cf9      	adds	r1, r7, #3
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f005 fd65 	bl	80069a6 <HAL_SPI_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <ILI9341_WriteByte>:

// Send byte to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteByte(ILI9341TypeDef *display, uint8_t data)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	ILI9341_DATA(display);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	8a5a      	ldrh	r2, [r3, #18]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, &data, 1, 1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	1cf9      	adds	r1, r7, #3
 8000f00:	2301      	movs	r3, #1
 8000f02:	2201      	movs	r2, #1
 8000f04:	f005 fd4f 	bl	80069a6 <HAL_SPI_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <ILI9341_WriteBuffer>:

// Send buffer to display. Use ILI9341_SELECT() before
static inline void ILI9341_WriteBuffer(ILI9341TypeDef *display, uint8_t* buff, size_t buff_size)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	ILI9341_DATA(display);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8a5a      	ldrh	r2, [r3, #18]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	619a      	str	r2, [r3, #24]

    // split data in small chunks because HAL can't send more then 64K at once
    while (buff_size > 0) {
 8000f26:	e015      	b.n	8000f54 <ILI9341_WriteBuffer+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f2e:	bf28      	it	cs
 8000f30:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000f34:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(display->spi, buff, chunk_size, 10);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	8afa      	ldrh	r2, [r7, #22]
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	f005 fd31 	bl	80069a6 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000f44:	8afb      	ldrh	r3, [r7, #22]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
        buff_size -= chunk_size;
 8000f4c:	8afb      	ldrh	r3, [r7, #22]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	607b      	str	r3, [r7, #4]
    while (buff_size > 0) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1e6      	bne.n	8000f28 <ILI9341_WriteBuffer+0x18>
    }
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <ILI9341_SetAddressWindow>:

static inline void ILI9341_SetAddressWindow(ILI9341TypeDef *display, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	817b      	strh	r3, [r7, #10]
 8000f76:	460b      	mov	r3, r1
 8000f78:	813b      	strh	r3, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	80fb      	strh	r3, [r7, #6]
    // Column address set
	ILI9341_WriteCommand(display, 0x2A); // CASET
 8000f7e:	212a      	movs	r1, #42	; 0x2a
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ff97 	bl	8000eb4 <ILI9341_WriteCommand>

	uint8_t data[4];
	data[0] = x1 >> 8;
 8000f86:	897b      	ldrh	r3, [r7, #10]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	753b      	strb	r3, [r7, #20]
	data[1] = x1;
 8000f90:	897b      	ldrh	r3, [r7, #10]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	757b      	strb	r3, [r7, #21]
	data[2] = x2 >> 8;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	75bb      	strb	r3, [r7, #22]
	data[3] = x2;
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8a5a      	ldrh	r2, [r3, #18]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	f107 0114 	add.w	r1, r7, #20
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2204      	movs	r2, #4
 8000fbc:	f005 fcf3 	bl	80069a6 <HAL_SPI_Transmit>

    // Row address set
	ILI9341_WriteCommand(display, 0x2B); // RASET
 8000fc0:	212b      	movs	r1, #43	; 0x2b
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff ff76 	bl	8000eb4 <ILI9341_WriteCommand>

	data[0] = y1 >> 8;
 8000fc8:	893b      	ldrh	r3, [r7, #8]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	753b      	strb	r3, [r7, #20]
	data[1] = y1;
 8000fd2:	893b      	ldrh	r3, [r7, #8]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	757b      	strb	r3, [r7, #21]
	data[2] = y2 >> 8;
 8000fd8:	8c3b      	ldrh	r3, [r7, #32]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	75bb      	strb	r3, [r7, #22]
	data[3] = y2;
 8000fe2:	8c3b      	ldrh	r3, [r7, #32]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	75fb      	strb	r3, [r7, #23]

	ILI9341_DATA(display);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8a5a      	ldrh	r2, [r3, #18]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(display->spi, data, 4, 1);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 0114 	add.w	r1, r7, #20
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	f005 fcd2 	bl	80069a6 <HAL_SPI_Transmit>

    // Write to RAM
	ILI9341_WriteCommand(display, 0x2C); // RAMWR
 8001002:	212c      	movs	r1, #44	; 0x2c
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff ff55 	bl	8000eb4 <ILI9341_WriteCommand>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <ILI9341_Reset>:

static inline void ILI9341_Reset(ILI9341TypeDef *display)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
    display->reset_gpio_port->BSRR = (uint32_t)(display->reset_pin) << 16U;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	8a9b      	ldrh	r3, [r3, #20]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0412      	lsls	r2, r2, #16
 8001026:	619a      	str	r2, [r3, #24]
    HAL_Delay(5);
 8001028:	2005      	movs	r0, #5
 800102a:	f003 fcbd 	bl	80049a8 <HAL_Delay>
    display->reset_gpio_port->BSRR = display->reset_pin;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	8a9a      	ldrh	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	619a      	str	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <ILI9341_Init>:

void ILI9341_Init(ILI9341TypeDef *display)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	ILI9341_SELECT(display);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	8a1b      	ldrh	r3, [r3, #16]
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	0412      	lsls	r2, r2, #16
 8001054:	619a      	str	r2, [r3, #24]
	ILI9341_Reset(display);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffdb 	bl	8001012 <ILI9341_Reset>

	// SOFTWARE RESET
	ILI9341_WriteCommand(display, 0x01);
 800105c:	2101      	movs	r1, #1
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff28 	bl	8000eb4 <ILI9341_WriteCommand>
	HAL_Delay(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f003 fc9e 	bl	80049a8 <HAL_Delay>

	// POWER CONTROL A
	ILI9341_WriteCommand(display, 0xCB);
 800106c:	21cb      	movs	r1, #203	; 0xcb
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff20 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x39);
 8001074:	2139      	movs	r1, #57	; 0x39
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff34 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2C);
 800107c:	212c      	movs	r1, #44	; 0x2c
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff30 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001084:	2100      	movs	r1, #0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff2c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x34);
 800108c:	2134      	movs	r1, #52	; 0x34
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff28 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x02);
 8001094:	2102      	movs	r1, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff24 	bl	8000ee4 <ILI9341_WriteByte>

	// POWER CONTROL B
	ILI9341_WriteCommand(display, 0xCF);
 800109c:	21cf      	movs	r1, #207	; 0xcf
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff08 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff1c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 80010ac:	21c1      	movs	r1, #193	; 0xc1
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff18 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x30);
 80010b4:	2130      	movs	r1, #48	; 0x30
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff14 	bl	8000ee4 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(display, 0xE8);
 80010bc:	21e8      	movs	r1, #232	; 0xe8
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fef8 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x85);
 80010c4:	2185      	movs	r1, #133	; 0x85
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff0c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff08 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x78);
 80010d4:	2178      	movs	r1, #120	; 0x78
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff04 	bl	8000ee4 <ILI9341_WriteByte>

	// DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(display, 0xEA);
 80010dc:	21ea      	movs	r1, #234	; 0xea
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fee8 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fefc 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 80010ec:	2100      	movs	r1, #0
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fef8 	bl	8000ee4 <ILI9341_WriteByte>

	// POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(display, 0xED);
 80010f4:	21ed      	movs	r1, #237	; 0xed
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fedc 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x64);
 80010fc:	2164      	movs	r1, #100	; 0x64
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fef0 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 8001104:	2103      	movs	r1, #3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff feec 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x12);
 800110c:	2112      	movs	r1, #18
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fee8 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x81);
 8001114:	2181      	movs	r1, #129	; 0x81
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fee4 	bl	8000ee4 <ILI9341_WriteByte>

	// PUMP RATIO CONTROL
	ILI9341_WriteCommand(display, 0xF7);
 800111c:	21f7      	movs	r1, #247	; 0xf7
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fec8 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x20);
 8001124:	2120      	movs	r1, #32
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fedc 	bl	8000ee4 <ILI9341_WriteByte>

	// POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(display, 0xC0);
 800112c:	21c0      	movs	r1, #192	; 0xc0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fec0 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x23);
 8001134:	2123      	movs	r1, #35	; 0x23
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fed4 	bl	8000ee4 <ILI9341_WriteByte>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(display, 0xC1);
 800113c:	21c1      	movs	r1, #193	; 0xc1
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff feb8 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x10);
 8001144:	2110      	movs	r1, #16
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fecc 	bl	8000ee4 <ILI9341_WriteByte>

	// VCM CONTROL
	ILI9341_WriteCommand(display, 0xC5);
 800114c:	21c5      	movs	r1, #197	; 0xc5
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff feb0 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x3E);
 8001154:	213e      	movs	r1, #62	; 0x3e
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fec4 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x28);
 800115c:	2128      	movs	r1, #40	; 0x28
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fec0 	bl	8000ee4 <ILI9341_WriteByte>

	// VCM CONTROL 2
	ILI9341_WriteCommand(display, 0xC7);
 8001164:	21c7      	movs	r1, #199	; 0xc7
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fea4 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x86);
 800116c:	2186      	movs	r1, #134	; 0x86
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff feb8 	bl	8000ee4 <ILI9341_WriteByte>

	// MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(display, 0x36);
 8001174:	2136      	movs	r1, #54	; 0x36
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fe9c 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x48);
 800117c:	2148      	movs	r1, #72	; 0x48
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff feb0 	bl	8000ee4 <ILI9341_WriteByte>

	// PIXEL FORMAT
	ILI9341_WriteCommand(display, 0x3A);
 8001184:	213a      	movs	r1, #58	; 0x3a
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fe94 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x55);
 800118c:	2155      	movs	r1, #85	; 0x55
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fea8 	bl	8000ee4 <ILI9341_WriteByte>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(display, 0xB1);
 8001194:	21b1      	movs	r1, #177	; 0xb1
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fe8c 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 800119c:	2100      	movs	r1, #0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fea0 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x18);
 80011a4:	2118      	movs	r1, #24
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fe9c 	bl	8000ee4 <ILI9341_WriteByte>

	// DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(display, 0xB6);
 80011ac:	21b6      	movs	r1, #182	; 0xb6
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe80 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x08);
 80011b4:	2108      	movs	r1, #8
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe94 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x82);
 80011bc:	2182      	movs	r1, #130	; 0x82
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fe90 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x27);
 80011c4:	2127      	movs	r1, #39	; 0x27
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe8c 	bl	8000ee4 <ILI9341_WriteByte>

	// 3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(display, 0xF2);
 80011cc:	21f2      	movs	r1, #242	; 0xf2
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe70 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe84 	bl	8000ee4 <ILI9341_WriteByte>

	// GAMMA CURVE SELECTED
	ILI9341_WriteCommand(display, 0x26);
 80011dc:	2126      	movs	r1, #38	; 0x26
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe68 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x01);
 80011e4:	2101      	movs	r1, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe7c 	bl	8000ee4 <ILI9341_WriteByte>

	// POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE0);
 80011ec:	21e0      	movs	r1, #224	; 0xe0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe60 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x0F);
 80011f4:	210f      	movs	r1, #15
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fe74 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 80011fc:	2131      	movs	r1, #49	; 0x31
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fe70 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x2B);
 8001204:	212b      	movs	r1, #43	; 0x2b
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe6c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 800120c:	210c      	movs	r1, #12
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fe68 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001214:	210e      	movs	r1, #14
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fe64 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 800121c:	2108      	movs	r1, #8
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fe60 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x4E);
 8001224:	214e      	movs	r1, #78	; 0x4e
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fe5c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xF1);
 800122c:	21f1      	movs	r1, #241	; 0xf1
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fe58 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x37);
 8001234:	2137      	movs	r1, #55	; 0x37
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fe54 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 800123c:	2107      	movs	r1, #7
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fe50 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x10);
 8001244:	2110      	movs	r1, #16
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe4c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 800124c:	2103      	movs	r1, #3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe48 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 8001254:	210e      	movs	r1, #14
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe44 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x09);
 800125c:	2109      	movs	r1, #9
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe40 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x00);
 8001264:	2100      	movs	r1, #0
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fe3c 	bl	8000ee4 <ILI9341_WriteByte>

	// NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(display, 0xE1);
 800126c:	21e1      	movs	r1, #225	; 0xe1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fe20 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, 0x00);
 8001274:	2100      	movs	r1, #0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fe34 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0E);
 800127c:	210e      	movs	r1, #14
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fe30 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x14);
 8001284:	2114      	movs	r1, #20
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe2c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x03);
 800128c:	2103      	movs	r1, #3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fe28 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x11);
 8001294:	2111      	movs	r1, #17
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe24 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x07);
 800129c:	2107      	movs	r1, #7
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fe20 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 80012a4:	2131      	movs	r1, #49	; 0x31
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fe1c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0xC1);
 80012ac:	21c1      	movs	r1, #193	; 0xc1
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe18 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x48);
 80012b4:	2148      	movs	r1, #72	; 0x48
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fe14 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x08);
 80012bc:	2108      	movs	r1, #8
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fe10 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 80012c4:	210f      	movs	r1, #15
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fe0c 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0C);
 80012cc:	210c      	movs	r1, #12
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fe08 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x31);
 80012d4:	2131      	movs	r1, #49	; 0x31
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fe04 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x36);
 80012dc:	2136      	movs	r1, #54	; 0x36
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fe00 	bl	8000ee4 <ILI9341_WriteByte>
	ILI9341_WriteByte(display, 0x0F);
 80012e4:	210f      	movs	r1, #15
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fdfc 	bl	8000ee4 <ILI9341_WriteByte>

	// EXIT SLEEP
	ILI9341_WriteCommand(display, 0x11);
 80012ec:	2111      	movs	r1, #17
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fde0 	bl	8000eb4 <ILI9341_WriteCommand>
	HAL_Delay(120);
 80012f4:	2078      	movs	r0, #120	; 0x78
 80012f6:	f003 fb57 	bl	80049a8 <HAL_Delay>

	// TURN ON DISPLAY
	ILI9341_WriteCommand(display, 0x29);
 80012fa:	2129      	movs	r1, #41	; 0x29
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fdd9 	bl	8000eb4 <ILI9341_WriteCommand>

	// MADCTL
	ILI9341_WriteCommand(display, 0x36);
 8001302:	2136      	movs	r1, #54	; 0x36
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fdd5 	bl	8000eb4 <ILI9341_WriteCommand>
	ILI9341_WriteByte(display, display->orientation);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e9b      	ldrb	r3, [r3, #26]
 800130e:	4619      	mov	r1, r3
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fde7 	bl	8000ee4 <ILI9341_WriteByte>

	ILI9341_UNSELECT(display);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	8a1a      	ldrh	r2, [r3, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	619a      	str	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <ILI9341_DrawPixel>:
    ILI9341_WriteCommand(display, (invert > 0) ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
    ILI9341_UNSELECT(display);
}

void ILI9341_DrawPixel(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t color)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af02      	add	r7, sp, #8
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	817b      	strh	r3, [r7, #10]
 800133a:	460b      	mov	r3, r1
 800133c:	813b      	strh	r3, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
	// Check out of bounds
	if((x >= display->width) || (y >= display->height))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8adb      	ldrh	r3, [r3, #22]
 8001346:	897a      	ldrh	r2, [r7, #10]
 8001348:	429a      	cmp	r2, r3
 800134a:	d233      	bcs.n	80013b4 <ILI9341_DrawPixel+0x8c>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8b1b      	ldrh	r3, [r3, #24]
 8001350:	893a      	ldrh	r2, [r7, #8]
 8001352:	429a      	cmp	r2, r3
 8001354:	d22e      	bcs.n	80013b4 <ILI9341_DrawPixel+0x8c>
		return;

	ILI9341_SELECT(display);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8a1b      	ldrh	r3, [r3, #16]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	0412      	lsls	r2, r2, #16
 8001362:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + 1, y + 1);
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	3301      	adds	r3, #1
 8001368:	b298      	uxth	r0, r3
 800136a:	893b      	ldrh	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	b29b      	uxth	r3, r3
 8001370:	893a      	ldrh	r2, [r7, #8]
 8001372:	8979      	ldrh	r1, [r7, #10]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4603      	mov	r3, r0
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fdf3 	bl	8000f64 <ILI9341_SetAddressWindow>

	ILI9341_DATA(display);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8a5a      	ldrh	r2, [r3, #18]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	619a      	str	r2, [r3, #24]
	uint8_t data[2] = { color >> 8, color };
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b29b      	uxth	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	753b      	strb	r3, [r7, #20]
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(display->spi, data, 2, 1);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f107 0114 	add.w	r1, r7, #20
 80013a0:	2301      	movs	r3, #1
 80013a2:	2202      	movs	r2, #2
 80013a4:	f005 faff 	bl	80069a6 <HAL_SPI_Transmit>

	ILI9341_UNSELECT(display);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8a1a      	ldrh	r2, [r3, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	e000      	b.n	80013b6 <ILI9341_DrawPixel+0x8e>
		return;
 80013b4:	bf00      	nop
}
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <ILI9341_Fill>:

static void ILI9341_Fill(ILI9341TypeDef *display, uint16_t color, uint32_t size)
{
 80013bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c0:	b08f      	sub	sp, #60	; 0x3c
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	460b      	mov	r3, r1
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	817b      	strh	r3, [r7, #10]
 80013cc:	466b      	mov	r3, sp
 80013ce:	461e      	mov	r6, r3
	ILI9341_DATA(display);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8a5a      	ldrh	r2, [r3, #18]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	619a      	str	r2, [r3, #24]

	uint32_t buffer_size = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((size * 2) < ILI9341_BUFFER_MAX_SIZE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e6:	d202      	bcs.n	80013ee <ILI9341_Fill+0x32>
		buffer_size = size;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
 80013ec:	e002      	b.n	80013f4 <ILI9341_Fill+0x38>
	else
		buffer_size = ILI9341_BUFFER_MAX_SIZE;
 80013ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t color_shifted = color >> 8;
 80013f4:	897b      	ldrh	r3, [r7, #10]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t buffer[buffer_size];
 80013fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001400:	460b      	mov	r3, r1
 8001402:	3b01      	subs	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	2300      	movs	r3, #0
 8001408:	4688      	mov	r8, r1
 800140a:	4699      	mov	r9, r3
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800141c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001420:	2300      	movs	r3, #0
 8001422:	460c      	mov	r4, r1
 8001424:	461d      	mov	r5, r3
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	00eb      	lsls	r3, r5, #3
 8001430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001434:	00e2      	lsls	r2, r4, #3
 8001436:	1dcb      	adds	r3, r1, #7
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	ebad 0d03 	sub.w	sp, sp, r3
 8001440:	466b      	mov	r3, sp
 8001442:	3300      	adds	r3, #0
 8001444:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001446:	2300      	movs	r3, #0
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
 800144a:	e00e      	b.n	800146a <ILI9341_Fill+0xae>
		buffer[i]     = color_shifted;
 800144c:	6a3a      	ldr	r2, [r7, #32]
 800144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001450:	4413      	add	r3, r2
 8001452:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001456:	701a      	strb	r2, [r3, #0]
		buffer[i + 1] = color;
 8001458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145a:	3301      	adds	r3, #1
 800145c:	897a      	ldrh	r2, [r7, #10]
 800145e:	b2d1      	uxtb	r1, r2
 8001460:	6a3a      	ldr	r2, [r7, #32]
 8001462:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < buffer_size; i += 2) {
 8001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001466:	3302      	adds	r3, #2
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
 800146a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	429a      	cmp	r2, r3
 8001470:	d3ec      	bcc.n	800144c <ILI9341_Fill+0x90>
	}

	uint32_t sending_size   = size * 2;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
	uint32_t sending_blocks = sending_size / buffer_size;
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	61bb      	str	r3, [r7, #24]
	uint32_t sending_remain = sending_size % buffer_size;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001486:	fbb3 f2f2 	udiv	r2, r3, r2
 800148a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800148c:	fb01 f202 	mul.w	r2, r1, r2
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	617b      	str	r3, [r7, #20]

	if (sending_blocks != 0) {
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d011      	beq.n	80014be <ILI9341_Fill+0x102>
		for(uint32_t i = 0; i < sending_blocks; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149e:	e00a      	b.n	80014b6 <ILI9341_Fill+0xfa>
			HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, buffer_size, 10);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	230a      	movs	r3, #10
 80014aa:	6a39      	ldr	r1, [r7, #32]
 80014ac:	f005 fa7b 	bl	80069a6 <HAL_SPI_Transmit>
		for(uint32_t i = 0; i < sending_blocks; i++)
 80014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b2:	3301      	adds	r3, #1
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3f0      	bcc.n	80014a0 <ILI9341_Fill+0xe4>
	}

	HAL_SPI_Transmit(display->spi, (uint8_t*)buffer, sending_remain, 10);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	230a      	movs	r3, #10
 80014c8:	6a39      	ldr	r1, [r7, #32]
 80014ca:	f005 fa6c 	bl	80069a6 <HAL_SPI_Transmit>
 80014ce:	46b5      	mov	sp, r6
}
 80014d0:	bf00      	nop
 80014d2:	373c      	adds	r7, #60	; 0x3c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014da <ILI9341_FillScreen>:

void ILI9341_FillScreen(ILI9341TypeDef *display, uint16_t color)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af02      	add	r7, sp, #8
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	807b      	strh	r3, [r7, #2]
	ILI9341_SELECT(display);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	8a1b      	ldrh	r3, [r3, #16]
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	0412      	lsls	r2, r2, #16
 80014f2:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, 0, 0, display->width - 1, display->height - 1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	8adb      	ldrh	r3, [r3, #22]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	8b1b      	ldrh	r3, [r3, #24]
 8001500:	3b01      	subs	r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4613      	mov	r3, r2
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fd29 	bl	8000f64 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, display->width * display->height);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	8adb      	ldrh	r3, [r3, #22]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8b1b      	ldrh	r3, [r3, #24]
 800151c:	fb02 f303 	mul.w	r3, r2, r3
 8001520:	461a      	mov	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff48 	bl	80013bc <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8a1a      	ldrh	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af02      	add	r7, sp, #8
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	461a      	mov	r2, r3
 800154c:	4603      	mov	r3, r0
 800154e:	817b      	strh	r3, [r7, #10]
 8001550:	460b      	mov	r3, r1
 8001552:	813b      	strh	r3, [r7, #8]
 8001554:	4613      	mov	r3, r2
 8001556:	80fb      	strh	r3, [r7, #6]
	if ((x >= display->width) || (y >= display->height))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8adb      	ldrh	r3, [r3, #22]
 800155c:	897a      	ldrh	r2, [r7, #10]
 800155e:	429a      	cmp	r2, r3
 8001560:	d246      	bcs.n	80015f0 <ILI9341_FillRectangle+0xb2>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8b1b      	ldrh	r3, [r3, #24]
 8001566:	893a      	ldrh	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d241      	bcs.n	80015f0 <ILI9341_FillRectangle+0xb2>
		return;

	if ((x + w - 1) >= display->width)
 800156c:	897a      	ldrh	r2, [r7, #10]
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	4413      	add	r3, r2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	8ad2      	ldrh	r2, [r2, #22]
 8001576:	4293      	cmp	r3, r2
 8001578:	dd04      	ble.n	8001584 <ILI9341_FillRectangle+0x46>
		w = display->width - x;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8ada      	ldrh	r2, [r3, #22]
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	80fb      	strh	r3, [r7, #6]

	if ((y + h - 1) >= display->height)
 8001584:	893a      	ldrh	r2, [r7, #8]
 8001586:	8b3b      	ldrh	r3, [r7, #24]
 8001588:	4413      	add	r3, r2
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	8b12      	ldrh	r2, [r2, #24]
 800158e:	4293      	cmp	r3, r2
 8001590:	dd04      	ble.n	800159c <ILI9341_FillRectangle+0x5e>
		h = display->height - y;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8b1a      	ldrh	r2, [r3, #24]
 8001596:	893b      	ldrh	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	833b      	strh	r3, [r7, #24]

	ILI9341_SELECT(display);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8a1b      	ldrh	r3, [r3, #16]
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0412      	lsls	r2, r2, #16
 80015a8:	619a      	str	r2, [r3, #24]
	ILI9341_SetAddressWindow(display, x, y, x + w - 1, y + h - 1);
 80015aa:	897a      	ldrh	r2, [r7, #10]
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4413      	add	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b298      	uxth	r0, r3
 80015b6:	893a      	ldrh	r2, [r7, #8]
 80015b8:	8b3b      	ldrh	r3, [r7, #24]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	3b01      	subs	r3, #1
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	893a      	ldrh	r2, [r7, #8]
 80015c4:	8979      	ldrh	r1, [r7, #10]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4603      	mov	r3, r0
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff fcca 	bl	8000f64 <ILI9341_SetAddressWindow>
	ILI9341_Fill(display, color, w * h);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	8b3a      	ldrh	r2, [r7, #24]
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	8bbb      	ldrh	r3, [r7, #28]
 80015dc:	4619      	mov	r1, r3
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7ff feec 	bl	80013bc <ILI9341_Fill>
	ILI9341_UNSELECT(display);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8a1a      	ldrh	r2, [r3, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	619a      	str	r2, [r3, #24]
 80015ee:	e000      	b.n	80015f2 <ILI9341_FillRectangle+0xb4>
		return;
 80015f0:	bf00      	nop
}
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <ILI9341_Rectangle>:

void ILI9341_Rectangle(ILI9341TypeDef *display, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4603      	mov	r3, r0
 8001608:	817b      	strh	r3, [r7, #10]
 800160a:	460b      	mov	r3, r1
 800160c:	813b      	strh	r3, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(display, x,     y,     w + 1, 1, color);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	3301      	adds	r3, #1
 8001616:	b298      	uxth	r0, r3
 8001618:	893a      	ldrh	r2, [r7, #8]
 800161a:	8979      	ldrh	r1, [r7, #10]
 800161c:	8bbb      	ldrh	r3, [r7, #28]
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2301      	movs	r3, #1
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4603      	mov	r3, r0
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff ff89 	bl	800153e <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x, y + h,     w + 1, 1, color);
 800162c:	893a      	ldrh	r2, [r7, #8]
 800162e:	8b3b      	ldrh	r3, [r7, #24]
 8001630:	4413      	add	r3, r2
 8001632:	b29a      	uxth	r2, r3
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	3301      	adds	r3, #1
 8001638:	b298      	uxth	r0, r3
 800163a:	8979      	ldrh	r1, [r7, #10]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2301      	movs	r3, #1
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ff79 	bl	800153e <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x,     y,     1,     h, color);
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	8979      	ldrh	r1, [r7, #10]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	8b3b      	ldrh	r3, [r7, #24]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff ff6f 	bl	800153e <ILI9341_FillRectangle>
	ILI9341_FillRectangle(display, x + w, y,     1,     h, color);
 8001660:	897a      	ldrh	r2, [r7, #10]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4413      	add	r3, r2
 8001666:	b299      	uxth	r1, r3
 8001668:	893a      	ldrh	r2, [r7, #8]
 800166a:	8bbb      	ldrh	r3, [r7, #28]
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	8b3b      	ldrh	r3, [r7, #24]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff ff62 	bl	800153e <ILI9341_FillRectangle>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(ILI9341TypeDef *display, uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b08c      	sub	sp, #48	; 0x30
 8001686:	af02      	add	r7, sp, #8
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	4608      	mov	r0, r1
 800168c:	4611      	mov	r1, r2
 800168e:	461a      	mov	r2, r3
 8001690:	4603      	mov	r3, r0
 8001692:	817b      	strh	r3, [r7, #10]
 8001694:	460b      	mov	r3, r1
 8001696:	813b      	strh	r3, [r7, #8]
 8001698:	4613      	mov	r3, r2
 800169a:	71fb      	strb	r3, [r7, #7]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(display, x, y, x + font.width - 1, y + font.height - 1);
 800169c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	897b      	ldrh	r3, [r7, #10]
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b298      	uxth	r0, r3
 80016ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	893b      	ldrh	r3, [r7, #8]
 80016b4:	4413      	add	r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	893a      	ldrh	r2, [r7, #8]
 80016be:	8979      	ldrh	r1, [r7, #10]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4603      	mov	r3, r0
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fc4d 	bl	8000f64 <ILI9341_SetAddressWindow>

    for (i = 0; i < font.height; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	e043      	b.n	8001758 <ILI9341_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 80016d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	f897 1031 	ldrb.w	r1, [r7, #49]	; 0x31
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	440b      	add	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	61fb      	str	r3, [r7, #28]
        for (j = 0; j < font.width; j++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	e029      	b.n	8001746 <ILI9341_WriteChar+0xc4>
            if ((b << j) & 0x8000) {
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00f      	beq.n	8001722 <ILI9341_WriteChar+0xa0>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001702:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29b      	uxth	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	763b      	strb	r3, [r7, #24]
 800170c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800170e:	b2db      	uxtb	r3, r3
 8001710:	767b      	strb	r3, [r7, #25]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	2202      	movs	r2, #2
 8001718:	4619      	mov	r1, r3
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fbf8 	bl	8000f10 <ILI9341_WriteBuffer>
 8001720:	e00e      	b.n	8001740 <ILI9341_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001722:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	b29b      	uxth	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	753b      	strb	r3, [r7, #20]
 800172c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800172e:	b2db      	uxtb	r3, r3
 8001730:	757b      	strb	r3, [r7, #21]
                ILI9341_WriteBuffer(display, data, sizeof(data));
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2202      	movs	r2, #2
 8001738:	4619      	mov	r1, r3
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff fbe8 	bl	8000f10 <ILI9341_WriteBuffer>
        for (j = 0; j < font.width; j++) {
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	3301      	adds	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
 8001746:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800174a:	461a      	mov	r2, r3
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	4293      	cmp	r3, r2
 8001750:	d3cf      	bcc.n	80016f2 <ILI9341_WriteChar+0x70>
    for (i = 0; i < font.height; i++) {
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800175c:	461a      	mov	r2, r3
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	4293      	cmp	r3, r2
 8001762:	d3b5      	bcc.n	80016d0 <ILI9341_WriteChar+0x4e>
            }
        }
    }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <ILI9341_WriteString>:

void ILI9341_WriteString(ILI9341TypeDef *display, uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800176e:	b5b0      	push	{r4, r5, r7, lr}
 8001770:	b088      	sub	sp, #32
 8001772:	af04      	add	r7, sp, #16
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
 800177c:	4613      	mov	r3, r2
 800177e:	813b      	strh	r3, [r7, #8]
	ILI9341_SELECT(display);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8a1b      	ldrh	r3, [r3, #16]
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	619a      	str	r2, [r3, #24]

    while (*str) {
 800178e:	e03b      	b.n	8001808 <ILI9341_WriteString+0x9a>
        if (x + font.width >= display->width) {
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001796:	4413      	add	r3, r2
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	8ad2      	ldrh	r2, [r2, #22]
 800179c:	4293      	cmp	r3, r2
 800179e:	db17      	blt.n	80017d0 <ILI9341_WriteString+0x62>
            x = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	817b      	strh	r3, [r7, #10]
            y += font.height;
 80017a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	893b      	ldrh	r3, [r7, #8]
 80017ac:	4413      	add	r3, r2
 80017ae:	813b      	strh	r3, [r7, #8]

            if (y + font.height >= display->height)
 80017b0:	893b      	ldrh	r3, [r7, #8]
 80017b2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80017b6:	4413      	add	r3, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	8b12      	ldrh	r2, [r2, #24]
 80017bc:	4293      	cmp	r3, r2
 80017be:	da28      	bge.n	8001812 <ILI9341_WriteString+0xa4>
                break;

            if (*str == ' ') {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d103      	bne.n	80017d0 <ILI9341_WriteString+0x62>
                // skip spaces in the beginning of the new line
                str++;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	607b      	str	r3, [r7, #4]
                continue;
 80017ce:	e01b      	b.n	8001808 <ILI9341_WriteString+0x9a>
            }
        }

        ILI9341_WriteChar(display, x, y, *str, font, color, bgcolor);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	781d      	ldrb	r5, [r3, #0]
 80017d4:	893a      	ldrh	r2, [r7, #8]
 80017d6:	897c      	ldrh	r4, [r7, #10]
 80017d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	466b      	mov	r3, sp
 80017e2:	f107 0120 	add.w	r1, r7, #32
 80017e6:	c903      	ldmia	r1, {r0, r1}
 80017e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80017ec:	462b      	mov	r3, r5
 80017ee:	4621      	mov	r1, r4
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff ff46 	bl	8001682 <ILI9341_WriteChar>
        x += font.width;
 80017f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	4413      	add	r3, r2
 8001800:	817b      	strh	r3, [r7, #10]
        str++;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1bf      	bne.n	8001790 <ILI9341_WriteString+0x22>
 8001810:	e000      	b.n	8001814 <ILI9341_WriteString+0xa6>
                break;
 8001812:	bf00      	nop
    }

	ILI9341_UNSELECT(display);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8a1a      	ldrh	r2, [r3, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	619a      	str	r2, [r3, #24]
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	f6ad 2dd8 	subw	sp, sp, #2776	; 0xad8
 800182e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001830:	f003 f848 	bl	80048c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001834:	f001 f93c 	bl	8002ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001838:	f001 fbc0 	bl	8002fbc <MX_GPIO_Init>
  MX_DMA_Init();
 800183c:	f001 fb9e 	bl	8002f7c <MX_DMA_Init>
  MX_SPI1_Init();
 8001840:	f001 fa0c 	bl	8002c5c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001844:	f001 fac8 	bl	8002dd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001848:	f001 fb1e 	bl	8002e88 <MX_TIM4_Init>
  MX_ADC1_Init();
 800184c:	f001 f998 	bl	8002b80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001850:	f001 fa3a 	bl	8002cc8 <MX_TIM1_Init>
  MX_TIM10_Init();
 8001854:	f001 fb70 	bl	8002f38 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // For DWT->CYCCNT ...
  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001858:	4b9b      	ldr	r3, [pc, #620]	; (8001ac8 <main+0x2a0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a9a      	ldr	r2, [pc, #616]	; (8001ac8 <main+0x2a0>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]
  DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 8001864:	4b99      	ldr	r3, [pc, #612]	; (8001acc <main+0x2a4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a98      	ldr	r2, [pc, #608]	; (8001acc <main+0x2a4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

  // Display init
  display.spi             = &hspi1;
 8001870:	4b97      	ldr	r3, [pc, #604]	; (8001ad0 <main+0x2a8>)
 8001872:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <main+0x2ac>)
 8001874:	601a      	str	r2, [r3, #0]
  display.cs_gpio_port    = ILI9341_CS_GPIO_Port;
 8001876:	4b96      	ldr	r3, [pc, #600]	; (8001ad0 <main+0x2a8>)
 8001878:	4a97      	ldr	r2, [pc, #604]	; (8001ad8 <main+0x2b0>)
 800187a:	605a      	str	r2, [r3, #4]
  display.dc_gpio_port    = ILI9341_DC_GPIO_Port;
 800187c:	4b94      	ldr	r3, [pc, #592]	; (8001ad0 <main+0x2a8>)
 800187e:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <main+0x2b0>)
 8001880:	609a      	str	r2, [r3, #8]
  display.reset_gpio_port = ILI9341_RESET_GPIO_Port;
 8001882:	4b93      	ldr	r3, [pc, #588]	; (8001ad0 <main+0x2a8>)
 8001884:	4a94      	ldr	r2, [pc, #592]	; (8001ad8 <main+0x2b0>)
 8001886:	60da      	str	r2, [r3, #12]
  display.cs_pin          = ILI9341_CS_Pin;
 8001888:	4b91      	ldr	r3, [pc, #580]	; (8001ad0 <main+0x2a8>)
 800188a:	2210      	movs	r2, #16
 800188c:	821a      	strh	r2, [r3, #16]
  display.dc_pin          = ILI9341_DC_Pin;
 800188e:	4b90      	ldr	r3, [pc, #576]	; (8001ad0 <main+0x2a8>)
 8001890:	2208      	movs	r2, #8
 8001892:	825a      	strh	r2, [r3, #18]
  display.reset_pin       = ILI9341_RESET_Pin;
 8001894:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <main+0x2a8>)
 8001896:	2204      	movs	r2, #4
 8001898:	829a      	strh	r2, [r3, #20]
  display.width           = 320;
 800189a:	4b8d      	ldr	r3, [pc, #564]	; (8001ad0 <main+0x2a8>)
 800189c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018a0:	82da      	strh	r2, [r3, #22]
  display.height          = 240;
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <main+0x2a8>)
 80018a4:	22f0      	movs	r2, #240	; 0xf0
 80018a6:	831a      	strh	r2, [r3, #24]
  display.orientation     = ILI9341_ORIENTATION_ROTATE_RIGHT;
 80018a8:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <main+0x2a8>)
 80018aa:	22e8      	movs	r2, #232	; 0xe8
 80018ac:	769a      	strb	r2, [r3, #26]

  ILI9341_UNSELECT(&display);
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <main+0x2a8>)
 80018b0:	8a1a      	ldrh	r2, [r3, #16]
 80018b2:	4b87      	ldr	r3, [pc, #540]	; (8001ad0 <main+0x2a8>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  ILI9341_Init(&display);
 80018b8:	4885      	ldr	r0, [pc, #532]	; (8001ad0 <main+0x2a8>)
 80018ba:	f7ff fbc1 	bl	8001040 <ILI9341_Init>

  // Local vars
  char string[255];

  uint8_t  menu_extended         = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3ac7 	strb.w	r3, [r7, #2759]	; 0xac7
  uint8_t  menu_channel0_enabled = 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 3ac6 	strb.w	r3, [r7, #2758]	; 0xac6
  uint8_t  menu_channel1_enabled = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3ac5 	strb.w	r3, [r7, #2757]	; 0xac5
  int8_t   menu_selected_item    = 2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4
  uint16_t menu_selector_x       = 96;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	; 0xac2
  uint16_t menu_selector_y       = 3;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	; 0xac0

  uint8_t  mode = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3abf 	strb.w	r3, [r7, #2751]	; 0xabf
  uint8_t  mode_seconds = 5;
 80018e8:	2305      	movs	r3, #5
 80018ea:	f887 3abe 	strb.w	r3, [r7, #2750]	; 0xabe
  uint8_t  mode_voltage = 6;
 80018ee:	2306      	movs	r3, #6
 80018f0:	f887 3abd 	strb.w	r3, [r7, #2749]	; 0xabd

  uint16_t encoder0_prev = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8a7 3aba 	strh.w	r3, [r7, #2746]	; 0xaba
  uint16_t encoder1_prev = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8a7 3ab8 	strh.w	r3, [r7, #2744]	; 0xab8

  uint8_t  frames = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3ab7 	strb.w	r3, [r7, #2743]	; 0xab7
  uint32_t frames_ticks = HAL_GetTick();
 8001906:	f003 f843 	bl	8004990 <HAL_GetTick>
 800190a:	f8c7 0ab0 	str.w	r0, [r7, #2736]	; 0xab0

  uint16_t pixel_dirty0[280][2];
  uint16_t pixel_dirty1[280][2];
  for (uint16_t i = 0; i < 280; i++) {
 800190e:	2300      	movs	r3, #0
 8001910:	f8a7 3aae 	strh.w	r3, [r7, #2734]	; 0xaae
 8001914:	e02a      	b.n	800196c <main+0x144>
	  pixel_dirty0[i][0] = 0;
 8001916:	f8b7 2aae 	ldrh.w	r2, [r7, #2734]	; 0xaae
 800191a:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800191e:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8001922:	2100      	movs	r1, #0
 8001924:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	  pixel_dirty0[i][1] = 0;
 8001928:	f8b7 3aae 	ldrh.w	r3, [r7, #2734]	; 0xaae
 800192c:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8001930:	f2a2 529c 	subw	r2, r2, #1436	; 0x59c
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	2200      	movs	r2, #0
 800193a:	805a      	strh	r2, [r3, #2]
	  pixel_dirty1[i][0] = 0;
 800193c:	f8b7 2aae 	ldrh.w	r2, [r7, #2734]	; 0xaae
 8001940:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8001944:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 8001948:	2100      	movs	r1, #0
 800194a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	  pixel_dirty1[i][1] = 0;
 800194e:	f8b7 3aae 	ldrh.w	r3, [r7, #2734]	; 0xaae
 8001952:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8001956:	f6a2 12fc 	subw	r2, r2, #2556	; 0x9fc
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	2200      	movs	r2, #0
 8001960:	805a      	strh	r2, [r3, #2]
  for (uint16_t i = 0; i < 280; i++) {
 8001962:	f8b7 3aae 	ldrh.w	r3, [r7, #2734]	; 0xaae
 8001966:	3301      	adds	r3, #1
 8001968:	f8a7 3aae 	strh.w	r3, [r7, #2734]	; 0xaae
 800196c:	f8b7 3aae 	ldrh.w	r3, [r7, #2734]	; 0xaae
 8001970:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001974:	d3cf      	bcc.n	8001916 <main+0xee>
  }

  // Dispaly freq. (for debug)
  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8001976:	2100      	movs	r1, #0
 8001978:	4855      	ldr	r0, [pc, #340]	; (8001ad0 <main+0x2a8>)
 800197a:	f7ff fdae 	bl	80014da <ILI9341_FillScreen>

  snprintf(string, 255, "Oscilloscope");
 800197e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <main+0x2b4>)
 8001984:	21ff      	movs	r1, #255	; 0xff
 8001986:	4618      	mov	r0, r3
 8001988:	f006 ff48 	bl	800881c <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 0, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 800198c:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	9203      	str	r2, [sp, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	4951      	ldr	r1, [pc, #324]	; (8001ae0 <main+0x2b8>)
 800199c:	466a      	mov	r2, sp
 800199e:	c903      	ldmia	r1, {r0, r1}
 80019a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	4849      	ldr	r0, [pc, #292]	; (8001ad0 <main+0x2a8>)
 80019aa:	f7ff fee0 	bl	800176e <ILI9341_WriteString>

  snprintf(string, 255, "SYCLK = %ldMHz", HAL_RCC_GetSysClockFreq()/1000000);
 80019ae:	f004 fe77 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <main+0x2bc>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9b      	lsrs	r3, r3, #18
 80019bc:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 80019c0:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <main+0x2c0>)
 80019c2:	21ff      	movs	r1, #255	; 0xff
 80019c4:	f006 ff2a 	bl	800881c <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 1, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 80019c8:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 80019cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d0:	9203      	str	r2, [sp, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	4942      	ldr	r1, [pc, #264]	; (8001ae0 <main+0x2b8>)
 80019d8:	466a      	mov	r2, sp
 80019da:	c903      	ldmia	r1, {r0, r1}
 80019dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80019e0:	2212      	movs	r2, #18
 80019e2:	2100      	movs	r1, #0
 80019e4:	483a      	ldr	r0, [pc, #232]	; (8001ad0 <main+0x2a8>)
 80019e6:	f7ff fec2 	bl	800176e <ILI9341_WriteString>

  snprintf(string, 255, "HCLK  = %ldMHz", HAL_RCC_GetHCLKFreq()/1000000);
 80019ea:	f004 ff1f 	bl	800682c <HAL_RCC_GetHCLKFreq>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <main+0x2bc>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9b      	lsrs	r3, r3, #18
 80019f8:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 80019fc:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <main+0x2c4>)
 80019fe:	21ff      	movs	r1, #255	; 0xff
 8001a00:	f006 ff0c 	bl	800881c <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 2, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8001a04:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0c:	9203      	str	r2, [sp, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	9202      	str	r2, [sp, #8]
 8001a12:	4933      	ldr	r1, [pc, #204]	; (8001ae0 <main+0x2b8>)
 8001a14:	466a      	mov	r2, sp
 8001a16:	c903      	ldmia	r1, {r0, r1}
 8001a18:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a1c:	2224      	movs	r2, #36	; 0x24
 8001a1e:	2100      	movs	r1, #0
 8001a20:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <main+0x2a8>)
 8001a22:	f7ff fea4 	bl	800176e <ILI9341_WriteString>

  snprintf(string, 255, "APB1  = %ldMHz", HAL_RCC_GetPCLK1Freq()/1000000);
 8001a26:	f004 ff0d 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <main+0x2bc>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <main+0x2c8>)
 8001a3a:	21ff      	movs	r1, #255	; 0xff
 8001a3c:	f006 feee 	bl	800881c <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 3, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8001a40:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a48:	9203      	str	r2, [sp, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	9202      	str	r2, [sp, #8]
 8001a4e:	4924      	ldr	r1, [pc, #144]	; (8001ae0 <main+0x2b8>)
 8001a50:	466a      	mov	r2, sp
 8001a52:	c903      	ldmia	r1, {r0, r1}
 8001a54:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a58:	2236      	movs	r2, #54	; 0x36
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <main+0x2a8>)
 8001a5e:	f7ff fe86 	bl	800176e <ILI9341_WriteString>

  snprintf(string, 255, "APB2  = %ldMHz", HAL_RCC_GetPCLK2Freq()/1000000);
 8001a62:	f004 ff03 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <main+0x2bc>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 8001a74:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <main+0x2cc>)
 8001a76:	21ff      	movs	r1, #255	; 0xff
 8001a78:	f006 fed0 	bl	800881c <sniprintf>
  ILI9341_WriteString(&display, 0, 18 * 4, string, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8001a7c:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a84:	9203      	str	r2, [sp, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	9202      	str	r2, [sp, #8]
 8001a8a:	4915      	ldr	r1, [pc, #84]	; (8001ae0 <main+0x2b8>)
 8001a8c:	466a      	mov	r2, sp
 8001a8e:	c903      	ldmia	r1, {r0, r1}
 8001a90:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a94:	2248      	movs	r2, #72	; 0x48
 8001a96:	2100      	movs	r1, #0
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <main+0x2a8>)
 8001a9a:	f7ff fe68 	bl	800176e <ILI9341_WriteString>

  HAL_Delay(1000);
 8001a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa2:	f002 ff81 	bl	80049a8 <HAL_Delay>
  ILI9341_FillScreen(&display, ILI9341_BLACK);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <main+0x2a8>)
 8001aaa:	f7ff fd16 	bl	80014da <ILI9341_FillScreen>

  adc_reset_cyccnt = 1;
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <main+0x2d0>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
  if (adc_immediate) {
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <main+0x2d4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d025      	beq.n	8001b08 <main+0x2e0>
	  // The ADC starts immediately after the previous measurement is handled
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8001abc:	2202      	movs	r2, #2
 8001abe:	4910      	ldr	r1, [pc, #64]	; (8001b00 <main+0x2d8>)
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <main+0x2dc>)
 8001ac2:	f002 ffd9 	bl	8004a78 <HAL_ADC_Start_DMA>
 8001ac6:	e022      	b.n	8001b0e <main+0x2e6>
 8001ac8:	e000edfc 	.word	0xe000edfc
 8001acc:	e0001000 	.word	0xe0001000
 8001ad0:	2000044c 	.word	0x2000044c
 8001ad4:	200002d4 	.word	0x200002d4
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	0800ab18 	.word	0x0800ab18
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	0800ab28 	.word	0x0800ab28
 8001aec:	0800ab38 	.word	0x0800ab38
 8001af0:	0800ab48 	.word	0x0800ab48
 8001af4:	0800ab58 	.word	0x0800ab58
 8001af8:	20000012 	.word	0x20000012
 8001afc:	20000018 	.word	0x20000018
 8001b00:	20000468 	.word	0x20000468
 8001b04:	2000022c 	.word	0x2000022c
  } else {
	  // ADC starts by timer
	  HAL_TIM_Base_Start_IT(&htim10);
 8001b08:	48a5      	ldr	r0, [pc, #660]	; (8001da0 <main+0x578>)
 8001b0a:	f005 f9a3 	bl	8006e54 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Draw axis
	if (event_axis) {
 8001b0e:	4ba5      	ldr	r3, [pc, #660]	; (8001da4 <main+0x57c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <main+0x2fa>
		drawAxis(&display);
 8001b16:	48a4      	ldr	r0, [pc, #656]	; (8001da8 <main+0x580>)
 8001b18:	f001 fadc 	bl	80030d4 <drawAxis>
		event_axis = 0;
 8001b1c:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <main+0x57c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
	}

	uint8_t local_event_adc = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3aad 	strb.w	r3, [r7, #2733]	; 0xaad
	if (event_adc) {
 8001b28:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <main+0x584>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <main+0x314>
		local_event_adc = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3aad 	strb.w	r3, [r7, #2733]	; 0xaad
		event_adc = 0;
 8001b36:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <main+0x584>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
	}

	// Draw signals
	if (local_event_adc) {
 8001b3c:	f897 3aad 	ldrb.w	r3, [r7, #2733]	; 0xaad
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d029      	beq.n	8001b98 <main+0x370>

		if (menu_channel0_enabled)
 8001b44:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <main+0x346>
			drawSignal(&display, adc0_time, adc0, adc0_length, pixel_dirty0, cursor0, ILI9341_YELLOW);
 8001b4c:	4b98      	ldr	r3, [pc, #608]	; (8001db0 <main+0x588>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b98      	ldr	r3, [pc, #608]	; (8001db4 <main+0x58c>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001b58:	9102      	str	r1, [sp, #8]
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4613      	mov	r3, r2
 8001b64:	4a94      	ldr	r2, [pc, #592]	; (8001db8 <main+0x590>)
 8001b66:	4995      	ldr	r1, [pc, #596]	; (8001dbc <main+0x594>)
 8001b68:	488f      	ldr	r0, [pc, #572]	; (8001da8 <main+0x580>)
 8001b6a:	f001 fc05 	bl	8003378 <drawSignal>

		if (menu_channel1_enabled)
 8001b6e:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <main+0x370>
			drawSignal(&display, adc1_time, adc1, adc1_length, pixel_dirty1, cursor1, ILI9341_CYAN);
 8001b76:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <main+0x598>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <main+0x59c>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001b82:	9102      	str	r1, [sp, #8]
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	4a8e      	ldr	r2, [pc, #568]	; (8001dc8 <main+0x5a0>)
 8001b90:	498e      	ldr	r1, [pc, #568]	; (8001dcc <main+0x5a4>)
 8001b92:	4885      	ldr	r0, [pc, #532]	; (8001da8 <main+0x580>)
 8001b94:	f001 fbf0 	bl	8003378 <drawSignal>

	}

	// Draw FPS
	if (frames > 60) {
 8001b98:	f897 3ab7 	ldrb.w	r3, [r7, #2743]	; 0xab7
 8001b9c:	2b3c      	cmp	r3, #60	; 0x3c
 8001b9e:	d933      	bls.n	8001c08 <main+0x3e0>
		snprintf(string, 255, "FPS: %5i", (int)(1000.0f / ((float)(HAL_GetTick() - frames_ticks) / 60.0f)));
 8001ba0:	f002 fef6 	bl	8004990 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb4:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001dd0 <main+0x5a8>
 8001bb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bbc:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001dd4 <main+0x5ac>
 8001bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 8001bcc:	ee17 3a90 	vmov	r3, s15
 8001bd0:	4a81      	ldr	r2, [pc, #516]	; (8001dd8 <main+0x5b0>)
 8001bd2:	21ff      	movs	r1, #255	; 0xff
 8001bd4:	f006 fe22 	bl	800881c <sniprintf>
		ILI9341_WriteString(&display, 225, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001bd8:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001bdc:	2200      	movs	r2, #0
 8001bde:	9203      	str	r2, [sp, #12]
 8001be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be4:	9202      	str	r2, [sp, #8]
 8001be6:	497d      	ldr	r1, [pc, #500]	; (8001ddc <main+0x5b4>)
 8001be8:	466a      	mov	r2, sp
 8001bea:	c903      	ldmia	r1, {r0, r1}
 8001bec:	e882 0003 	stmia.w	r2, {r0, r1}
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	21e1      	movs	r1, #225	; 0xe1
 8001bf4:	486c      	ldr	r0, [pc, #432]	; (8001da8 <main+0x580>)
 8001bf6:	f7ff fdba 	bl	800176e <ILI9341_WriteString>

		frames = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3ab7 	strb.w	r3, [r7, #2743]	; 0xab7
		frames_ticks = HAL_GetTick();
 8001c00:	f002 fec6 	bl	8004990 <HAL_GetTick>
 8001c04:	f8c7 0ab0 	str.w	r0, [r7, #2736]	; 0xab0
	}

	// Handle button events
	if (event_button0) {
 8001c08:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <main+0x5b8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d033      	beq.n	8001c78 <main+0x450>

		if (!menu_extended) {
 8001c10:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	; 0xac7
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d12c      	bne.n	8001c72 <main+0x44a>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8001c18:	f8b7 2ac0 	ldrh.w	r2, [r7, #2752]	; 0xac0
 8001c1c:	f8b7 1ac2 	ldrh.w	r1, [r7, #2754]	; 0xac2
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	230d      	movs	r3, #13
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2326      	movs	r3, #38	; 0x26
 8001c2a:	485f      	ldr	r0, [pc, #380]	; (8001da8 <main+0x580>)
 8001c2c:	f7ff fce4 	bl	80015f8 <ILI9341_Rectangle>

			menu_selected_item++;
 8001c30:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4

			if (menu_selected_item > 3)
 8001c3e:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	dd02      	ble.n	8001c4c <main+0x424>
				menu_selected_item = 2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4

			menu_selector_x = 20 + 38 * menu_selected_item;
 8001c4c:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	441a      	add	r2, r3
 8001c58:	0052      	lsls	r2, r2, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3314      	adds	r3, #20
 8001c62:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	; 0xac2
			menu_selector_y = 3;
 8001c66:	2303      	movs	r3, #3
 8001c68:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	; 0xac0

			event_selector = 1;
 8001c6c:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <main+0x5bc>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
		}

		event_button0 = 0;
 8001c72:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <main+0x5b8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
	}

	if (event_button1) {
 8001c78:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <main+0x5c0>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03b      	beq.n	8001cf8 <main+0x4d0>
		menu_extended = !menu_extended;
 8001c80:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	; 0xac7
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f887 3ac7 	strb.w	r3, [r7, #2759]	; 0xac7

		if (!menu_extended) {
 8001c92:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	; 0xac7
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d125      	bne.n	8001ce6 <main+0x4be>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8001c9a:	f8b7 2ac0 	ldrh.w	r2, [r7, #2752]	; 0xac0
 8001c9e:	f8b7 1ac2 	ldrh.w	r1, [r7, #2754]	; 0xac2
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	230d      	movs	r3, #13
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2326      	movs	r3, #38	; 0x26
 8001cac:	483e      	ldr	r0, [pc, #248]	; (8001da8 <main+0x580>)
 8001cae:	f7ff fca3 	bl	80015f8 <ILI9341_Rectangle>

			menu_selected_item = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4

			menu_selector_x = 20 + 38 * menu_selected_item;
 8001cb8:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	00d2      	lsls	r2, r2, #3
 8001cc2:	441a      	add	r2, r3
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3314      	adds	r3, #20
 8001cce:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	; 0xac2
			menu_selector_y = 3;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	; 0xac0

			mode = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3abf 	strb.w	r3, [r7, #2751]	; 0xabf
			event_selector = 1;
 8001cde:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <main+0x5bc>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e002      	b.n	8001cec <main+0x4c4>
		} else
			mode = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3abf 	strb.w	r3, [r7, #2751]	; 0xabf

		event_mode = 1;
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <main+0x5c4>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
		event_button1 = 0;
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <main+0x5c0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
	}

	if (event_button2) {
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <main+0x5c8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d039      	beq.n	8001d74 <main+0x54c>
		if (menu_selected_item == 2) {
 8001d00:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d112      	bne.n	8001d2e <main+0x506>
			menu_channel0_enabled = !menu_channel0_enabled;
 8001d08:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f887 3ac6 	strb.w	r3, [r7, #2758]	; 0xac6

			if (!menu_channel0_enabled)
 8001d1a:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <main+0x506>
				clearSignal(&display, pixel_dirty0);
 8001d22:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8001d26:	4619      	mov	r1, r3
 8001d28:	481f      	ldr	r0, [pc, #124]	; (8001da8 <main+0x580>)
 8001d2a:	f001 fe6b 	bl	8003a04 <clearSignal>
		}

		if (menu_selected_item == 3) {
 8001d2e:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d112      	bne.n	8001d5c <main+0x534>
			menu_channel1_enabled = !menu_channel1_enabled;
 8001d36:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f887 3ac5 	strb.w	r3, [r7, #2757]	; 0xac5

			if (!menu_channel1_enabled)
 8001d48:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <main+0x534>
				clearSignal(&display, pixel_dirty1);
 8001d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d54:	4619      	mov	r1, r3
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <main+0x580>)
 8001d58:	f001 fe54 	bl	8003a04 <clearSignal>
		}

		event_cursor  = 1;
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <main+0x5cc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <main+0x5d0>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
		event_channel = 1;
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <main+0x5d4>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
		event_button2 = 0;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <main+0x5c8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw channel events
	if (event_channel) {
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <main+0x5d4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d06a      	beq.n	8001e52 <main+0x62a>
		uint16_t channel0_color = menu_channel0_enabled ? ILI9341_YELLOW  : ILI9341_COLOR565(60, 60, 0);
 8001d7c:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <main+0x562>
 8001d84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d88:	e001      	b.n	8001d8e <main+0x566>
 8001d8a:	f643 13e0 	movw	r3, #14816	; 0x39e0
 8001d8e:	f8a7 3a9e 	strh.w	r3, [r7, #2718]	; 0xa9e
		uint16_t channel1_color = menu_channel1_enabled ? ILI9341_CYAN    : ILI9341_COLOR565(0, 60, 60);
 8001d92:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d032      	beq.n	8001e00 <main+0x5d8>
 8001d9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d9e:	e031      	b.n	8001e04 <main+0x5dc>
 8001da0:	20000404 	.word	0x20000404
 8001da4:	20000030 	.word	0x20000030
 8001da8:	2000044c 	.word	0x2000044c
 8001dac:	20001c8d 	.word	0x20001c8d
 8001db0:	20000470 	.word	0x20000470
 8001db4:	20000024 	.word	0x20000024
 8001db8:	2000148c 	.word	0x2000148c
 8001dbc:	2000048c 	.word	0x2000048c
 8001dc0:	20000474 	.word	0x20000474
 8001dc4:	20000026 	.word	0x20000026
 8001dc8:	2000188c 	.word	0x2000188c
 8001dcc:	20000c8c 	.word	0x20000c8c
 8001dd0:	42700000 	.word	0x42700000
 8001dd4:	447a0000 	.word	0x447a0000
 8001dd8:	0800ab68 	.word	0x0800ab68
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20001c8e 	.word	0x20001c8e
 8001de4:	20000037 	.word	0x20000037
 8001de8:	20001c8f 	.word	0x20001c8f
 8001dec:	20000031 	.word	0x20000031
 8001df0:	20001c90 	.word	0x20001c90
 8001df4:	20000032 	.word	0x20000032
 8001df8:	20000033 	.word	0x20000033
 8001dfc:	20000034 	.word	0x20000034
 8001e00:	f240 13e7 	movw	r3, #487	; 0x1e7
 8001e04:	f8a7 3a9c 	strh.w	r3, [r7, #2716]	; 0xa9c

		ILI9341_WriteString(&display, 110 - 12, 5, " CH1 ", Font_7x10, ILI9341_BLACK, channel0_color);
 8001e08:	f8b7 3a9e 	ldrh.w	r3, [r7, #2718]	; 0xa9e
 8001e0c:	9303      	str	r3, [sp, #12]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <main+0x72c>)
 8001e14:	466b      	mov	r3, sp
 8001e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <main+0x730>)
 8001e20:	2205      	movs	r2, #5
 8001e22:	2162      	movs	r1, #98	; 0x62
 8001e24:	484d      	ldr	r0, [pc, #308]	; (8001f5c <main+0x734>)
 8001e26:	f7ff fca2 	bl	800176e <ILI9341_WriteString>
		ILI9341_WriteString(&display, 148 - 12, 5, " CH2 ", Font_7x10, ILI9341_BLACK, channel1_color);
 8001e2a:	f8b7 3a9c 	ldrh.w	r3, [r7, #2716]	; 0xa9c
 8001e2e:	9303      	str	r3, [sp, #12]
 8001e30:	2300      	movs	r3, #0
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	4a47      	ldr	r2, [pc, #284]	; (8001f54 <main+0x72c>)
 8001e36:	466b      	mov	r3, sp
 8001e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <main+0x738>)
 8001e42:	2205      	movs	r2, #5
 8001e44:	2188      	movs	r1, #136	; 0x88
 8001e46:	4845      	ldr	r0, [pc, #276]	; (8001f5c <main+0x734>)
 8001e48:	f7ff fc91 	bl	800176e <ILI9341_WriteString>

		event_channel = 0;
 8001e4c:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <main+0x73c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder0
	int32_t encoder0_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <main+0x740>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
	encoder0_curr = 32767 - ((encoder0_curr - 1) & 0xFFFF) / 2;
 8001e5c:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	0fda      	lsrs	r2, r3, #31
 8001e66:	4413      	add	r3, r2
 8001e68:	105b      	asrs	r3, r3, #1
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001e70:	337f      	adds	r3, #127	; 0x7f
 8001e72:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98

	if(encoder0_curr != encoder0_prev) {
 8001e76:	f8b7 3aba 	ldrh.w	r3, [r7, #2746]	; 0xaba
 8001e7a:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	f000 80c2 	beq.w	8002008 <main+0x7e0>
		int32_t delta = encoder0_curr - encoder0_prev;
 8001e84:	f8b7 3aba 	ldrh.w	r3, [r7, #2746]	; 0xaba
 8001e88:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8

		if (delta > 10)
 8001e92:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001e96:	2b0a      	cmp	r3, #10
 8001e98:	dd03      	ble.n	8001ea2 <main+0x67a>
			delta = -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8

		if (delta < -10)
 8001ea2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001ea6:	f113 0f0a 	cmn.w	r3, #10
 8001eaa:	da02      	bge.n	8001eb2 <main+0x68a>
			delta = 1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8

		if (menu_extended) {
 8001eb2:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	; 0xac7
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d05a      	beq.n	8001f70 <main+0x748>
			ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_BLACK);
 8001eba:	f8b7 2ac0 	ldrh.w	r2, [r7, #2752]	; 0xac0
 8001ebe:	f8b7 1ac2 	ldrh.w	r1, [r7, #2754]	; 0xac2
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	230d      	movs	r3, #13
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2326      	movs	r3, #38	; 0x26
 8001ecc:	4823      	ldr	r0, [pc, #140]	; (8001f5c <main+0x734>)
 8001ece:	f7ff fb93 	bl	80015f8 <ILI9341_Rectangle>

			menu_selected_item += delta;
 8001ed2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	f897 3ac4 	ldrb.w	r3, [r7, #2756]	; 0xac4
 8001edc:	4413      	add	r3, r2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4

			if (menu_selected_item < 0)
 8001ee4:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da02      	bge.n	8001ef2 <main+0x6ca>
				menu_selected_item = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4

			if (menu_selected_item > 5)
 8001ef2:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	dd02      	ble.n	8001f00 <main+0x6d8>
				menu_selected_item = 5;
 8001efa:	2305      	movs	r3, #5
 8001efc:	f887 3ac4 	strb.w	r3, [r7, #2756]	; 0xac4

			if (menu_selected_item < 4) {
 8001f00:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	dc10      	bgt.n	8001f2a <main+0x702>
				menu_selector_x = 20 + 38 * menu_selected_item;
 8001f08:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	00d2      	lsls	r2, r2, #3
 8001f12:	441a      	add	r2, r3
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3314      	adds	r3, #20
 8001f1e:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	; 0xac2
				menu_selector_y = 3;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	; 0xac0
 8001f28:	e010      	b.n	8001f4c <main+0x724>
			} else {
				menu_selector_x = 20 + 38 * (menu_selected_item - 4);
 8001f2a:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	00d2      	lsls	r2, r2, #3
 8001f36:	441a      	add	r2, r3
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3314      	adds	r3, #20
 8001f42:	f8a7 3ac2 	strh.w	r3, [r7, #2754]	; 0xac2
				menu_selector_y = 223;
 8001f46:	23df      	movs	r3, #223	; 0xdf
 8001f48:	f8a7 3ac0 	strh.w	r3, [r7, #2752]	; 0xac0
			}

			event_selector = 1;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <main+0x744>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	e04f      	b.n	8001ff4 <main+0x7cc>
 8001f54:	20000000 	.word	0x20000000
 8001f58:	0800ab74 	.word	0x0800ab74
 8001f5c:	2000044c 	.word	0x2000044c
 8001f60:	0800ab7c 	.word	0x0800ab7c
 8001f64:	20000034 	.word	0x20000034
 8001f68:	20000374 	.word	0x20000374
 8001f6c:	20000037 	.word	0x20000037

		} else {

			if (menu_selected_item == 2) {
 8001f70:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d11c      	bne.n	8001fb2 <main+0x78a>
				clearCursor(&display, cursor0);
 8001f78:	4b9a      	ldr	r3, [pc, #616]	; (80021e4 <main+0x9bc>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	489a      	ldr	r0, [pc, #616]	; (80021e8 <main+0x9c0>)
 8001f80:	f001 f925 	bl	80031ce <clearCursor>
				cursor0 += delta;
 8001f84:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <main+0x9bc>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <main+0x9bc>)
 8001f94:	801a      	strh	r2, [r3, #0]

				if (cursor0 < 20)
 8001f96:	4b93      	ldr	r3, [pc, #588]	; (80021e4 <main+0x9bc>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b13      	cmp	r3, #19
 8001f9c:	d802      	bhi.n	8001fa4 <main+0x77c>
					cursor0 = 20;
 8001f9e:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <main+0x9bc>)
 8001fa0:	2214      	movs	r2, #20
 8001fa2:	801a      	strh	r2, [r3, #0]

				if (cursor0 > 220)
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <main+0x9bc>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	2bdc      	cmp	r3, #220	; 0xdc
 8001faa:	d902      	bls.n	8001fb2 <main+0x78a>
					cursor0 = 220;
 8001fac:	4b8d      	ldr	r3, [pc, #564]	; (80021e4 <main+0x9bc>)
 8001fae:	22dc      	movs	r2, #220	; 0xdc
 8001fb0:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 8001fb2:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d11c      	bne.n	8001ff4 <main+0x7cc>
				clearCursor(&display, cursor1);
 8001fba:	4b8c      	ldr	r3, [pc, #560]	; (80021ec <main+0x9c4>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4889      	ldr	r0, [pc, #548]	; (80021e8 <main+0x9c0>)
 8001fc2:	f001 f904 	bl	80031ce <clearCursor>
				cursor1 += delta;
 8001fc6:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b87      	ldr	r3, [pc, #540]	; (80021ec <main+0x9c4>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b85      	ldr	r3, [pc, #532]	; (80021ec <main+0x9c4>)
 8001fd6:	801a      	strh	r2, [r3, #0]

				if (cursor1 < 20)
 8001fd8:	4b84      	ldr	r3, [pc, #528]	; (80021ec <main+0x9c4>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b13      	cmp	r3, #19
 8001fde:	d802      	bhi.n	8001fe6 <main+0x7be>
					cursor1 = 20;
 8001fe0:	4b82      	ldr	r3, [pc, #520]	; (80021ec <main+0x9c4>)
 8001fe2:	2214      	movs	r2, #20
 8001fe4:	801a      	strh	r2, [r3, #0]

				if (cursor1 > 220)
 8001fe6:	4b81      	ldr	r3, [pc, #516]	; (80021ec <main+0x9c4>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2bdc      	cmp	r3, #220	; 0xdc
 8001fec:	d902      	bls.n	8001ff4 <main+0x7cc>
					cursor1 = 220;
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <main+0x9c4>)
 8001ff0:	22dc      	movs	r2, #220	; 0xdc
 8001ff2:	801a      	strh	r2, [r3, #0]
			}

		}

		event_cursor = 1;
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <main+0x9c8>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
		event_trigger = 1;
 8001ffa:	4b7e      	ldr	r3, [pc, #504]	; (80021f4 <main+0x9cc>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
		encoder0_prev = encoder0_curr;
 8002000:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002004:	f8a7 3aba 	strh.w	r3, [r7, #2746]	; 0xaba
	}

	// Handle UI redraw cursor events
	if (event_cursor) {
 8002008:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <main+0x9c8>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d026      	beq.n	800205e <main+0x836>
		clearCursor(&display, cursor0);
 8002010:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <main+0x9bc>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	4874      	ldr	r0, [pc, #464]	; (80021e8 <main+0x9c0>)
 8002018:	f001 f8d9 	bl	80031ce <clearCursor>
		clearCursor(&display, cursor1);
 800201c:	4b73      	ldr	r3, [pc, #460]	; (80021ec <main+0x9c4>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	4871      	ldr	r0, [pc, #452]	; (80021e8 <main+0x9c0>)
 8002024:	f001 f8d3 	bl	80031ce <clearCursor>

		if (menu_channel0_enabled)
 8002028:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <main+0x818>
			drawCursor(&display, cursor0, "C1", ILI9341_YELLOW);
 8002030:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <main+0x9bc>)
 8002032:	8819      	ldrh	r1, [r3, #0]
 8002034:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002038:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <main+0x9d0>)
 800203a:	486b      	ldr	r0, [pc, #428]	; (80021e8 <main+0x9c0>)
 800203c:	f001 f8f4 	bl	8003228 <drawCursor>

		if (menu_channel1_enabled)
 8002040:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <main+0x830>
			drawCursor(&display, cursor1, "C2", ILI9341_CYAN);
 8002048:	4b68      	ldr	r3, [pc, #416]	; (80021ec <main+0x9c4>)
 800204a:	8819      	ldrh	r1, [r3, #0]
 800204c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002050:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <main+0x9d4>)
 8002052:	4865      	ldr	r0, [pc, #404]	; (80021e8 <main+0x9c0>)
 8002054:	f001 f8e8 	bl	8003228 <drawCursor>

		event_cursor = 0;
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <main+0x9c8>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
	}

	// Handle encoder1
	int32_t encoder1_curr = __HAL_TIM_GET_COUNTER(&htim4);
 800205e:	4b68      	ldr	r3, [pc, #416]	; (8002200 <main+0x9d8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
	encoder1_curr = 32767 - ((encoder1_curr - 1) & 0xFFFF) / 2;
 8002068:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800206c:	3b01      	subs	r3, #1
 800206e:	b29b      	uxth	r3, r3
 8002070:	0fda      	lsrs	r2, r3, #31
 8002072:	4413      	add	r3, r2
 8002074:	105b      	asrs	r3, r3, #1
 8002076:	425b      	negs	r3, r3
 8002078:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800207c:	337f      	adds	r3, #127	; 0x7f
 800207e:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94

	if(encoder1_curr != encoder1_prev || event_trigger) {
 8002082:	f8b7 3ab8 	ldrh.w	r3, [r7, #2744]	; 0xab8
 8002086:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 800208a:	429a      	cmp	r2, r3
 800208c:	d104      	bne.n	8002098 <main+0x870>
 800208e:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <main+0x9cc>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8231 	beq.w	80024fa <main+0xcd2>
		int32_t delta = encoder1_curr - encoder1_prev;
 8002098:	f8b7 3ab8 	ldrh.w	r3, [r7, #2744]	; 0xab8
 800209c:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

		if (delta > 10)
 80020a6:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	dd03      	ble.n	80020b6 <main+0x88e>
			delta = -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b2:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

		if (delta < -10)
 80020b6:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80020ba:	f113 0f0a 	cmn.w	r3, #10
 80020be:	da02      	bge.n	80020c6 <main+0x89e>
			delta = 1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

		if (menu_extended) {
 80020c6:	f897 3ac7 	ldrb.w	r3, [r7, #2759]	; 0xac7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8152 	beq.w	8002374 <main+0xb4c>

			if (menu_selected_item == 1) {
 80020d0:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d112      	bne.n	80020fe <main+0x8d6>
				trigger_mode += delta;
 80020d8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <main+0x9dc>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <main+0x9dc>)
 80020e8:	701a      	strb	r2, [r3, #0]

				if (trigger_mode < 0)
					trigger_mode = 0;

				if (trigger_mode > 1)
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <main+0x9dc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d902      	bls.n	80020f8 <main+0x8d0>
					trigger_mode = 1;
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <main+0x9dc>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]

				event_trigger_mode = 1;
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <main+0x9e0>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 4) {
 80020fe:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8002102:	2b04      	cmp	r3, #4
 8002104:	f040 80ef 	bne.w	80022e6 <main+0xabe>
				mode_seconds += delta;
 8002108:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800210c:	b2da      	uxtb	r2, r3
 800210e:	f897 3abe 	ldrb.w	r3, [r7, #2750]	; 0xabe
 8002112:	4413      	add	r3, r2
 8002114:	f887 3abe 	strb.w	r3, [r7, #2750]	; 0xabe

				if (mode_seconds < 0)
					mode_seconds = 0;

				if (mode_seconds > 16)
 8002118:	f897 3abe 	ldrb.w	r3, [r7, #2750]	; 0xabe
 800211c:	2b10      	cmp	r3, #16
 800211e:	d902      	bls.n	8002126 <main+0x8fe>
					mode_seconds = 16;
 8002120:	2310      	movs	r3, #16
 8002122:	f887 3abe 	strb.w	r3, [r7, #2750]	; 0xabe

				uint32_t list_seconds[17] = {
 8002126:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800212a:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <main+0x9e4>)
 8002130:	4618      	mov	r0, r3
 8002132:	4611      	mov	r1, r2
 8002134:	2344      	movs	r3, #68	; 0x44
 8002136:	461a      	mov	r2, r3
 8002138:	f006 fc67 	bl	8008a0a <memcpy>
					200000,
					500000,
					1000000
				};

				xlim_us = list_seconds[mode_seconds];
 800213c:	f897 2abe 	ldrb.w	r2, [r7, #2750]	; 0xabe
 8002140:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8002144:	f6a3 23c8 	subw	r3, r3, #2760	; 0xac8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <main+0x9e8>)
 800214e:	6013      	str	r3, [r2, #0]

				if (adc_immediate) {
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <main+0x9ec>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <main+0x93c>
					HAL_TIM_Base_Stop_IT(&htim10);
 8002158:	482f      	ldr	r0, [pc, #188]	; (8002218 <main+0x9f0>)
 800215a:	f004 fedd 	bl	8006f18 <HAL_TIM_Base_Stop_IT>
					adc_available = 1;
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <main+0x9f4>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
				}

				HAL_ADC_Stop_DMA(&hadc1);
 8002164:	482e      	ldr	r0, [pc, #184]	; (8002220 <main+0x9f8>)
 8002166:	f002 fd77 	bl	8004c58 <HAL_ADC_Stop_DMA>

				adc_reset_cyccnt = 1;
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <main+0x9fc>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
				adc0_length = 0;
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <main+0xa00>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
				adc1_length = 0;
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <main+0xa04>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
				adc_max[0] = 0;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <main+0xa08>)
 800217e:	2200      	movs	r2, #0
 8002180:	801a      	strh	r2, [r3, #0]
				adc_max[1] = 0;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <main+0xa08>)
 8002184:	2200      	movs	r2, #0
 8002186:	805a      	strh	r2, [r3, #2]
				adc_min[0] = -1;
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <main+0xa0c>)
 800218a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218e:	801a      	strh	r2, [r3, #0]
				adc_min[1] = -1;
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <main+0xa0c>)
 8002192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002196:	805a      	strh	r2, [r3, #2]
				adc_period[0] = 0;
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <main+0xa10>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
				adc_period[1] = 0;
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <main+0xa10>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
				adc_period0_detected = 0;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <main+0xa14>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
				adc_period1_detected = 0;
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <main+0xa18>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
				event_trigger0_detected = 0;
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <main+0xa1c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
				event_trigger1_detected = 0;
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <main+0xa20>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]

				if (menu_channel0_enabled)
 80021bc:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <main+0x9a4>
					adc0_filled = 0;
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <main+0xa24>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e002      	b.n	80021d2 <main+0x9aa>
				else
					adc0_filled = 1;
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <main+0xa24>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]

				if (menu_channel1_enabled)
 80021d2:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03c      	beq.n	8002254 <main+0xa2c>
					adc1_filled = 0;
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <main+0xa28>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e03b      	b.n	800225a <main+0xa32>
 80021e2:	bf00      	nop
 80021e4:	20000024 	.word	0x20000024
 80021e8:	2000044c 	.word	0x2000044c
 80021ec:	20000026 	.word	0x20000026
 80021f0:	20000032 	.word	0x20000032
 80021f4:	20000033 	.word	0x20000033
 80021f8:	0800ab84 	.word	0x0800ab84
 80021fc:	0800ab88 	.word	0x0800ab88
 8002200:	200003bc 	.word	0x200003bc
 8002204:	20001c8c 	.word	0x20001c8c
 8002208:	20000038 	.word	0x20000038
 800220c:	0800abe4 	.word	0x0800abe4
 8002210:	2000001c 	.word	0x2000001c
 8002214:	20000018 	.word	0x20000018
 8002218:	20000404 	.word	0x20000404
 800221c:	20000011 	.word	0x20000011
 8002220:	2000022c 	.word	0x2000022c
 8002224:	20000012 	.word	0x20000012
 8002228:	20000470 	.word	0x20000470
 800222c:	20000474 	.word	0x20000474
 8002230:	2000047c 	.word	0x2000047c
 8002234:	20000014 	.word	0x20000014
 8002238:	20000480 	.word	0x20000480
 800223c:	20000488 	.word	0x20000488
 8002240:	20000489 	.word	0x20000489
 8002244:	20000039 	.word	0x20000039
 8002248:	2000003a 	.word	0x2000003a
 800224c:	20000478 	.word	0x20000478
 8002250:	20000010 	.word	0x20000010
				else
					adc1_filled = 1;
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <main+0xb20>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]

				adc_immediate = xlim_us <= 500;
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <main+0xb24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <main+0xb28>)
 800226e:	701a      	strb	r2, [r3, #0]

				if (!adc_immediate) {
 8002270:	4b37      	ldr	r3, [pc, #220]	; (8002350 <main+0xb28>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d12b      	bne.n	80022d0 <main+0xaa8>
					uint32_t list_timer_settings[17][2] = {
 8002278:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800227c:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8002280:	4a34      	ldr	r2, [pc, #208]	; (8002354 <main+0xb2c>)
 8002282:	4618      	mov	r0, r3
 8002284:	4611      	mov	r1, r2
 8002286:	2388      	movs	r3, #136	; 0x88
 8002288:	461a      	mov	r2, r3
 800228a:	f006 fbbe 	bl	8008a0a <memcpy>
						{  8228, 100 },
						{ 20570, 100 },
						{ 41142, 100 }
					};

					htim10.Init.Prescaler = list_timer_settings[mode_seconds][0];
 800228e:	f897 2abe 	ldrb.w	r2, [r7, #2750]	; 0xabe
 8002292:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8002296:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 800229a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800229e:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <main+0xb30>)
 80022a0:	6053      	str	r3, [r2, #4]
					htim10.Init.Period    = list_timer_settings[mode_seconds][1];
 80022a2:	f897 3abe 	ldrb.w	r3, [r7, #2750]	; 0xabe
 80022a6:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 80022aa:	f6a2 2284 	subw	r2, r2, #2692	; 0xa84
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <main+0xb30>)
 80022b6:	60d3      	str	r3, [r2, #12]

					if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022b8:	4827      	ldr	r0, [pc, #156]	; (8002358 <main+0xb30>)
 80022ba:	f004 fd7b 	bl	8006db4 <HAL_TIM_Base_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <main+0xaa0>
						Error_Handler();
 80022c4:	f001 fd38 	bl	8003d38 <Error_Handler>

					HAL_TIM_Base_Start_IT(&htim10);
 80022c8:	4823      	ldr	r0, [pc, #140]	; (8002358 <main+0xb30>)
 80022ca:	f004 fdc3 	bl	8006e54 <HAL_TIM_Base_Start_IT>
 80022ce:	e004      	b.n	80022da <main+0xab2>
				} else
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80022d0:	2202      	movs	r2, #2
 80022d2:	4922      	ldr	r1, [pc, #136]	; (800235c <main+0xb34>)
 80022d4:	4822      	ldr	r0, [pc, #136]	; (8002360 <main+0xb38>)
 80022d6:	f002 fbcf 	bl	8004a78 <HAL_ADC_Start_DMA>

				local_event_adc = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3aad 	strb.w	r3, [r7, #2733]	; 0xaad
				event_seconds = 1;
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <main+0xb3c>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
			}

			if (menu_selected_item == 5) {
 80022e6:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	f040 80fe 	bne.w	80024ec <main+0xcc4>
				mode_voltage += delta;
 80022f0:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	f897 3abd 	ldrb.w	r3, [r7, #2749]	; 0xabd
 80022fa:	4413      	add	r3, r2
 80022fc:	f887 3abd 	strb.w	r3, [r7, #2749]	; 0xabd

				if (mode_voltage < 0)
					mode_voltage = 0;

				if (mode_voltage > 9)
 8002300:	f897 3abd 	ldrb.w	r3, [r7, #2749]	; 0xabd
 8002304:	2b09      	cmp	r3, #9
 8002306:	d902      	bls.n	800230e <main+0xae6>
					mode_voltage = 9;
 8002308:	2309      	movs	r3, #9
 800230a:	f887 3abd 	strb.w	r3, [r7, #2749]	; 0xabd

				uint32_t list_voltage[10] = {
 800230e:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8002312:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <main+0xb40>)
 8002318:	461c      	mov	r4, r3
 800231a:	4615      	mov	r5, r2
 800231c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002328:	e884 0003 	stmia.w	r4, {r0, r1}
					2000000,
					5000000,
					10000000
				};

				ylim_uV = list_voltage[mode_voltage];
 800232c:	f897 2abd 	ldrb.w	r2, [r7, #2749]	; 0xabd
 8002330:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8002334:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <main+0xb44>)
 800233e:	6013      	str	r3, [r2, #0]

				event_voltage = 1;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <main+0xb48>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e0d1      	b.n	80024ec <main+0xcc4>
 8002348:	20000010 	.word	0x20000010
 800234c:	2000001c 	.word	0x2000001c
 8002350:	20000018 	.word	0x20000018
 8002354:	0800ac28 	.word	0x0800ac28
 8002358:	20000404 	.word	0x20000404
 800235c:	20000468 	.word	0x20000468
 8002360:	2000022c 	.word	0x2000022c
 8002364:	20000035 	.word	0x20000035
 8002368:	0800acb0 	.word	0x0800acb0
 800236c:	20000020 	.word	0x20000020
 8002370:	20000036 	.word	0x20000036
			}

		} else {

			if (menu_selected_item == 2) {
 8002374:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8002378:	2b02      	cmp	r3, #2
 800237a:	d159      	bne.n	8002430 <main+0xc08>
				clearTrigger(&display, trigger0);
 800237c:	4bb2      	ldr	r3, [pc, #712]	; (8002648 <main+0xe20>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	48b2      	ldr	r0, [pc, #712]	; (800264c <main+0xe24>)
 8002384:	f000 ff39 	bl	80031fa <clearTrigger>
				trigger0 += delta;
 8002388:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800238c:	b29a      	uxth	r2, r3
 800238e:	4bae      	ldr	r3, [pc, #696]	; (8002648 <main+0xe20>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b29a      	uxth	r2, r3
 8002396:	4bac      	ldr	r3, [pc, #688]	; (8002648 <main+0xe20>)
 8002398:	801a      	strh	r2, [r3, #0]

				if (trigger0 < 20)
 800239a:	4bab      	ldr	r3, [pc, #684]	; (8002648 <main+0xe20>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	2b13      	cmp	r3, #19
 80023a0:	d802      	bhi.n	80023a8 <main+0xb80>
					trigger0 = 20;
 80023a2:	4ba9      	ldr	r3, [pc, #676]	; (8002648 <main+0xe20>)
 80023a4:	2214      	movs	r2, #20
 80023a6:	801a      	strh	r2, [r3, #0]

				if (trigger0 > 220)
 80023a8:	4ba7      	ldr	r3, [pc, #668]	; (8002648 <main+0xe20>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	2bdc      	cmp	r3, #220	; 0xdc
 80023ae:	d902      	bls.n	80023b6 <main+0xb8e>
					trigger0 = 220;
 80023b0:	4ba5      	ldr	r3, [pc, #660]	; (8002648 <main+0xe20>)
 80023b2:	22dc      	movs	r2, #220	; 0xdc
 80023b4:	801a      	strh	r2, [r3, #0]

				if (trigger0 > cursor0)
 80023b6:	4ba4      	ldr	r3, [pc, #656]	; (8002648 <main+0xe20>)
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	4ba5      	ldr	r3, [pc, #660]	; (8002650 <main+0xe28>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d903      	bls.n	80023ca <main+0xba2>
					trigger0 = cursor0;
 80023c2:	4ba3      	ldr	r3, [pc, #652]	; (8002650 <main+0xe28>)
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	4ba0      	ldr	r3, [pc, #640]	; (8002648 <main+0xe20>)
 80023c8:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger0 - cursor0)) / 200.0f));
 80023ca:	4ba2      	ldr	r3, [pc, #648]	; (8002654 <main+0xe2c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d6:	4b9c      	ldr	r3, [pc, #624]	; (8002648 <main+0xe20>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b9c      	ldr	r3, [pc, #624]	; (8002650 <main+0xe28>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ea:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80023ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023f2:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8002658 <main+0xe30>
 80023f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fe:	eef1 7a67 	vneg.f32	s15, s15
 8002402:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002406:	edc3 7a00 	vstr	s15, [r3]
				trigger0_value = uV * 4096.0f / 3300000.0f;
 800240a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800265c <main+0xe34>
 8002416:	ee27 7a87 	vmul.f32	s14, s15, s14
 800241a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8002660 <main+0xe38>
 800241e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002426:	ee17 3a90 	vmov	r3, s15
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b8d      	ldr	r3, [pc, #564]	; (8002664 <main+0xe3c>)
 800242e:	801a      	strh	r2, [r3, #0]
			}

			if (menu_selected_item == 3) {
 8002430:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8002434:	2b03      	cmp	r3, #3
 8002436:	d159      	bne.n	80024ec <main+0xcc4>
				clearTrigger(&display, trigger1);
 8002438:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <main+0xe40>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	4883      	ldr	r0, [pc, #524]	; (800264c <main+0xe24>)
 8002440:	f000 fedb 	bl	80031fa <clearTrigger>
				trigger1 += delta;
 8002444:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b87      	ldr	r3, [pc, #540]	; (8002668 <main+0xe40>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <main+0xe40>)
 8002454:	801a      	strh	r2, [r3, #0]

				if (trigger1 < 20)
 8002456:	4b84      	ldr	r3, [pc, #528]	; (8002668 <main+0xe40>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	2b13      	cmp	r3, #19
 800245c:	d802      	bhi.n	8002464 <main+0xc3c>
					trigger1 = 20;
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <main+0xe40>)
 8002460:	2214      	movs	r2, #20
 8002462:	801a      	strh	r2, [r3, #0]

				if (trigger1 > 220)
 8002464:	4b80      	ldr	r3, [pc, #512]	; (8002668 <main+0xe40>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	2bdc      	cmp	r3, #220	; 0xdc
 800246a:	d902      	bls.n	8002472 <main+0xc4a>
					trigger1 = 220;
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <main+0xe40>)
 800246e:	22dc      	movs	r2, #220	; 0xdc
 8002470:	801a      	strh	r2, [r3, #0]

				if (trigger1 > cursor1)
 8002472:	4b7d      	ldr	r3, [pc, #500]	; (8002668 <main+0xe40>)
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	4b7d      	ldr	r3, [pc, #500]	; (800266c <main+0xe44>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d903      	bls.n	8002486 <main+0xc5e>
					trigger1 = cursor1;
 800247e:	4b7b      	ldr	r3, [pc, #492]	; (800266c <main+0xe44>)
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	4b79      	ldr	r3, [pc, #484]	; (8002668 <main+0xe40>)
 8002484:	801a      	strh	r2, [r3, #0]

				float uV = -((float)(ylim_uV) * ((8.0f * (trigger1 - cursor1)) / 200.0f));
 8002486:	4b73      	ldr	r3, [pc, #460]	; (8002654 <main+0xe2c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002492:	4b75      	ldr	r3, [pc, #468]	; (8002668 <main+0xe40>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4b74      	ldr	r3, [pc, #464]	; (800266c <main+0xe44>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80024aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024ae:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 8002658 <main+0xe30>
 80024b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	eef1 7a67 	vneg.f32	s15, s15
 80024be:	f607 238c 	addw	r3, r7, #2700	; 0xa8c
 80024c2:	edc3 7a00 	vstr	s15, [r3]
				trigger1_value = uV * 4096.0f / 3300000.0f;
 80024c6:	f607 238c 	addw	r3, r7, #2700	; 0xa8c
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800265c <main+0xe34>
 80024d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024d6:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002660 <main+0xe38>
 80024da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e2:	ee17 3a90 	vmov	r3, s15
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b61      	ldr	r3, [pc, #388]	; (8002670 <main+0xe48>)
 80024ea:	801a      	strh	r2, [r3, #0]
			}

		}

		event_trigger = 1;
 80024ec:	4b61      	ldr	r3, [pc, #388]	; (8002674 <main+0xe4c>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
		encoder1_prev = encoder1_curr;
 80024f2:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80024f6:	f8a7 3ab8 	strh.w	r3, [r7, #2744]	; 0xab8
	}

	// Handle UI redraw trigger events
	if (event_trigger) {
 80024fa:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <main+0xe4c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d026      	beq.n	8002550 <main+0xd28>
		clearTrigger(&display, trigger0);
 8002502:	4b51      	ldr	r3, [pc, #324]	; (8002648 <main+0xe20>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	4850      	ldr	r0, [pc, #320]	; (800264c <main+0xe24>)
 800250a:	f000 fe76 	bl	80031fa <clearTrigger>
		clearTrigger(&display, trigger1);
 800250e:	4b56      	ldr	r3, [pc, #344]	; (8002668 <main+0xe40>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	484d      	ldr	r0, [pc, #308]	; (800264c <main+0xe24>)
 8002516:	f000 fe70 	bl	80031fa <clearTrigger>

		if (menu_channel0_enabled)
 800251a:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <main+0xd0a>
			drawTrigger(&display, trigger0, "T1", ILI9341_YELLOW);
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <main+0xe20>)
 8002524:	8819      	ldrh	r1, [r3, #0]
 8002526:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800252a:	4a53      	ldr	r2, [pc, #332]	; (8002678 <main+0xe50>)
 800252c:	4847      	ldr	r0, [pc, #284]	; (800264c <main+0xe24>)
 800252e:	f000 fecd 	bl	80032cc <drawTrigger>

		if (menu_channel1_enabled)
 8002532:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <main+0xd22>
			drawTrigger(&display, trigger1, "T2", ILI9341_CYAN);
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <main+0xe40>)
 800253c:	8819      	ldrh	r1, [r3, #0]
 800253e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002542:	4a4e      	ldr	r2, [pc, #312]	; (800267c <main+0xe54>)
 8002544:	4841      	ldr	r0, [pc, #260]	; (800264c <main+0xe24>)
 8002546:	f000 fec1 	bl	80032cc <drawTrigger>

		event_trigger = 0;
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <main+0xe4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw selector events
	if (event_selector) {
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <main+0xe58>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00f      	beq.n	8002578 <main+0xd50>
		ILI9341_Rectangle(&display, menu_selector_x, menu_selector_y, 38, 13, ILI9341_WHITE);
 8002558:	f8b7 2ac0 	ldrh.w	r2, [r7, #2752]	; 0xac0
 800255c:	f8b7 1ac2 	ldrh.w	r1, [r7, #2754]	; 0xac2
 8002560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	230d      	movs	r3, #13
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2326      	movs	r3, #38	; 0x26
 800256c:	4837      	ldr	r0, [pc, #220]	; (800264c <main+0xe24>)
 800256e:	f7ff f843 	bl	80015f8 <ILI9341_Rectangle>
		event_selector = 0;
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <main+0xe58>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw mode events
	if (event_mode) {
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <main+0xe5c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d040      	beq.n	8002602 <main+0xdda>
		if (mode == 0)
 8002580:	f897 3abf 	ldrb.w	r3, [r7, #2751]	; 0xabf
 8002584:	2b00      	cmp	r3, #0
 8002586:	d110      	bne.n	80025aa <main+0xd82>
			ILI9341_WriteString(&display, 22, 5, " RUN ", Font_7x10, ILI9341_BLACK, ILI9341_GREEN);
 8002588:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800258c:	9303      	str	r3, [sp, #12]
 800258e:	2300      	movs	r3, #0
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <main+0xe60>)
 8002594:	466b      	mov	r3, sp
 8002596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800259a:	e883 0003 	stmia.w	r3, {r0, r1}
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <main+0xe64>)
 80025a0:	2205      	movs	r2, #5
 80025a2:	2116      	movs	r1, #22
 80025a4:	4829      	ldr	r0, [pc, #164]	; (800264c <main+0xe24>)
 80025a6:	f7ff f8e2 	bl	800176e <ILI9341_WriteString>

		if (mode == 1)
 80025aa:	f897 3abf 	ldrb.w	r3, [r7, #2751]	; 0xabf
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d10f      	bne.n	80025d2 <main+0xdaa>
			ILI9341_WriteString(&display, 22, 5, "MENU:", Font_7x10, ILI9341_BLACK, ILI9341_BLUE);
 80025b2:	231f      	movs	r3, #31
 80025b4:	9303      	str	r3, [sp, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	4a33      	ldr	r2, [pc, #204]	; (8002688 <main+0xe60>)
 80025bc:	466b      	mov	r3, sp
 80025be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <main+0xe68>)
 80025c8:	2205      	movs	r2, #5
 80025ca:	2116      	movs	r1, #22
 80025cc:	481f      	ldr	r0, [pc, #124]	; (800264c <main+0xe24>)
 80025ce:	f7ff f8ce 	bl	800176e <ILI9341_WriteString>

		if (mode == 2)
 80025d2:	f897 3abf 	ldrb.w	r3, [r7, #2751]	; 0xabf
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d110      	bne.n	80025fc <main+0xdd4>
			ILI9341_WriteString(&display, 22, 5, "HOLD:", Font_7x10, ILI9341_BLACK, ILI9341_YELLOW);
 80025da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	2300      	movs	r3, #0
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <main+0xe60>)
 80025e6:	466b      	mov	r3, sp
 80025e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <main+0xe6c>)
 80025f2:	2205      	movs	r2, #5
 80025f4:	2116      	movs	r1, #22
 80025f6:	4815      	ldr	r0, [pc, #84]	; (800264c <main+0xe24>)
 80025f8:	f7ff f8b9 	bl	800176e <ILI9341_WriteString>

		event_mode = 0;
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <main+0xe5c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw trigger mode events
	if (event_trigger_mode) {
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <main+0xe70>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80d1 	beq.w	80027ae <main+0xf86>
		ILI9341_FillRectangle(&display, 61,  5, 33, 10, ILI9341_BLACK);
 800260c:	2300      	movs	r3, #0
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	230a      	movs	r3, #10
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2321      	movs	r3, #33	; 0x21
 8002616:	2205      	movs	r2, #5
 8002618:	213d      	movs	r1, #61	; 0x3d
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <main+0xe24>)
 800261c:	f7fe ff8f 	bl	800153e <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 61, 14, 11, 1, ILI9341_WHITE);
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2301      	movs	r3, #1
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	230b      	movs	r3, #11
 800262c:	220e      	movs	r2, #14
 800262e:	213d      	movs	r1, #61	; 0x3d
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <main+0xe24>)
 8002632:	f7fe ff84 	bl	800153e <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 11, 1, ILI9341_WHITE);
 8002636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2301      	movs	r3, #1
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	230b      	movs	r3, #11
 8002642:	2205      	movs	r2, #5
 8002644:	2148      	movs	r1, #72	; 0x48
 8002646:	e029      	b.n	800269c <main+0xe74>
 8002648:	20000028 	.word	0x20000028
 800264c:	2000044c 	.word	0x2000044c
 8002650:	20000024 	.word	0x20000024
 8002654:	20000020 	.word	0x20000020
 8002658:	43480000 	.word	0x43480000
 800265c:	45800000 	.word	0x45800000
 8002660:	4a496a80 	.word	0x4a496a80
 8002664:	2000002c 	.word	0x2000002c
 8002668:	2000002a 	.word	0x2000002a
 800266c:	20000026 	.word	0x20000026
 8002670:	2000002e 	.word	0x2000002e
 8002674:	20000033 	.word	0x20000033
 8002678:	0800ab8c 	.word	0x0800ab8c
 800267c:	0800ab90 	.word	0x0800ab90
 8002680:	20000037 	.word	0x20000037
 8002684:	20000031 	.word	0x20000031
 8002688:	20000000 	.word	0x20000000
 800268c:	0800ab94 	.word	0x0800ab94
 8002690:	0800ab9c 	.word	0x0800ab9c
 8002694:	0800aba4 	.word	0x0800aba4
 8002698:	20000038 	.word	0x20000038
 800269c:	48a4      	ldr	r0, [pc, #656]	; (8002930 <main+0x1108>)
 800269e:	f7fe ff4e 	bl	800153e <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 83, 14, 11, 1, ILI9341_WHITE);
 80026a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2301      	movs	r3, #1
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	230b      	movs	r3, #11
 80026ae:	220e      	movs	r2, #14
 80026b0:	2153      	movs	r1, #83	; 0x53
 80026b2:	489f      	ldr	r0, [pc, #636]	; (8002930 <main+0x1108>)
 80026b4:	f7fe ff43 	bl	800153e <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 72,  5, 1, 10, ILI9341_WHITE);
 80026b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	230a      	movs	r3, #10
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2301      	movs	r3, #1
 80026c4:	2205      	movs	r2, #5
 80026c6:	2148      	movs	r1, #72	; 0x48
 80026c8:	4899      	ldr	r0, [pc, #612]	; (8002930 <main+0x1108>)
 80026ca:	f7fe ff38 	bl	800153e <ILI9341_FillRectangle>
		ILI9341_FillRectangle(&display, 82,  5, 1, 10, ILI9341_WHITE);
 80026ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	230a      	movs	r3, #10
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	2205      	movs	r2, #5
 80026dc:	2152      	movs	r1, #82	; 0x52
 80026de:	4894      	ldr	r0, [pc, #592]	; (8002930 <main+0x1108>)
 80026e0:	f7fe ff2d 	bl	800153e <ILI9341_FillRectangle>

		if (trigger_mode == 0) {
 80026e4:	4b93      	ldr	r3, [pc, #588]	; (8002934 <main+0x110c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d12f      	bne.n	800274c <main+0xf24>
			for (uint8_t i = 0; i < 4; i++) {
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3aa3 	strb.w	r3, [r7, #2723]	; 0xaa3
 80026f2:	e026      	b.n	8002742 <main+0xf1a>
				for (uint8_t j = i; j < (7 - i); j++)
 80026f4:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 80026f8:	f887 3aa2 	strb.w	r3, [r7, #2722]	; 0xaa2
 80026fc:	e014      	b.n	8002728 <main+0xf00>
					ILI9341_DrawPixel(&display, 69 + j, 11 - i, ILI9341_GREEN);
 80026fe:	f897 3aa2 	ldrb.w	r3, [r7, #2722]	; 0xaa2
 8002702:	b29b      	uxth	r3, r3
 8002704:	3345      	adds	r3, #69	; 0x45
 8002706:	b299      	uxth	r1, r3
 8002708:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 800270c:	b29b      	uxth	r3, r3
 800270e:	f1c3 030b 	rsb	r3, r3, #11
 8002712:	b29a      	uxth	r2, r3
 8002714:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002718:	4885      	ldr	r0, [pc, #532]	; (8002930 <main+0x1108>)
 800271a:	f7fe fe05 	bl	8001328 <ILI9341_DrawPixel>
				for (uint8_t j = i; j < (7 - i); j++)
 800271e:	f897 3aa2 	ldrb.w	r3, [r7, #2722]	; 0xaa2
 8002722:	3301      	adds	r3, #1
 8002724:	f887 3aa2 	strb.w	r3, [r7, #2722]	; 0xaa2
 8002728:	f897 2aa2 	ldrb.w	r2, [r7, #2722]	; 0xaa2
 800272c:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 8002730:	f1c3 0307 	rsb	r3, r3, #7
 8002734:	429a      	cmp	r2, r3
 8002736:	dbe2      	blt.n	80026fe <main+0xed6>
			for (uint8_t i = 0; i < 4; i++) {
 8002738:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 800273c:	3301      	adds	r3, #1
 800273e:	f887 3aa3 	strb.w	r3, [r7, #2723]	; 0xaa3
 8002742:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 8002746:	2b03      	cmp	r3, #3
 8002748:	d9d4      	bls.n	80026f4 <main+0xecc>
 800274a:	e02d      	b.n	80027a8 <main+0xf80>
			}
		} else {
			for (uint8_t i = 0; i < 4; i++) {
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3aa1 	strb.w	r3, [r7, #2721]	; 0xaa1
 8002752:	e025      	b.n	80027a0 <main+0xf78>
			  for (uint8_t j = i; j < (7 - i); j++)
 8002754:	f897 3aa1 	ldrb.w	r3, [r7, #2721]	; 0xaa1
 8002758:	f887 3aa0 	strb.w	r3, [r7, #2720]	; 0xaa0
 800275c:	e013      	b.n	8002786 <main+0xf5e>
				  ILI9341_DrawPixel(&display, 79 + j, 8 + i, ILI9341_RED);
 800275e:	f897 3aa0 	ldrb.w	r3, [r7, #2720]	; 0xaa0
 8002762:	b29b      	uxth	r3, r3
 8002764:	334f      	adds	r3, #79	; 0x4f
 8002766:	b299      	uxth	r1, r3
 8002768:	f897 3aa1 	ldrb.w	r3, [r7, #2721]	; 0xaa1
 800276c:	b29b      	uxth	r3, r3
 800276e:	3308      	adds	r3, #8
 8002770:	b29a      	uxth	r2, r3
 8002772:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002776:	486e      	ldr	r0, [pc, #440]	; (8002930 <main+0x1108>)
 8002778:	f7fe fdd6 	bl	8001328 <ILI9341_DrawPixel>
			  for (uint8_t j = i; j < (7 - i); j++)
 800277c:	f897 3aa0 	ldrb.w	r3, [r7, #2720]	; 0xaa0
 8002780:	3301      	adds	r3, #1
 8002782:	f887 3aa0 	strb.w	r3, [r7, #2720]	; 0xaa0
 8002786:	f897 2aa0 	ldrb.w	r2, [r7, #2720]	; 0xaa0
 800278a:	f897 3aa1 	ldrb.w	r3, [r7, #2721]	; 0xaa1
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	429a      	cmp	r2, r3
 8002794:	dbe3      	blt.n	800275e <main+0xf36>
			for (uint8_t i = 0; i < 4; i++) {
 8002796:	f897 3aa1 	ldrb.w	r3, [r7, #2721]	; 0xaa1
 800279a:	3301      	adds	r3, #1
 800279c:	f887 3aa1 	strb.w	r3, [r7, #2721]	; 0xaa1
 80027a0:	f897 3aa1 	ldrb.w	r3, [r7, #2721]	; 0xaa1
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d9d5      	bls.n	8002754 <main+0xf2c>
			}
		}

		event_trigger_mode = 0;
 80027a8:	4b63      	ldr	r3, [pc, #396]	; (8002938 <main+0x1110>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw seconds events
	if (event_seconds) {
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <main+0x1114>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03f      	beq.n	8002836 <main+0x100e>
		if (xlim_us >= 1000000)
 80027b6:	4b62      	ldr	r3, [pc, #392]	; (8002940 <main+0x1118>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a62      	ldr	r2, [pc, #392]	; (8002944 <main+0x111c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d90c      	bls.n	80027da <main+0xfb2>
			snprintf(string, 255, "%3li s",  xlim_us / 1000000);
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <main+0x1118>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a60      	ldr	r2, [pc, #384]	; (8002948 <main+0x1120>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 80027d0:	4a5e      	ldr	r2, [pc, #376]	; (800294c <main+0x1124>)
 80027d2:	21ff      	movs	r1, #255	; 0xff
 80027d4:	f006 f822 	bl	800881c <sniprintf>
 80027d8:	e019      	b.n	800280e <main+0xfe6>
		else if (xlim_us >= 1000)
 80027da:	4b59      	ldr	r3, [pc, #356]	; (8002940 <main+0x1118>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e2:	d30c      	bcc.n	80027fe <main+0xfd6>
			snprintf(string, 255, "%3lims", xlim_us / 1000);
 80027e4:	4b56      	ldr	r3, [pc, #344]	; (8002940 <main+0x1118>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a59      	ldr	r2, [pc, #356]	; (8002950 <main+0x1128>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 80027f4:	4a57      	ldr	r2, [pc, #348]	; (8002954 <main+0x112c>)
 80027f6:	21ff      	movs	r1, #255	; 0xff
 80027f8:	f006 f810 	bl	800881c <sniprintf>
 80027fc:	e007      	b.n	800280e <main+0xfe6>
		else
			snprintf(string, 255, "%3lius", xlim_us);
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <main+0x1118>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 8002806:	4a54      	ldr	r2, [pc, #336]	; (8002958 <main+0x1130>)
 8002808:	21ff      	movs	r1, #255	; 0xff
 800280a:	f006 f807 	bl	800881c <sniprintf>

		ILI9341_WriteString(&display, 22, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 800280e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8002812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002816:	9203      	str	r2, [sp, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	494f      	ldr	r1, [pc, #316]	; (800295c <main+0x1134>)
 800281e:	466a      	mov	r2, sp
 8002820:	c903      	ldmia	r1, {r0, r1}
 8002822:	e882 0003 	stmia.w	r2, {r0, r1}
 8002826:	22e1      	movs	r2, #225	; 0xe1
 8002828:	2116      	movs	r1, #22
 800282a:	4841      	ldr	r0, [pc, #260]	; (8002930 <main+0x1108>)
 800282c:	f7fe ff9f 	bl	800176e <ILI9341_WriteString>

		event_seconds = 0;
 8002830:	4b42      	ldr	r3, [pc, #264]	; (800293c <main+0x1114>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	}

	// Handle UI redraw voltage events
	if (event_voltage) {
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <main+0x1138>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d03f      	beq.n	80028be <main+0x1096>
		if (ylim_uV >= 1000000)
 800283e:	4b49      	ldr	r3, [pc, #292]	; (8002964 <main+0x113c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a40      	ldr	r2, [pc, #256]	; (8002944 <main+0x111c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d90c      	bls.n	8002862 <main+0x103a>
			snprintf(string, 255, "%3li V",  ylim_uV / 1000000);
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <main+0x113c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <main+0x1120>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <main+0x1140>)
 800285a:	21ff      	movs	r1, #255	; 0xff
 800285c:	f005 ffde 	bl	800881c <sniprintf>
 8002860:	e019      	b.n	8002896 <main+0x106e>
		else if (ylim_uV >= 1000)
 8002862:	4b40      	ldr	r3, [pc, #256]	; (8002964 <main+0x113c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286a:	d30c      	bcc.n	8002886 <main+0x105e>
			snprintf(string, 255, "%3limV", ylim_uV / 1000);
 800286c:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <main+0x113c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a37      	ldr	r2, [pc, #220]	; (8002950 <main+0x1128>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 800287c:	4a3b      	ldr	r2, [pc, #236]	; (800296c <main+0x1144>)
 800287e:	21ff      	movs	r1, #255	; 0xff
 8002880:	f005 ffcc 	bl	800881c <sniprintf>
 8002884:	e007      	b.n	8002896 <main+0x106e>
		else
			snprintf(string, 255, "%3liuV", ylim_uV);
 8002886:	4b37      	ldr	r3, [pc, #220]	; (8002964 <main+0x113c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 800288e:	4a38      	ldr	r2, [pc, #224]	; (8002970 <main+0x1148>)
 8002890:	21ff      	movs	r1, #255	; 0xff
 8002892:	f005 ffc3 	bl	800881c <sniprintf>

		ILI9341_WriteString(&display, 60, 225, string, Font_7x10, ILI9341_BLACK, ILI9341_WHITE);
 8002896:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 800289a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289e:	9203      	str	r2, [sp, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	9202      	str	r2, [sp, #8]
 80028a4:	492d      	ldr	r1, [pc, #180]	; (800295c <main+0x1134>)
 80028a6:	466a      	mov	r2, sp
 80028a8:	c903      	ldmia	r1, {r0, r1}
 80028aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80028ae:	22e1      	movs	r2, #225	; 0xe1
 80028b0:	213c      	movs	r1, #60	; 0x3c
 80028b2:	481f      	ldr	r0, [pc, #124]	; (8002930 <main+0x1108>)
 80028b4:	f7fe ff5b 	bl	800176e <ILI9341_WriteString>

		event_voltage = 0;
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <main+0x1138>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
	}

	snprintf(string, 255, "T:%i%i", event_trigger0_detected, event_trigger1_detected);
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <main+0x114c>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <main+0x1150>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f607 108c 	addw	r0, r7, #2444	; 0x98c
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	4a2a      	ldr	r2, [pc, #168]	; (800297c <main+0x1154>)
 80028d2:	21ff      	movs	r1, #255	; 0xff
 80028d4:	f005 ffa2 	bl	800881c <sniprintf>
	ILI9341_WriteString(&display, 195, 5, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80028d8:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 80028dc:	2200      	movs	r2, #0
 80028de:	9203      	str	r2, [sp, #12]
 80028e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e4:	9202      	str	r2, [sp, #8]
 80028e6:	491d      	ldr	r1, [pc, #116]	; (800295c <main+0x1134>)
 80028e8:	466a      	mov	r2, sp
 80028ea:	c903      	ldmia	r1, {r0, r1}
 80028ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80028f0:	2205      	movs	r2, #5
 80028f2:	21c3      	movs	r1, #195	; 0xc3
 80028f4:	480e      	ldr	r0, [pc, #56]	; (8002930 <main+0x1108>)
 80028f6:	f7fe ff3a 	bl	800176e <ILI9341_WriteString>

	if (menu_channel1_enabled && menu_selected_item == 3) {
 80028fa:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <main+0x1164>
 8002902:	f997 3ac4 	ldrsb.w	r3, [r7, #2756]	; 0xac4
 8002906:	2b03      	cmp	r3, #3
 8002908:	d140      	bne.n	800298c <main+0x1164>
		//if (adc_period1_detected)
			drawSignalParam(&display, string, 255, adc_max[1], adc_min[1], adc_period[1]);
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <main+0x1158>)
 800290c:	885b      	ldrh	r3, [r3, #2]
 800290e:	b298      	uxth	r0, r3
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <main+0x115c>)
 8002912:	885b      	ldrh	r3, [r3, #2]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <main+0x1160>)
 8002918:	6852      	ldr	r2, [r2, #4]
 800291a:	f607 118c 	addw	r1, r7, #2444	; 0x98c
 800291e:	9201      	str	r2, [sp, #4]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4603      	mov	r3, r0
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	4802      	ldr	r0, [pc, #8]	; (8002930 <main+0x1108>)
 8002928:	f001 f8de 	bl	8003ae8 <drawSignalParam>
 800292c:	e043      	b.n	80029b6 <main+0x118e>
 800292e:	bf00      	nop
 8002930:	2000044c 	.word	0x2000044c
 8002934:	20001c8c 	.word	0x20001c8c
 8002938:	20000038 	.word	0x20000038
 800293c:	20000035 	.word	0x20000035
 8002940:	2000001c 	.word	0x2000001c
 8002944:	000f423f 	.word	0x000f423f
 8002948:	431bde83 	.word	0x431bde83
 800294c:	0800abac 	.word	0x0800abac
 8002950:	10624dd3 	.word	0x10624dd3
 8002954:	0800abb4 	.word	0x0800abb4
 8002958:	0800abbc 	.word	0x0800abbc
 800295c:	20000000 	.word	0x20000000
 8002960:	20000036 	.word	0x20000036
 8002964:	20000020 	.word	0x20000020
 8002968:	0800abc4 	.word	0x0800abc4
 800296c:	0800abcc 	.word	0x0800abcc
 8002970:	0800abd4 	.word	0x0800abd4
 8002974:	20000039 	.word	0x20000039
 8002978:	2000003a 	.word	0x2000003a
 800297c:	0800abdc 	.word	0x0800abdc
 8002980:	2000047c 	.word	0x2000047c
 8002984:	20000014 	.word	0x20000014
 8002988:	20000480 	.word	0x20000480
	} else if (menu_channel0_enabled) {
 800298c:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <main+0x118e>
		//if (adc_period0_detected)
			drawSignalParam(&display, string, 255, adc_max[0], adc_min[0], adc_period[0]);
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <main+0x1244>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b298      	uxth	r0, r3
 800299a:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <main+0x1248>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <main+0x124c>)
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	f607 118c 	addw	r1, r7, #2444	; 0x98c
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4603      	mov	r3, r0
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	4831      	ldr	r0, [pc, #196]	; (8002a78 <main+0x1250>)
 80029b2:	f001 f899 	bl	8003ae8 <drawSignalParam>
	}

	// Restart ADC ...
	if (local_event_adc) {
 80029b6:	f897 3aad 	ldrb.w	r3, [r7, #2733]	; 0xaad
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d04e      	beq.n	8002a5c <main+0x1234>
		adc_reset_cyccnt = 1;
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <main+0x1254>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
		adc0_length = 0;
 80029c4:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <main+0x1258>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
		adc1_length = 0;
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <main+0x125c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
		adc_max[0] = 0;
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <main+0x1244>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	801a      	strh	r2, [r3, #0]
		adc_max[1] = 0;
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <main+0x1244>)
 80029d8:	2200      	movs	r2, #0
 80029da:	805a      	strh	r2, [r3, #2]
		adc_min[0] = -1;
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <main+0x1248>)
 80029de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e2:	801a      	strh	r2, [r3, #0]
		adc_min[1] = -1;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <main+0x1248>)
 80029e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ea:	805a      	strh	r2, [r3, #2]
		adc_period[0] = 0;
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <main+0x124c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
		adc_period[1] = 0;
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <main+0x124c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
		adc_period0_detected = 0;
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <main+0x1260>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		adc_period1_detected = 0;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <main+0x1264>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
		event_trigger0_detected = 0;
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <main+0x1268>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
		event_trigger1_detected = 0;
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <main+0x126c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]

		if (menu_channel0_enabled)
 8002a10:	f897 3ac6 	ldrb.w	r3, [r7, #2758]	; 0xac6
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <main+0x11f8>
			adc0_filled = 0;
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <main+0x1270>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e002      	b.n	8002a26 <main+0x11fe>
		else
			adc0_filled = 1;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <main+0x1270>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]

		if (menu_channel1_enabled)
 8002a26:	f897 3ac5 	ldrb.w	r3, [r7, #2757]	; 0xac5
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <main+0x120e>
			adc1_filled = 0;
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <main+0x1274>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e002      	b.n	8002a3c <main+0x1214>
		else
			adc1_filled = 1;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <main+0x1274>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

		if (adc_immediate) {
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <main+0x1278>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <main+0x1228>
			// The ADC starts immediately after the previous measurement is handled
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8002a44:	2202      	movs	r2, #2
 8002a46:	4917      	ldr	r1, [pc, #92]	; (8002aa4 <main+0x127c>)
 8002a48:	4817      	ldr	r0, [pc, #92]	; (8002aa8 <main+0x1280>)
 8002a4a:	f002 f815 	bl	8004a78 <HAL_ADC_Start_DMA>
 8002a4e:	e002      	b.n	8002a56 <main+0x122e>
		} else {
			// ADC starts by timer
			HAL_TIM_Base_Start_IT(&htim10);
 8002a50:	4816      	ldr	r0, [pc, #88]	; (8002aac <main+0x1284>)
 8002a52:	f004 f9ff 	bl	8006e54 <HAL_TIM_Base_Start_IT>
		}

		local_event_adc = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3aad 	strb.w	r3, [r7, #2733]	; 0xaad
	}

	frames++;
 8002a5c:	f897 3ab7 	ldrb.w	r3, [r7, #2743]	; 0xab7
 8002a60:	3301      	adds	r3, #1
 8002a62:	f887 3ab7 	strb.w	r3, [r7, #2743]	; 0xab7
  {
 8002a66:	f7ff b852 	b.w	8001b0e <main+0x2e6>
 8002a6a:	bf00      	nop
 8002a6c:	2000047c 	.word	0x2000047c
 8002a70:	20000014 	.word	0x20000014
 8002a74:	20000480 	.word	0x20000480
 8002a78:	2000044c 	.word	0x2000044c
 8002a7c:	20000012 	.word	0x20000012
 8002a80:	20000470 	.word	0x20000470
 8002a84:	20000474 	.word	0x20000474
 8002a88:	20000488 	.word	0x20000488
 8002a8c:	20000489 	.word	0x20000489
 8002a90:	20000039 	.word	0x20000039
 8002a94:	2000003a 	.word	0x2000003a
 8002a98:	20000478 	.word	0x20000478
 8002a9c:	20000010 	.word	0x20000010
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	20000468 	.word	0x20000468
 8002aa8:	2000022c 	.word	0x2000022c
 8002aac:	20000404 	.word	0x20000404

08002ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b094      	sub	sp, #80	; 0x50
 8002ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ab6:	f107 0320 	add.w	r3, r7, #32
 8002aba:	2230      	movs	r2, #48	; 0x30
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 ff23 	bl	800890a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <SystemClock_Config+0xc8>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <SystemClock_Config+0xc8>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <SystemClock_Config+0xc8>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <SystemClock_Config+0xcc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <SystemClock_Config+0xcc>)
 8002afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <SystemClock_Config+0xcc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b16:	2302      	movs	r3, #2
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b20:	2319      	movs	r3, #25
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002b24:	23c0      	movs	r3, #192	; 0xc0
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fa55 	bl	8005fe4 <HAL_RCC_OscConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b40:	f001 f8fa 	bl	8003d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b44:	230f      	movs	r3, #15
 8002b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fcb7 	bl	80064d4 <HAL_RCC_ClockConfig>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b6c:	f001 f8e4 	bl	8003d38 <Error_Handler>
  }
}
 8002b70:	bf00      	nop
 8002b72:	3750      	adds	r7, #80	; 0x50
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40007000 	.word	0x40007000

08002b80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b86:	463b      	mov	r3, r7
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002b94:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <MX_ADC1_Init+0xd4>)
 8002b96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002b9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bb2:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bc2:	4a25      	ldr	r2, [pc, #148]	; (8002c58 <MX_ADC1_Init+0xd8>)
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bce:	2203      	movs	r2, #3
 8002bd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002be0:	481b      	ldr	r0, [pc, #108]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002be2:	f001 ff05 	bl	80049f0 <HAL_ADC_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002bec:	f001 f8a4 	bl	8003d38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4813      	ldr	r0, [pc, #76]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002c02:	f002 f897 	bl	8004d34 <HAL_ADC_ConfigChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c0c:	f001 f894 	bl	8003d38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002c10:	2309      	movs	r3, #9
 8002c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002c14:	2302      	movs	r3, #2
 8002c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c18:	463b      	mov	r3, r7
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002c1e:	f002 f889 	bl	8004d34 <HAL_ADC_ConfigChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002c28:	f001 f886 	bl	8003d38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002c30:	2303      	movs	r3, #3
 8002c32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c34:	463b      	mov	r3, r7
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_ADC1_Init+0xd0>)
 8002c3a:	f002 f87b 	bl	8004d34 <HAL_ADC_ConfigChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002c44:	f001 f878 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000022c 	.word	0x2000022c
 8002c54:	40012000 	.word	0x40012000
 8002c58:	0f000001 	.word	0x0f000001

08002c5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <MX_SPI1_Init+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002ca8:	220a      	movs	r2, #10
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_SPI1_Init+0x64>)
 8002cae:	f003 fdf1 	bl	8006894 <HAL_SPI_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cb8:	f001 f83e 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200002d4 	.word	0x200002d4
 8002cc4:	40013000 	.word	0x40013000

08002cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b092      	sub	sp, #72	; 0x48
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	2220      	movs	r2, #32
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 fe09 	bl	800890a <memset>
  //   htim1.Init.Prescaler = 95;
  //   htim1.Init.Period = 99;
  //   sConfigOC.Pulse = 50;

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cf8:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002cfa:	4a36      	ldr	r2, [pc, #216]	; (8002dd4 <MX_TIM1_Init+0x10c>)
 8002cfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d00:	225f      	movs	r2, #95	; 0x5f
 8002d02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d24:	482a      	ldr	r0, [pc, #168]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d26:	f004 f926 	bl	8006f76 <HAL_TIM_PWM_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002d30:	f001 f802 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d40:	4619      	mov	r1, r3
 8002d42:	4823      	ldr	r0, [pc, #140]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d44:	f004 ff6e 	bl	8007c24 <HAL_TIMEx_MasterConfigSynchronization>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002d4e:	f000 fff3 	bl	8003d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d52:	2360      	movs	r3, #96	; 0x60
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8002d56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d60:	2300      	movs	r3, #0
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002d7a:	f004 fc37 	bl	80075ec <HAL_TIM_PWM_ConfigChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002d84:	f000 ffd8 	bl	8003d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4809      	ldr	r0, [pc, #36]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002dac:	f004 ffa8 	bl	8007d00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002db6:	f000 ffbf 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002dbe:	f004 f929 	bl	8007014 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002dc2:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <MX_TIM1_Init+0x108>)
 8002dc4:	f001 f9a6 	bl	8004114 <HAL_TIM_MspPostInit>

}
 8002dc8:	bf00      	nop
 8002dca:	3748      	adds	r7, #72	; 0x48
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	2000032c 	.word	0x2000032c
 8002dd4:	40010000 	.word	0x40010000

08002dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fd8f 	bl	800890a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002df4:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <MX_TIM3_Init+0xac>)
 8002df8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e22:	2301      	movs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e32:	2301      	movs	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	4619      	mov	r1, r3
 8002e44:	480e      	ldr	r0, [pc, #56]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e46:	f004 f995 	bl	8007174 <HAL_TIM_Encoder_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e50:	f000 ff72 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4807      	ldr	r0, [pc, #28]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e62:	f004 fedf 	bl	8007c24 <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e6c:	f000 ff64 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002e70:	213c      	movs	r1, #60	; 0x3c
 8002e72:	4803      	ldr	r0, [pc, #12]	; (8002e80 <MX_TIM3_Init+0xa8>)
 8002e74:	f004 fa24 	bl	80072c0 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000374 	.word	0x20000374
 8002e84:	40000400 	.word	0x40000400

08002e88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f005 fd37 	bl	800890a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002ea6:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <MX_TIM4_Init+0xac>)
 8002ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002ef6:	f004 f93d 	bl	8007174 <HAL_TIM_Encoder_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f00:	f000 ff1a 	bl	8003d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4807      	ldr	r0, [pc, #28]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002f12:	f004 fe87 	bl	8007c24 <HAL_TIMEx_MasterConfigSynchronization>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002f1c:	f000 ff0c 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002f20:	213c      	movs	r1, #60	; 0x3c
 8002f22:	4803      	ldr	r0, [pc, #12]	; (8002f30 <MX_TIM4_Init+0xa8>)
 8002f24:	f004 f9cc 	bl	80072c0 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	3730      	adds	r7, #48	; 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200003bc 	.word	0x200003bc
 8002f34:	40000800 	.word	0x40000800

08002f38 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <MX_TIM10_Init+0x40>)
 8002f40:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 40;
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f44:	2228      	movs	r2, #40	; 0x28
 8002f46:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f50:	2264      	movs	r2, #100	; 0x64
 8002f52:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <MX_TIM10_Init+0x3c>)
 8002f62:	f003 ff27 	bl	8006db4 <HAL_TIM_Base_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002f6c:	f000 fee4 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000404 	.word	0x20000404
 8002f78:	40014400 	.word	0x40014400

08002f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_DMA_Init+0x3c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <MX_DMA_Init+0x3c>)
 8002f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_DMA_Init+0x3c>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2038      	movs	r0, #56	; 0x38
 8002fa4:	f002 fa51 	bl	800544a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fa8:	2038      	movs	r0, #56	; 0x38
 8002faa:	f002 fa6a 	bl	8005482 <HAL_NVIC_EnableIRQ>

}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800

08002fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a3b      	ldr	r2, [pc, #236]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a34      	ldr	r2, [pc, #208]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <MX_GPIO_Init+0x10c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <MX_GPIO_Init+0x10c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <MX_GPIO_Init+0x10c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ILI9341_RESET_Pin|ILI9341_DC_Pin|ILI9341_CS_Pin, GPIO_PIN_RESET);
 8003042:	2200      	movs	r2, #0
 8003044:	211c      	movs	r1, #28
 8003046:	4821      	ldr	r0, [pc, #132]	; (80030cc <MX_GPIO_Init+0x110>)
 8003048:	f002 ff9a 	bl	8005f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ILI9341_RESET_Pin ILI9341_DC_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_RESET_Pin|ILI9341_DC_Pin|ILI9341_CS_Pin;
 800304c:	231c      	movs	r3, #28
 800304e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003050:	2301      	movs	r3, #1
 8003052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4619      	mov	r1, r3
 8003062:	481a      	ldr	r0, [pc, #104]	; (80030cc <MX_GPIO_Init+0x110>)
 8003064:	f002 fe08 	bl	8005c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 8003068:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800306c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800306e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	4619      	mov	r1, r3
 800307e:	4813      	ldr	r0, [pc, #76]	; (80030cc <MX_GPIO_Init+0x110>)
 8003080:	f002 fdfa 	bl	8005c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 8003084:	2308      	movs	r3, #8
 8003086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003088:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800308c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800308e:	2301      	movs	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <MX_GPIO_Init+0x114>)
 800309a:	f002 fded 	bl	8005c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	2009      	movs	r0, #9
 80030a4:	f002 f9d1 	bl	800544a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80030a8:	2009      	movs	r0, #9
 80030aa:	f002 f9ea 	bl	8005482 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2028      	movs	r0, #40	; 0x28
 80030b4:	f002 f9c9 	bl	800544a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030b8:	2028      	movs	r0, #40	; 0x28
 80030ba:	f002 f9e2 	bl	8005482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020400 	.word	0x40020400

080030d4 <drawAxis>:

/* USER CODE BEGIN 4 */

static void drawAxis(ILI9341TypeDef *display)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 9; i++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	82fb      	strh	r3, [r7, #22]
 80030e0:	e034      	b.n	800314c <drawAxis+0x78>
		uint16_t y = 20 + 25 * i;
 80030e2:	8afb      	ldrh	r3, [r7, #22]
 80030e4:	461a      	mov	r2, r3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	461a      	mov	r2, r3
 80030ec:	0091      	lsls	r1, r2, #2
 80030ee:	461a      	mov	r2, r3
 80030f0:	460b      	mov	r3, r1
 80030f2:	4413      	add	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3314      	adds	r3, #20
 80030f8:	81bb      	strh	r3, [r7, #12]

		if (i == 0 || i == 8) {
 80030fa:	8afb      	ldrh	r3, [r7, #22]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <drawAxis+0x32>
 8003100:	8afb      	ldrh	r3, [r7, #22]
 8003102:	2b08      	cmp	r3, #8
 8003104:	d10c      	bne.n	8003120 <drawAxis+0x4c>
			ILI9341_FillRectangle(display, 20, y, 276, 1, ILI9341_WHITE);
 8003106:	89ba      	ldrh	r2, [r7, #12]
 8003108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2301      	movs	r3, #1
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f44f 738a 	mov.w	r3, #276	; 0x114
 8003116:	2114      	movs	r1, #20
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fe fa10 	bl	800153e <ILI9341_FillRectangle>
			continue;
 800311e:	e012      	b.n	8003146 <drawAxis+0x72>
		}

		for (uint16_t j = 0; j < 276; j += 2)
 8003120:	2300      	movs	r3, #0
 8003122:	82bb      	strh	r3, [r7, #20]
 8003124:	e00b      	b.n	800313e <drawAxis+0x6a>
			ILI9341_DrawPixel(display, 20 + j, y, ILI9341_GRAY);
 8003126:	8abb      	ldrh	r3, [r7, #20]
 8003128:	3314      	adds	r3, #20
 800312a:	b299      	uxth	r1, r3
 800312c:	89ba      	ldrh	r2, [r7, #12]
 800312e:	f245 238a 	movw	r3, #21130	; 0x528a
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe f8f8 	bl	8001328 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 276; j += 2)
 8003138:	8abb      	ldrh	r3, [r7, #20]
 800313a:	3302      	adds	r3, #2
 800313c:	82bb      	strh	r3, [r7, #20]
 800313e:	8abb      	ldrh	r3, [r7, #20]
 8003140:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8003144:	d3ef      	bcc.n	8003126 <drawAxis+0x52>
	for (uint16_t i = 0; i < 9; i++) {
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	3301      	adds	r3, #1
 800314a:	82fb      	strh	r3, [r7, #22]
 800314c:	8afb      	ldrh	r3, [r7, #22]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d9c7      	bls.n	80030e2 <drawAxis+0xe>
	}

	for (uint16_t i = 0; i < 12; i++) {
 8003152:	2300      	movs	r3, #0
 8003154:	827b      	strh	r3, [r7, #18]
 8003156:	e032      	b.n	80031be <drawAxis+0xea>
		uint16_t x = 20 + 25 * i;
 8003158:	8a7b      	ldrh	r3, [r7, #18]
 800315a:	461a      	mov	r2, r3
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	4413      	add	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	0091      	lsls	r1, r2, #2
 8003164:	461a      	mov	r2, r3
 8003166:	460b      	mov	r3, r1
 8003168:	4413      	add	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	3314      	adds	r3, #20
 800316e:	81fb      	strh	r3, [r7, #14]

		if (i == 0 || i == 11) {
 8003170:	8a7b      	ldrh	r3, [r7, #18]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <drawAxis+0xa8>
 8003176:	8a7b      	ldrh	r3, [r7, #18]
 8003178:	2b0b      	cmp	r3, #11
 800317a:	d10b      	bne.n	8003194 <drawAxis+0xc0>
			ILI9341_FillRectangle(display, x, 20, 1, 200, ILI9341_WHITE);
 800317c:	89f9      	ldrh	r1, [r7, #14]
 800317e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	23c8      	movs	r3, #200	; 0xc8
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2301      	movs	r3, #1
 800318a:	2214      	movs	r2, #20
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7fe f9d6 	bl	800153e <ILI9341_FillRectangle>
			continue;
 8003192:	e011      	b.n	80031b8 <drawAxis+0xe4>
		}

		for (uint16_t j = 0; j < 200; j += 2)
 8003194:	2300      	movs	r3, #0
 8003196:	823b      	strh	r3, [r7, #16]
 8003198:	e00b      	b.n	80031b2 <drawAxis+0xde>
			ILI9341_DrawPixel(display, x, 20 + j, ILI9341_GRAY);
 800319a:	8a3b      	ldrh	r3, [r7, #16]
 800319c:	3314      	adds	r3, #20
 800319e:	b29a      	uxth	r2, r3
 80031a0:	89f9      	ldrh	r1, [r7, #14]
 80031a2:	f245 238a 	movw	r3, #21130	; 0x528a
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe f8be 	bl	8001328 <ILI9341_DrawPixel>
		for (uint16_t j = 0; j < 200; j += 2)
 80031ac:	8a3b      	ldrh	r3, [r7, #16]
 80031ae:	3302      	adds	r3, #2
 80031b0:	823b      	strh	r3, [r7, #16]
 80031b2:	8a3b      	ldrh	r3, [r7, #16]
 80031b4:	2bc7      	cmp	r3, #199	; 0xc7
 80031b6:	d9f0      	bls.n	800319a <drawAxis+0xc6>
	for (uint16_t i = 0; i < 12; i++) {
 80031b8:	8a7b      	ldrh	r3, [r7, #18]
 80031ba:	3301      	adds	r3, #1
 80031bc:	827b      	strh	r3, [r7, #18]
 80031be:	8a7b      	ldrh	r3, [r7, #18]
 80031c0:	2b0b      	cmp	r3, #11
 80031c2:	d9c9      	bls.n	8003158 <drawAxis+0x84>
	}
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <clearCursor>:

static void clearCursor(ILI9341TypeDef *display, uint16_t pos)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af02      	add	r7, sp, #8
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 0, pos - 6, 20, 11, ILI9341_BLACK);
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	3b06      	subs	r3, #6
 80031de:	b29a      	uxth	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	230b      	movs	r3, #11
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2314      	movs	r3, #20
 80031ea:	2100      	movs	r1, #0
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe f9a6 	bl	800153e <ILI9341_FillRectangle>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <clearTrigger>:

static void clearTrigger(ILI9341TypeDef *display, uint16_t pos)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af02      	add	r7, sp, #8
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	807b      	strh	r3, [r7, #2]
	ILI9341_FillRectangle(display, 296, pos - 6, 20, 11, ILI9341_BLACK);
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	3b06      	subs	r3, #6
 800320a:	b29a      	uxth	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	230b      	movs	r3, #11
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2314      	movs	r3, #20
 8003216:	f44f 7194 	mov.w	r1, #296	; 0x128
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe f98f 	bl	800153e <ILI9341_FillRectangle>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <drawCursor>:

static void drawCursor(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af04      	add	r7, sp, #16
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
 8003238:	4613      	mov	r3, r2
 800323a:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 0, pos - 6, 7 * 2, 1, color);
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	3b06      	subs	r3, #6
 8003240:	b29a      	uxth	r2, r3
 8003242:	893b      	ldrh	r3, [r7, #8]
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2301      	movs	r3, #1
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	230e      	movs	r3, #14
 800324c:	2100      	movs	r1, #0
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7fe f975 	bl	800153e <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 0, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	3b05      	subs	r3, #5
 8003258:	b29a      	uxth	r2, r3
 800325a:	893b      	ldrh	r3, [r7, #8]
 800325c:	9303      	str	r3, [sp, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	9302      	str	r3, [sp, #8]
 8003262:	4919      	ldr	r1, [pc, #100]	; (80032c8 <drawCursor+0xa0>)
 8003264:	466b      	mov	r3, sp
 8003266:	c903      	ldmia	r1, {r0, r1}
 8003268:	e883 0003 	stmia.w	r3, {r0, r1}
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2100      	movs	r1, #0
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7fe fa7c 	bl	800176e <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
 800327a:	e01d      	b.n	80032b8 <drawCursor+0x90>
		for (uint8_t j = i; j < 11 - i; j++)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	75bb      	strb	r3, [r7, #22]
 8003280:	e011      	b.n	80032a6 <drawCursor+0x7e>
			ILI9341_DrawPixel(display, 14 + i, pos - 6 + j, color);
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	b29b      	uxth	r3, r3
 8003286:	330e      	adds	r3, #14
 8003288:	b299      	uxth	r1, r3
 800328a:	7dbb      	ldrb	r3, [r7, #22]
 800328c:	b29a      	uxth	r2, r3
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	4413      	add	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b06      	subs	r3, #6
 8003296:	b29a      	uxth	r2, r3
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7fe f844 	bl	8001328 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 80032a0:	7dbb      	ldrb	r3, [r7, #22]
 80032a2:	3301      	adds	r3, #1
 80032a4:	75bb      	strb	r3, [r7, #22]
 80032a6:	7dba      	ldrb	r2, [r7, #22]
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	f1c3 030b 	rsb	r3, r3, #11
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dbe7      	blt.n	8003282 <drawCursor+0x5a>
	for (uint8_t i = 0; i < 6; i++) {
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	3301      	adds	r3, #1
 80032b6:	75fb      	strb	r3, [r7, #23]
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d9de      	bls.n	800327c <drawCursor+0x54>
	}
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000000 	.word	0x20000000

080032cc <drawTrigger>:

static void drawTrigger(ILI9341TypeDef *display, uint16_t pos, char *name, uint16_t color)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	460b      	mov	r3, r1
 80032da:	817b      	strh	r3, [r7, #10]
 80032dc:	4613      	mov	r3, r2
 80032de:	813b      	strh	r3, [r7, #8]
	ILI9341_FillRectangle(display, 302, pos - 6, 7 * 2, 1, color);
 80032e0:	897b      	ldrh	r3, [r7, #10]
 80032e2:	3b06      	subs	r3, #6
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	893b      	ldrh	r3, [r7, #8]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	2301      	movs	r3, #1
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	230e      	movs	r3, #14
 80032f0:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7fe f922 	bl	800153e <ILI9341_FillRectangle>
	ILI9341_WriteString(display, 302, pos - 5, name, Font_7x10, ILI9341_BLACK, color);
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	3b05      	subs	r3, #5
 80032fe:	b29a      	uxth	r2, r3
 8003300:	893b      	ldrh	r3, [r7, #8]
 8003302:	9303      	str	r3, [sp, #12]
 8003304:	2300      	movs	r3, #0
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	491a      	ldr	r1, [pc, #104]	; (8003374 <drawTrigger+0xa8>)
 800330a:	466b      	mov	r3, sp
 800330c:	c903      	ldmia	r1, {r0, r1}
 800330e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7fe fa28 	bl	800176e <ILI9341_WriteString>

	for (uint8_t i = 0; i < 6; i++) {
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]
 8003322:	e01f      	b.n	8003364 <drawTrigger+0x98>
		for (uint8_t j = i; j < 11 - i; j++)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	75bb      	strb	r3, [r7, #22]
 8003328:	e013      	b.n	8003352 <drawTrigger+0x86>
			ILI9341_DrawPixel(display, 301 - i, pos - 6 + j, color);
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8003332:	3301      	adds	r3, #1
 8003334:	b299      	uxth	r1, r3
 8003336:	7dbb      	ldrb	r3, [r7, #22]
 8003338:	b29a      	uxth	r2, r3
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	4413      	add	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b06      	subs	r3, #6
 8003342:	b29a      	uxth	r2, r3
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7fd ffee 	bl	8001328 <ILI9341_DrawPixel>
		for (uint8_t j = i; j < 11 - i; j++)
 800334c:	7dbb      	ldrb	r3, [r7, #22]
 800334e:	3301      	adds	r3, #1
 8003350:	75bb      	strb	r3, [r7, #22]
 8003352:	7dba      	ldrb	r2, [r7, #22]
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	f1c3 030b 	rsb	r3, r3, #11
 800335a:	429a      	cmp	r2, r3
 800335c:	dbe5      	blt.n	800332a <drawTrigger+0x5e>
	for (uint8_t i = 0; i < 6; i++) {
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	3301      	adds	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d9dc      	bls.n	8003324 <drawTrigger+0x58>
	}
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000000 	.word	0x20000000

08003378 <drawSignal>:

static void drawSignal(ILI9341TypeDef *display, uint32_t *adc_time, uint16_t *adc0, uint32_t adc_length, uint16_t pixel_dirty[280][2], uint16_t cursor, uint16_t color)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	f2ad 6dd4 	subw	sp, sp, #1748	; 0x6d4
 800337e:	af00      	add	r7, sp, #0
 8003380:	f507 64da 	add.w	r4, r7, #1744	; 0x6d0
 8003384:	f2a4 64c4 	subw	r4, r4, #1732	; 0x6c4
 8003388:	6020      	str	r0, [r4, #0]
 800338a:	f507 60da 	add.w	r0, r7, #1744	; 0x6d0
 800338e:	f5a0 60d9 	sub.w	r0, r0, #1736	; 0x6c8
 8003392:	6001      	str	r1, [r0, #0]
 8003394:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8003398:	f2a1 61cc 	subw	r1, r1, #1740	; 0x6cc
 800339c:	600a      	str	r2, [r1, #0]
 800339e:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80033a2:	f5a2 62da 	sub.w	r2, r2, #1744	; 0x6d0
 80033a6:	6013      	str	r3, [r2, #0]
	uint16_t point[280];
	for (uint16_t i = 0; i < 280; i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8a7 36ce 	strh.w	r3, [r7, #1742]	; 0x6ce
 80033ae:	e00d      	b.n	80033cc <drawSignal+0x54>
		point[i] = 0;
 80033b0:	f8b7 26ce 	ldrh.w	r2, [r7, #1742]	; 0x6ce
 80033b4:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80033b8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033bc:	2100      	movs	r1, #0
 80033be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 280; i++)
 80033c2:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	; 0x6ce
 80033c6:	3301      	adds	r3, #1
 80033c8:	f8a7 36ce 	strh.w	r3, [r7, #1742]	; 0x6ce
 80033cc:	f8b7 36ce 	ldrh.w	r3, [r7, #1742]	; 0x6ce
 80033d0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80033d4:	d3ec      	bcc.n	80033b0 <drawSignal+0x38>

	for (uint16_t i = 0; i < adc_length; i++) {
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8a7 36cc 	strh.w	r3, [r7, #1740]	; 0x6cc
 80033dc:	e0a5      	b.n	800352a <drawSignal+0x1b2>

		float uV = (float)(adc0[i]) * 3300000.0f / 4096.0f;
 80033de:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	; 0x6cc
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80033e8:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003680 <drawSignal+0x308>
 80033fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003402:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003684 <drawSignal+0x30c>
 8003406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800340a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800340e:	edc3 7a00 	vstr	s15, [r3]
		uint16_t x = (float)(adc_time[i]) * 280.0f / (float)(12.0f * xlim_us);
 8003412:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	; 0x6cc
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800341c:	f5a2 62d9 	sub.w	r2, r2, #1736	; 0x6c8
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4413      	add	r3, r2
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8003688 <drawSignal+0x310>
 8003432:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003436:	4b95      	ldr	r3, [pc, #596]	; (800368c <drawSignal+0x314>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003446:	ee27 7a87 	vmul.f32	s14, s15, s14
 800344a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003452:	ee17 3a90 	vmov	r3, s15
 8003456:	f8a7 36ca 	strh.w	r3, [r7, #1738]	; 0x6ca
		uint16_t y = cursor - ((uV / (float)(ylim_uV)) * 200.0f / 8.0f);
 800345a:	f8b7 36e4 	ldrh.w	r3, [r7, #1764]	; 0x6e4
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003466:	4b8a      	ldr	r3, [pc, #552]	; (8003690 <drawSignal+0x318>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003472:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003476:	ed93 6a00 	vldr	s12, [r3]
 800347a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800347e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003694 <drawSignal+0x31c>
 8003482:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003486:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800348a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800348e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003496:	ee17 3a90 	vmov	r3, s15
 800349a:	f8a7 36c8 	strh.w	r3, [r7, #1736]	; 0x6c8

		if (x < 0)
			x = 0;

		if (x > 274)
 800349e:	f8b7 36ca 	ldrh.w	r3, [r7, #1738]	; 0x6ca
 80034a2:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80034a6:	d903      	bls.n	80034b0 <drawSignal+0x138>
			x = 274;
 80034a8:	f44f 7389 	mov.w	r3, #274	; 0x112
 80034ac:	f8a7 36ca 	strh.w	r3, [r7, #1738]	; 0x6ca

		if (y < 21)
 80034b0:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	; 0x6c8
 80034b4:	2b14      	cmp	r3, #20
 80034b6:	d802      	bhi.n	80034be <drawSignal+0x146>
			y = 21;
 80034b8:	2315      	movs	r3, #21
 80034ba:	f8a7 36c8 	strh.w	r3, [r7, #1736]	; 0x6c8

		if (y > 219)
 80034be:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	; 0x6c8
 80034c2:	2bdb      	cmp	r3, #219	; 0xdb
 80034c4:	d902      	bls.n	80034cc <drawSignal+0x154>
			y = 219;
 80034c6:	23db      	movs	r3, #219	; 0xdb
 80034c8:	f8a7 36c8 	strh.w	r3, [r7, #1736]	; 0x6c8

		point[x] += (float)(y - point[x]) * 1.0f;
 80034cc:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	; 0x6ca
 80034d0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80034d4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e4:	f8b7 36c8 	ldrh.w	r3, [r7, #1736]	; 0x6c8
 80034e8:	f8b7 16ca 	ldrh.w	r1, [r7, #1738]	; 0x6ca
 80034ec:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80034f0:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80034f4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003506:	f8b7 26ca 	ldrh.w	r2, [r7, #1738]	; 0x6ca
 800350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350e:	ee17 3a90 	vmov	r3, s15
 8003512:	b299      	uxth	r1, r3
 8003514:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8003518:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800351c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < adc_length; i++) {
 8003520:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	; 0x6cc
 8003524:	3301      	adds	r3, #1
 8003526:	f8a7 36cc 	strh.w	r3, [r7, #1740]	; 0x6cc
 800352a:	f8b7 36cc 	ldrh.w	r3, [r7, #1740]	; 0x6cc
 800352e:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8003532:	f5a2 62da 	sub.w	r2, r2, #1744	; 0x6d0
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	f63f af50 	bhi.w	80033de <drawSignal+0x66>
	}

	uint16_t pixel[280][2];
	for (uint16_t i = 0; i < 280; i++) {
 800353e:	2300      	movs	r3, #0
 8003540:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
 8003544:	e017      	b.n	8003576 <drawSignal+0x1fe>
		pixel[i][0] = 220;
 8003546:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	; 0x6c6
 800354a:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800354e:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 8003552:	21dc      	movs	r1, #220	; 0xdc
 8003554:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		pixel[i][1] = 20;
 8003558:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 800355c:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8003560:	f5a2 62d8 	sub.w	r2, r2, #1728	; 0x6c0
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	2214      	movs	r2, #20
 800356a:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 0; i < 280; i++) {
 800356c:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 8003570:	3301      	adds	r3, #1
 8003572:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
 8003576:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 800357a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800357e:	d3e2      	bcc.n	8003546 <drawSignal+0x1ce>
	}

	for (uint16_t i = 1; i <= 279; i++) {
 8003580:	2301      	movs	r3, #1
 8003582:	f8a7 36c4 	strh.w	r3, [r7, #1732]	; 0x6c4
 8003586:	e11b      	b.n	80037c0 <drawSignal+0x448>

		if (point[i] == 0)
 8003588:	f8b7 26c4 	ldrh.w	r2, [r7, #1732]	; 0x6c4
 800358c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8003590:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003594:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8105 	beq.w	80037a8 <drawSignal+0x430>
			continue;

		int16_t x1 = i;
 800359e:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	; 0x6c4
 80035a2:	f8a7 36b2 	strh.w	r3, [r7, #1714]	; 0x6b2
		int16_t x0 = x1 - 1;
 80035a6:	f8b7 36b2 	ldrh.w	r3, [r7, #1714]	; 0x6b2
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f8a7 36c2 	strh.w	r3, [r7, #1730]	; 0x6c2

		for (; x0 >= 0; x0--) {
 80035b2:	e010      	b.n	80035d6 <drawSignal+0x25e>
			if (point[x0] != 0)
 80035b4:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 80035b8:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80035bc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80035c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <drawSignal+0x268>
		for (; x0 >= 0; x0--) {
 80035c8:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	; 0x6c2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f8a7 36c2 	strh.w	r3, [r7, #1730]	; 0x6c2
 80035d6:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	; 0x6c2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	daea      	bge.n	80035b4 <drawSignal+0x23c>
 80035de:	e000      	b.n	80035e2 <drawSignal+0x26a>
				break;
 80035e0:	bf00      	nop
		}

		if (x0 == 0 && point[x0] == 0)
 80035e2:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	; 0x6c2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <drawSignal+0x288>
 80035ea:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 80035ee:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80035f2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80035f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 81fa 	beq.w	80039f4 <drawSignal+0x67c>
			return;

		int16_t y0 = point[x0];
 8003600:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 8003604:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8003608:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800360c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003610:	f8a7 36c0 	strh.w	r3, [r7, #1728]	; 0x6c0
		int16_t y1 = point[x1];
 8003614:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	; 0x6b2
 8003618:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800361c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003620:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003624:	f8a7 36b0 	strh.w	r3, [r7, #1712]	; 0x6b0

		int16_t dx = (x1 - x0) > 0 ? (x1 - x0) : -(x1 - x0);
 8003628:	f9b7 26b2 	ldrsh.w	r2, [r7, #1714]	; 0x6b2
 800362c:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	; 0x6c2
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	425b      	neglt	r3, r3
 8003638:	f8a7 36ae 	strh.w	r3, [r7, #1710]	; 0x6ae
		int16_t sx = x0 < x1 ? 1 : -1;
 800363c:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 8003640:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	; 0x6b2
 8003644:	429a      	cmp	r2, r3
 8003646:	da01      	bge.n	800364c <drawSignal+0x2d4>
 8003648:	2301      	movs	r3, #1
 800364a:	e001      	b.n	8003650 <drawSignal+0x2d8>
 800364c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003650:	f8a7 36ac 	strh.w	r3, [r7, #1708]	; 0x6ac
		int16_t dy = (y1 - y0) > 0 ? -(y1 - y0) : (y1 - y0);
 8003654:	f9b7 26b0 	ldrsh.w	r2, [r7, #1712]	; 0x6b0
 8003658:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	; 0x6c0
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfb8      	it	lt
 8003662:	425b      	neglt	r3, r3
 8003664:	b29b      	uxth	r3, r3
 8003666:	425b      	negs	r3, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	f8a7 36aa 	strh.w	r3, [r7, #1706]	; 0x6aa
		int16_t sy = y0 < y1 ? 1 : -1;
 800366e:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	; 0x6c0
 8003672:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	; 0x6b0
 8003676:	429a      	cmp	r2, r3
 8003678:	da0e      	bge.n	8003698 <drawSignal+0x320>
 800367a:	2301      	movs	r3, #1
 800367c:	e00e      	b.n	800369c <drawSignal+0x324>
 800367e:	bf00      	nop
 8003680:	4a496a80 	.word	0x4a496a80
 8003684:	45800000 	.word	0x45800000
 8003688:	438c0000 	.word	0x438c0000
 800368c:	2000001c 	.word	0x2000001c
 8003690:	20000020 	.word	0x20000020
 8003694:	43480000 	.word	0x43480000
 8003698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800369c:	f8a7 36a8 	strh.w	r3, [r7, #1704]	; 0x6a8
		int16_t error = dx + dy;
 80036a0:	f8b7 26ae 	ldrh.w	r2, [r7, #1710]	; 0x6ae
 80036a4:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	; 0x6aa
 80036a8:	4413      	add	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f8a7 36be 	strh.w	r3, [r7, #1726]	; 0x6be

		while (1) {

			if (pixel[x0][0] > y0)
 80036b0:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 80036b4:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80036b8:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 80036bc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	; 0x6c0
 80036c6:	429a      	cmp	r2, r3
 80036c8:	dd09      	ble.n	80036de <drawSignal+0x366>
				pixel[x0][0] = y0;
 80036ca:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 80036ce:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	; 0x6c0
 80036d2:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80036d6:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 80036da:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

			if (pixel[x0][1] < y0)
 80036de:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	; 0x6c2
 80036e2:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80036e6:	f5a2 62d8 	sub.w	r2, r2, #1728	; 0x6c0
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	885b      	ldrh	r3, [r3, #2]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f9b7 36c0 	ldrsh.w	r3, [r7, #1728]	; 0x6c0
 80036f6:	429a      	cmp	r2, r3
 80036f8:	da0b      	bge.n	8003712 <drawSignal+0x39a>
				pixel[x0][1] = y0;
 80036fa:	f9b7 36c2 	ldrsh.w	r3, [r7, #1730]	; 0x6c2
 80036fe:	f8b7 16c0 	ldrh.w	r1, [r7, #1728]	; 0x6c0
 8003702:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8003706:	f5a2 62d8 	sub.w	r2, r2, #1728	; 0x6c0
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	460a      	mov	r2, r1
 8003710:	805a      	strh	r2, [r3, #2]

			if (x0 == x1 && y0 == y1)
 8003712:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 8003716:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	; 0x6b2
 800371a:	429a      	cmp	r2, r3
 800371c:	d105      	bne.n	800372a <drawSignal+0x3b2>
 800371e:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	; 0x6c0
 8003722:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	; 0x6b0
 8003726:	429a      	cmp	r2, r3
 8003728:	d040      	beq.n	80037ac <drawSignal+0x434>
				break;

			int16_t e2 = 2 * error;
 800372a:	f8b7 36be 	ldrh.w	r3, [r7, #1726]	; 0x6be
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	b29b      	uxth	r3, r3
 8003732:	f8a7 36a6 	strh.w	r3, [r7, #1702]	; 0x6a6

			if (e2 >= dy) {
 8003736:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	; 0x6a6
 800373a:	f9b7 36aa 	ldrsh.w	r3, [r7, #1706]	; 0x6aa
 800373e:	429a      	cmp	r2, r3
 8003740:	db15      	blt.n	800376e <drawSignal+0x3f6>
				if (x0 == x1)
 8003742:	f9b7 26c2 	ldrsh.w	r2, [r7, #1730]	; 0x6c2
 8003746:	f9b7 36b2 	ldrsh.w	r3, [r7, #1714]	; 0x6b2
 800374a:	429a      	cmp	r2, r3
 800374c:	d030      	beq.n	80037b0 <drawSignal+0x438>
					break;

				error = error + dy;
 800374e:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	; 0x6be
 8003752:	f8b7 36aa 	ldrh.w	r3, [r7, #1706]	; 0x6aa
 8003756:	4413      	add	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	f8a7 36be 	strh.w	r3, [r7, #1726]	; 0x6be
				x0 = x0 + sx;
 800375e:	f8b7 26c2 	ldrh.w	r2, [r7, #1730]	; 0x6c2
 8003762:	f8b7 36ac 	ldrh.w	r3, [r7, #1708]	; 0x6ac
 8003766:	4413      	add	r3, r2
 8003768:	b29b      	uxth	r3, r3
 800376a:	f8a7 36c2 	strh.w	r3, [r7, #1730]	; 0x6c2
			}

			if (e2 <= dx) {
 800376e:	f9b7 26a6 	ldrsh.w	r2, [r7, #1702]	; 0x6a6
 8003772:	f9b7 36ae 	ldrsh.w	r3, [r7, #1710]	; 0x6ae
 8003776:	429a      	cmp	r2, r3
 8003778:	dc9a      	bgt.n	80036b0 <drawSignal+0x338>
				if (y0 == y1)
 800377a:	f9b7 26c0 	ldrsh.w	r2, [r7, #1728]	; 0x6c0
 800377e:	f9b7 36b0 	ldrsh.w	r3, [r7, #1712]	; 0x6b0
 8003782:	429a      	cmp	r2, r3
 8003784:	d016      	beq.n	80037b4 <drawSignal+0x43c>
					break;

				error = error + dx;
 8003786:	f8b7 26be 	ldrh.w	r2, [r7, #1726]	; 0x6be
 800378a:	f8b7 36ae 	ldrh.w	r3, [r7, #1710]	; 0x6ae
 800378e:	4413      	add	r3, r2
 8003790:	b29b      	uxth	r3, r3
 8003792:	f8a7 36be 	strh.w	r3, [r7, #1726]	; 0x6be
				y0 = y0 + sy;
 8003796:	f8b7 26c0 	ldrh.w	r2, [r7, #1728]	; 0x6c0
 800379a:	f8b7 36a8 	ldrh.w	r3, [r7, #1704]	; 0x6a8
 800379e:	4413      	add	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f8a7 36c0 	strh.w	r3, [r7, #1728]	; 0x6c0
		while (1) {
 80037a6:	e783      	b.n	80036b0 <drawSignal+0x338>
			continue;
 80037a8:	bf00      	nop
 80037aa:	e004      	b.n	80037b6 <drawSignal+0x43e>
				break;
 80037ac:	bf00      	nop
 80037ae:	e002      	b.n	80037b6 <drawSignal+0x43e>
					break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <drawSignal+0x43e>
					break;
 80037b4:	bf00      	nop
	for (uint16_t i = 1; i <= 279; i++) {
 80037b6:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	; 0x6c4
 80037ba:	3301      	adds	r3, #1
 80037bc:	f8a7 36c4 	strh.w	r3, [r7, #1732]	; 0x6c4
 80037c0:	f8b7 36c4 	ldrh.w	r3, [r7, #1732]	; 0x6c4
 80037c4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80037c8:	f4ff aede 	bcc.w	8003588 <drawSignal+0x210>
			}
		}
	}

	for (uint16_t i = 1; i <= 279; i++) {
 80037cc:	2301      	movs	r3, #1
 80037ce:	f8a7 36bc 	strh.w	r3, [r7, #1724]	; 0x6bc
 80037d2:	e108      	b.n	80039e6 <drawSignal+0x66e>
		uint16_t min = pixel[i][0] < pixel_dirty[i][0] ? pixel[i][0] : pixel_dirty[i][0];
 80037d4:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 80037de:	4413      	add	r3, r2
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	; 0x6bc
 80037e6:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80037ea:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 80037ee:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bf28      	it	cs
 80037f6:	4613      	movcs	r3, r2
 80037f8:	f8a7 36b6 	strh.w	r3, [r7, #1718]	; 0x6b6
		uint16_t max = pixel[i][1] > pixel_dirty[i][1] ? pixel[i][1] : pixel_dirty[i][1];
 80037fc:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 8003806:	4413      	add	r3, r2
 8003808:	885a      	ldrh	r2, [r3, #2]
 800380a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 800380e:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8003812:	f5a1 61d8 	sub.w	r1, r1, #1728	; 0x6c0
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	885b      	ldrh	r3, [r3, #2]
 800381c:	4293      	cmp	r3, r2
 800381e:	bf38      	it	cc
 8003820:	4613      	movcc	r3, r2
 8003822:	f8a7 36b4 	strh.w	r3, [r7, #1716]	; 0x6b4

		for (uint16_t j = min; j <= max; j++) {
 8003826:	f8b7 36b6 	ldrh.w	r3, [r7, #1718]	; 0x6b6
 800382a:	f8a7 36ba 	strh.w	r3, [r7, #1722]	; 0x6ba
 800382e:	e0af      	b.n	8003990 <drawSignal+0x618>
			uint8_t draw = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 36b9 	strb.w	r3, [r7, #1721]	; 0x6b9
			if (j >= pixel[i][0] && j <= pixel[i][1])
 8003836:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	; 0x6bc
 800383a:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800383e:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 8003842:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003846:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 800384a:	429a      	cmp	r2, r3
 800384c:	d30f      	bcc.n	800386e <drawSignal+0x4f6>
 800384e:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 8003852:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8003856:	f5a2 62d8 	sub.w	r2, r2, #1728	; 0x6c0
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	885b      	ldrh	r3, [r3, #2]
 8003860:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 8003864:	429a      	cmp	r2, r3
 8003866:	d802      	bhi.n	800386e <drawSignal+0x4f6>
				draw = 1;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 36b9 	strb.w	r3, [r7, #1721]	; 0x6b9

			uint8_t clear = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 36b8 	strb.w	r3, [r7, #1720]	; 0x6b8
			if (j >= pixel_dirty[i][0] && j <= pixel_dirty[i][1])
 8003874:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 800387e:	4413      	add	r3, r2
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 8003886:	429a      	cmp	r2, r3
 8003888:	d30d      	bcc.n	80038a6 <drawSignal+0x52e>
 800388a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 8003894:	4413      	add	r3, r2
 8003896:	885b      	ldrh	r3, [r3, #2]
 8003898:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 800389c:	429a      	cmp	r2, r3
 800389e:	d802      	bhi.n	80038a6 <drawSignal+0x52e>
				clear = 1;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 36b8 	strb.w	r3, [r7, #1720]	; 0x6b8

			if (draw && !clear && j > 21)
 80038a6:	f897 36b9 	ldrb.w	r3, [r7, #1721]	; 0x6b9
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <drawSignal+0x564>
 80038ae:	f897 36b8 	ldrb.w	r3, [r7, #1720]	; 0x6b8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d112      	bne.n	80038dc <drawSignal+0x564>
 80038b6:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	; 0x6ba
 80038ba:	2b15      	cmp	r3, #21
 80038bc:	d90e      	bls.n	80038dc <drawSignal+0x564>
				ILI9341_DrawPixel(display, i + 20, j, color);
 80038be:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 80038c2:	3314      	adds	r3, #20
 80038c4:	b299      	uxth	r1, r3
 80038c6:	f8b7 36e8 	ldrh.w	r3, [r7, #1768]	; 0x6e8
 80038ca:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 80038ce:	f507 60da 	add.w	r0, r7, #1744	; 0x6d0
 80038d2:	f2a0 60c4 	subw	r0, r0, #1732	; 0x6c4
 80038d6:	6800      	ldr	r0, [r0, #0]
 80038d8:	f7fd fd26 	bl	8001328 <ILI9341_DrawPixel>

			if (!draw && clear) {
 80038dc:	f897 36b9 	ldrb.w	r3, [r7, #1721]	; 0x6b9
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d150      	bne.n	8003986 <drawSignal+0x60e>
 80038e4:	f897 36b8 	ldrb.w	r3, [r7, #1720]	; 0x6b8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d04c      	beq.n	8003986 <drawSignal+0x60e>
				if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 80038ec:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	; 0x6bc
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <drawSignal+0x688>)
 80038f2:	fba3 1302 	umull	r1, r3, r3, r2
 80038f6:	08d9      	lsrs	r1, r3, #3
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <drawSignal+0x5a0>
 800390a:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	; 0x6ba
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d018      	beq.n	800394a <drawSignal+0x5d2>
 8003918:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d121      	bne.n	800396a <drawSignal+0x5f2>
 8003926:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	; 0x6ba
 800392a:	f1a3 0114 	sub.w	r1, r3, #20
 800392e:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <drawSignal+0x688>)
 8003930:	fb83 2301 	smull	r2, r3, r3, r1
 8003934:	10da      	asrs	r2, r3, #3
 8003936:	17cb      	asrs	r3, r1, #31
 8003938:	1ad2      	subs	r2, r2, r3
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	1aca      	subs	r2, r1, r3
 8003946:	2a00      	cmp	r2, #0
 8003948:	d10f      	bne.n	800396a <drawSignal+0x5f2>
					ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 800394a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 800394e:	3314      	adds	r3, #20
 8003950:	b299      	uxth	r1, r3
 8003952:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 8003956:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800395a:	f2a3 60c4 	subw	r0, r3, #1732	; 0x6c4
 800395e:	f245 238a 	movw	r3, #21130	; 0x528a
 8003962:	6800      	ldr	r0, [r0, #0]
 8003964:	f7fd fce0 	bl	8001328 <ILI9341_DrawPixel>
 8003968:	e00d      	b.n	8003986 <drawSignal+0x60e>
				else
					ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 800396a:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 800396e:	3314      	adds	r3, #20
 8003970:	b299      	uxth	r1, r3
 8003972:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 8003976:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800397a:	f2a3 60c4 	subw	r0, r3, #1732	; 0x6c4
 800397e:	2300      	movs	r3, #0
 8003980:	6800      	ldr	r0, [r0, #0]
 8003982:	f7fd fcd1 	bl	8001328 <ILI9341_DrawPixel>
		for (uint16_t j = min; j <= max; j++) {
 8003986:	f8b7 36ba 	ldrh.w	r3, [r7, #1722]	; 0x6ba
 800398a:	3301      	adds	r3, #1
 800398c:	f8a7 36ba 	strh.w	r3, [r7, #1722]	; 0x6ba
 8003990:	f8b7 26ba 	ldrh.w	r2, [r7, #1722]	; 0x6ba
 8003994:	f8b7 36b4 	ldrh.w	r3, [r7, #1716]	; 0x6b4
 8003998:	429a      	cmp	r2, r3
 800399a:	f67f af49 	bls.w	8003830 <drawSignal+0x4b8>
			}
		}

		pixel_dirty[i][0] = pixel[i][0];
 800399e:	f8b7 16bc 	ldrh.w	r1, [r7, #1724]	; 0x6bc
 80039a2:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 80039ac:	4413      	add	r3, r2
 80039ae:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 80039b2:	f5a2 62d8 	sub.w	r2, r2, #1728	; 0x6c0
 80039b6:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 80039ba:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = pixel[i][1];
 80039bc:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 80039c0:	f8b7 26bc 	ldrh.w	r2, [r7, #1724]	; 0x6bc
 80039c4:	0092      	lsls	r2, r2, #2
 80039c6:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 80039ca:	440a      	add	r2, r1
 80039cc:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80039d0:	f5a1 61d8 	sub.w	r1, r1, #1728	; 0x6c0
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	885b      	ldrh	r3, [r3, #2]
 80039da:	8053      	strh	r3, [r2, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 80039dc:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 80039e0:	3301      	adds	r3, #1
 80039e2:	f8a7 36bc 	strh.w	r3, [r7, #1724]	; 0x6bc
 80039e6:	f8b7 36bc 	ldrh.w	r3, [r7, #1724]	; 0x6bc
 80039ea:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80039ee:	f4ff aef1 	bcc.w	80037d4 <drawSignal+0x45c>
 80039f2:	e000      	b.n	80039f6 <drawSignal+0x67e>
			return;
 80039f4:	bf00      	nop
	}
}
 80039f6:	f207 67d4 	addw	r7, r7, #1748	; 0x6d4
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	51eb851f 	.word	0x51eb851f

08003a04 <clearSignal>:

static void clearSignal(ILI9341TypeDef *display, uint16_t pixel_dirty[280][2])
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	for (uint16_t i = 1; i <= 279; i++) {
 8003a0e:	2301      	movs	r3, #1
 8003a10:	81fb      	strh	r3, [r7, #14]
 8003a12:	e05d      	b.n	8003ad0 <clearSignal+0xcc>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003a14:	89fb      	ldrh	r3, [r7, #14]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	81bb      	strh	r3, [r7, #12]
 8003a20:	e03f      	b.n	8003aa2 <clearSignal+0x9e>
			if (((i % 25) == 0 && (j % 2) == 0) || ((i % 2) == 0 && ((j - 20) % 25) == 0))
 8003a22:	89fa      	ldrh	r2, [r7, #14]
 8003a24:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <clearSignal+0xe0>)
 8003a26:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2a:	08d9      	lsrs	r1, r3, #3
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <clearSignal+0x46>
 8003a3e:	89bb      	ldrh	r3, [r7, #12]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <clearSignal+0x74>
 8003a4a:	89fb      	ldrh	r3, [r7, #14]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d11a      	bne.n	8003a8c <clearSignal+0x88>
 8003a56:	89bb      	ldrh	r3, [r7, #12]
 8003a58:	f1a3 0114 	sub.w	r1, r3, #20
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <clearSignal+0xe0>)
 8003a5e:	fb83 2301 	smull	r2, r3, r3, r1
 8003a62:	10da      	asrs	r2, r3, #3
 8003a64:	17cb      	asrs	r3, r1, #31
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009a      	lsls	r2, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	1aca      	subs	r2, r1, r3
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	d109      	bne.n	8003a8c <clearSignal+0x88>
				ILI9341_DrawPixel(display, i + 20, j,  ILI9341_GRAY);
 8003a78:	89fb      	ldrh	r3, [r7, #14]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	b299      	uxth	r1, r3
 8003a7e:	89ba      	ldrh	r2, [r7, #12]
 8003a80:	f245 238a 	movw	r3, #21130	; 0x528a
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd fc4f 	bl	8001328 <ILI9341_DrawPixel>
 8003a8a:	e007      	b.n	8003a9c <clearSignal+0x98>
			else
				ILI9341_DrawPixel(display, i + 20, j, ILI9341_BLACK);
 8003a8c:	89fb      	ldrh	r3, [r7, #14]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	b299      	uxth	r1, r3
 8003a92:	89ba      	ldrh	r2, [r7, #12]
 8003a94:	2300      	movs	r3, #0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fc46 	bl	8001328 <ILI9341_DrawPixel>
		for (uint16_t j = pixel_dirty[i][0]; j <= pixel_dirty[i][1]; j++) {
 8003a9c:	89bb      	ldrh	r3, [r7, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	81bb      	strh	r3, [r7, #12]
 8003aa2:	89fb      	ldrh	r3, [r7, #14]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	885b      	ldrh	r3, [r3, #2]
 8003aac:	89ba      	ldrh	r2, [r7, #12]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d9b7      	bls.n	8003a22 <clearSignal+0x1e>
		}

		pixel_dirty[i][0] = 0;
 8003ab2:	89fb      	ldrh	r3, [r7, #14]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	2200      	movs	r2, #0
 8003abc:	801a      	strh	r2, [r3, #0]
		pixel_dirty[i][1] = 0;
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	805a      	strh	r2, [r3, #2]
	for (uint16_t i = 1; i <= 279; i++) {
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	3301      	adds	r3, #1
 8003ace:	81fb      	strh	r3, [r7, #14]
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8003ad6:	d39d      	bcc.n	8003a14 <clearSignal+0x10>
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <drawSignalParam>:

static void drawSignalParam(ILI9341TypeDef *display, char *string, size_t size, uint16_t adc_max, uint16_t adc_min, uint32_t adc_period)
{
 8003ae8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003aec:	b096      	sub	sp, #88	; 0x58
 8003aee:	af0c      	add	r7, sp, #48	; 0x30
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	807b      	strh	r3, [r7, #2]
	float max  = (float)(adc_max) * 3300000.0f / 4096.0f;
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003d00 <drawSignalParam+0x218>
 8003b06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b0a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003d04 <drawSignalParam+0x21c>
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float min  = (float)(adc_min) * 3300000.0f / 4096.0f;
 8003b16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003d00 <drawSignalParam+0x218>
 8003b26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b2a:	eddf 6a76 	vldr	s13, [pc, #472]	; 8003d04 <drawSignalParam+0x21c>
 8003b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b32:	edc7 7a08 	vstr	s15, [r7, #32]
	float freq = 1.0f / ((float)(adc_period) / 1000000.0f);
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b40:	eddf 6a71 	vldr	s13, [pc, #452]	; 8003d08 <drawSignalParam+0x220>
 8003b44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b50:	edc7 7a07 	vstr	s15, [r7, #28]
	char *max_postfix  = "";
 8003b54:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <drawSignalParam+0x224>)
 8003b56:	61bb      	str	r3, [r7, #24]
	char *min_postfix  = "";
 8003b58:	4b6c      	ldr	r3, [pc, #432]	; (8003d0c <drawSignalParam+0x224>)
 8003b5a:	617b      	str	r3, [r7, #20]
	char *freq_postfix = "";
 8003b5c:	4b6b      	ldr	r3, [pc, #428]	; (8003d0c <drawSignalParam+0x224>)
 8003b5e:	613b      	str	r3, [r7, #16]

	if (max >= 1000000.0f) {
 8003b60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b64:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003d08 <drawSignalParam+0x220>
 8003b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	db0a      	blt.n	8003b88 <drawSignalParam+0xa0>
		max /= 1000000.0f;
 8003b72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b76:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003d08 <drawSignalParam+0x220>
 8003b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		max_postfix = " V";
 8003b82:	4b63      	ldr	r3, [pc, #396]	; (8003d10 <drawSignalParam+0x228>)
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e015      	b.n	8003bb4 <drawSignalParam+0xcc>
	} else if (max >= 1000.0f) {
 8003b88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b8c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003d14 <drawSignalParam+0x22c>
 8003b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	db0a      	blt.n	8003bb0 <drawSignalParam+0xc8>
		max /= 1000.0f;
 8003b9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b9e:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003d14 <drawSignalParam+0x22c>
 8003ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ba6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		max_postfix = "mV";
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <drawSignalParam+0x230>)
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	e001      	b.n	8003bb4 <drawSignalParam+0xcc>
	} else
		max_postfix = "uV";
 8003bb0:	4b5a      	ldr	r3, [pc, #360]	; (8003d1c <drawSignalParam+0x234>)
 8003bb2:	61bb      	str	r3, [r7, #24]

	if (min >= 1000000.0f) {
 8003bb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bb8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003d08 <drawSignalParam+0x220>
 8003bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	db0a      	blt.n	8003bdc <drawSignalParam+0xf4>
		min /= 1000000.0f;
 8003bc6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003bca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d08 <drawSignalParam+0x220>
 8003bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bd2:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = " V";
 8003bd6:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <drawSignalParam+0x228>)
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e015      	b.n	8003c08 <drawSignalParam+0x120>
	} else if (min >= 1000.0f) {
 8003bdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003be0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003d14 <drawSignalParam+0x22c>
 8003be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bec:	db0a      	blt.n	8003c04 <drawSignalParam+0x11c>
		min /= 1000.0f;
 8003bee:	ed97 7a08 	vldr	s14, [r7, #32]
 8003bf2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d14 <drawSignalParam+0x22c>
 8003bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bfa:	edc7 7a08 	vstr	s15, [r7, #32]
		min_postfix = "mV";
 8003bfe:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <drawSignalParam+0x230>)
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e001      	b.n	8003c08 <drawSignalParam+0x120>
	} else
		min_postfix = "uV";
 8003c04:	4b45      	ldr	r3, [pc, #276]	; (8003d1c <drawSignalParam+0x234>)
 8003c06:	617b      	str	r3, [r7, #20]

	if (freq >= 1000000.0f) {
 8003c08:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c0c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003d08 <drawSignalParam+0x220>
 8003c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c18:	db0a      	blt.n	8003c30 <drawSignalParam+0x148>
		freq /= 1000000.0f;
 8003c1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c1e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003d08 <drawSignalParam+0x220>
 8003c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c26:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "MHz";
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <drawSignalParam+0x238>)
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	e015      	b.n	8003c5c <drawSignalParam+0x174>
	} else if (freq >= 1000.0f) {
 8003c30:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c34:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003d14 <drawSignalParam+0x22c>
 8003c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	db0a      	blt.n	8003c58 <drawSignalParam+0x170>
		freq /= 1000.0f;
 8003c42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c46:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003d14 <drawSignalParam+0x22c>
 8003c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c4e:	edc7 7a07 	vstr	s15, [r7, #28]
		freq_postfix = "kHz";
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <drawSignalParam+0x23c>)
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e001      	b.n	8003c5c <drawSignalParam+0x174>
	} else
		freq_postfix = " Hz";
 8003c58:	4b33      	ldr	r3, [pc, #204]	; (8003d28 <drawSignalParam+0x240>)
 8003c5a:	613b      	str	r3, [r7, #16]

	if (adc_period != 0)
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d020      	beq.n	8003ca4 <drawSignalParam+0x1bc>
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:%3.0f%s  ", min, min_postfix, max, max_postfix, freq, freq_postfix);
 8003c62:	6a38      	ldr	r0, [r7, #32]
 8003c64:	f7fc fc78 	bl	8000558 <__aeabi_f2d>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6e:	f7fc fc73 	bl	8000558 <__aeabi_f2d>
 8003c72:	4680      	mov	r8, r0
 8003c74:	4689      	mov	r9, r1
 8003c76:	69f8      	ldr	r0, [r7, #28]
 8003c78:	f7fc fc6e 	bl	8000558 <__aeabi_f2d>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	6939      	ldr	r1, [r7, #16]
 8003c82:	910a      	str	r1, [sp, #40]	; 0x28
 8003c84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	9306      	str	r3, [sp, #24]
 8003c8c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	9302      	str	r3, [sp, #8]
 8003c94:	e9cd 4500 	strd	r4, r5, [sp]
 8003c98:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <drawSignalParam+0x244>)
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	68b8      	ldr	r0, [r7, #8]
 8003c9e:	f004 fdbd 	bl	800881c <sniprintf>
 8003ca2:	e016      	b.n	8003cd2 <drawSignalParam+0x1ea>
	else
		snprintf(string, size, "ampl:%3.1f%s~%3.1f%s freq:??? Hz  ", min, min_postfix, max, max_postfix);
 8003ca4:	6a38      	ldr	r0, [r7, #32]
 8003ca6:	f7fc fc57 	bl	8000558 <__aeabi_f2d>
 8003caa:	4604      	mov	r4, r0
 8003cac:	460d      	mov	r5, r1
 8003cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cb0:	f7fc fc52 	bl	8000558 <__aeabi_f2d>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	9106      	str	r1, [sp, #24]
 8003cbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	9302      	str	r3, [sp, #8]
 8003cc4:	e9cd 4500 	strd	r4, r5, [sp]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <drawSignalParam+0x248>)
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	68b8      	ldr	r0, [r7, #8]
 8003cce:	f004 fda5 	bl	800881c <sniprintf>

	ILI9341_WriteString(display, 98, 225, string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9303      	str	r3, [sp, #12]
 8003cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <drawSignalParam+0x24c>)
 8003cde:	466b      	mov	r3, sp
 8003ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce4:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	22e1      	movs	r2, #225	; 0xe1
 8003cec:	2162      	movs	r1, #98	; 0x62
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7fd fd3d 	bl	800176e <ILI9341_WriteString>
}
 8003cf4:	bf00      	nop
 8003cf6:	3728      	adds	r7, #40	; 0x28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cfe:	bf00      	nop
 8003d00:	4a496a80 	.word	0x4a496a80
 8003d04:	45800000 	.word	0x45800000
 8003d08:	49742400 	.word	0x49742400
 8003d0c:	0800acd8 	.word	0x0800acd8
 8003d10:	0800acdc 	.word	0x0800acdc
 8003d14:	447a0000 	.word	0x447a0000
 8003d18:	0800ace0 	.word	0x0800ace0
 8003d1c:	0800ace4 	.word	0x0800ace4
 8003d20:	0800ace8 	.word	0x0800ace8
 8003d24:	0800acec 	.word	0x0800acec
 8003d28:	0800acf0 	.word	0x0800acf0
 8003d2c:	0800acf4 	.word	0x0800acf4
 8003d30:	0800ad18 	.word	0x0800ad18
 8003d34:	20000000 	.word	0x20000000

08003d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af04      	add	r7, sp, #16
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3e:	b672      	cpsid	i
}
 8003d40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ILI9341_WriteString(&display, 0, 0, "Critical error!", Font_11x18, ILI9341_BLACK, ILI9341_RED);
 8003d42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d46:	9303      	str	r3, [sp, #12]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9302      	str	r3, [sp, #8]
 8003d4c:	4a06      	ldr	r2, [pc, #24]	; (8003d68 <Error_Handler+0x30>)
 8003d4e:	466b      	mov	r3, sp
 8003d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d54:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <Error_Handler+0x34>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4804      	ldr	r0, [pc, #16]	; (8003d70 <Error_Handler+0x38>)
 8003d60:	f7fd fd05 	bl	800176e <ILI9341_WriteString>
 8003d64:	e7ed      	b.n	8003d42 <Error_Handler+0xa>
 8003d66:	bf00      	nop
 8003d68:	20000008 	.word	0x20000008
 8003d6c:	0800ad3c 	.word	0x0800ad3c
 8003d70:	2000044c 	.word	0x2000044c

08003d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <HAL_ADC_MspInit+0x110>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d171      	bne.n	8003eca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	4a3a      	ldr	r2, [pc, #232]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	6453      	str	r3, [r2, #68]	; 0x44
 8003df6:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a33      	ldr	r2, [pc, #204]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_ADC_MspInit+0x114>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_CH3_Pin;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_CH3_GPIO_Port, &GPIO_InitStruct);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4823      	ldr	r0, [pc, #140]	; (8003edc <HAL_ADC_MspInit+0x118>)
 8003e4e:	f001 ff13 	bl	8005c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_CH1_Pin|ADC_CH2_Pin;
 8003e52:	2303      	movs	r3, #3
 8003e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e56:	2303      	movs	r3, #3
 8003e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	4619      	mov	r1, r3
 8003e64:	481e      	ldr	r0, [pc, #120]	; (8003ee0 <HAL_ADC_MspInit+0x11c>)
 8003e66:	f001 ff07 	bl	8005c78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <HAL_ADC_MspInit+0x124>)
 8003e6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003ea2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ea6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003eae:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003eb0:	f001 fb02 	bl	80054b8 <HAL_DMA_Init>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003eba:	f7ff ff3d 	bl	8003d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec4:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <HAL_ADC_MspInit+0x120>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003eca:	bf00      	nop
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40012000 	.word	0x40012000
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40020400 	.word	0x40020400
 8003ee4:	20000274 	.word	0x20000274
 8003ee8:	40026410 	.word	0x40026410

08003eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_SPI_MspInit+0x84>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d12b      	bne.n	8003f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_SPI_MspInit+0x88>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f46:	23e0      	movs	r3, #224	; 0xe0
 8003f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f52:	2303      	movs	r3, #3
 8003f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f56:	2305      	movs	r3, #5
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4805      	ldr	r0, [pc, #20]	; (8003f78 <HAL_SPI_MspInit+0x8c>)
 8003f62:	f001 fe89 	bl	8005c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	3728      	adds	r7, #40	; 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40013000 	.word	0x40013000
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020000 	.word	0x40020000

08003f7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_TIM_PWM_MspInit+0x48>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d115      	bne.n	8003fba <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_TIM_PWM_MspInit+0x4c>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <HAL_TIM_PWM_MspInit+0x4c>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_TIM_PWM_MspInit+0x4c>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	2019      	movs	r0, #25
 8003fb0:	f001 fa4b 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fb4:	2019      	movs	r0, #25
 8003fb6:	f001 fa64 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40023800 	.word	0x40023800

08003fcc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	; 0x30
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d12c      	bne.n	8004048 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a30      	ldr	r2, [pc, #192]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_INB_Pin|ENCODER1_INA_Pin;
 8004026:	2330      	movs	r3, #48	; 0x30
 8004028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800402e:	2301      	movs	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004036:	2302      	movs	r3, #2
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403a:	f107 031c 	add.w	r3, r7, #28
 800403e:	4619      	mov	r1, r3
 8004040:	481e      	ldr	r0, [pc, #120]	; (80040bc <HAL_TIM_Encoder_MspInit+0xf0>)
 8004042:	f001 fe19 	bl	8005c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004046:	e030      	b.n	80040aa <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d12b      	bne.n	80040aa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	6313      	str	r3, [r2, #48]	; 0x30
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER0_INB_Pin|ENCODER0_INA_Pin;
 800408a:	23c0      	movs	r3, #192	; 0xc0
 800408c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408e:	2302      	movs	r3, #2
 8004090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004092:	2301      	movs	r3, #1
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004096:	2300      	movs	r3, #0
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800409a:	2302      	movs	r3, #2
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409e:	f107 031c 	add.w	r3, r7, #28
 80040a2:	4619      	mov	r1, r3
 80040a4:	4805      	ldr	r0, [pc, #20]	; (80040bc <HAL_TIM_Encoder_MspInit+0xf0>)
 80040a6:	f001 fde7 	bl	8005c78 <HAL_GPIO_Init>
}
 80040aa:	bf00      	nop
 80040ac:	3730      	adds	r7, #48	; 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40000800 	.word	0x40000800

080040c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_TIM_Base_MspInit+0x48>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d115      	bne.n	8004102 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_TIM_Base_MspInit+0x4c>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_TIM_Base_MspInit+0x4c>)
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_TIM_Base_MspInit+0x4c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2019      	movs	r0, #25
 80040f8:	f001 f9a7 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80040fc:	2019      	movs	r0, #25
 80040fe:	f001 f9c0 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40014400 	.word	0x40014400
 8004110:	40023800 	.word	0x40023800

08004114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <HAL_TIM_MspPostInit+0x68>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d11e      	bne.n	8004174 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_TIM_MspPostInit+0x6c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <HAL_TIM_MspPostInit+0x6c>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_TIM_MspPostInit+0x6c>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_GENERATOR_Pin;
 8004152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004156:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004158:	2302      	movs	r3, #2
 800415a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004160:	2303      	movs	r3, #3
 8004162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004164:	2301      	movs	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GENERATOR_GPIO_Port, &GPIO_InitStruct);
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4619      	mov	r1, r3
 800416e:	4805      	ldr	r0, [pc, #20]	; (8004184 <HAL_TIM_MspPostInit+0x70>)
 8004170:	f001 fd82 	bl	8005c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010000 	.word	0x40010000
 8004180:	40023800 	.word	0x40023800
 8004184:	40020000 	.word	0x40020000

08004188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800418c:	e7fe      	b.n	800418c <NMI_Handler+0x4>

0800418e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004192:	e7fe      	b.n	8004192 <HardFault_Handler+0x4>

08004194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <MemManage_Handler+0x4>

0800419a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <BusFault_Handler+0x4>

080041a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <UsageFault_Handler+0x4>

080041a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041d4:	f000 fbc8 	bl	8004968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}

080041dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_Pin);
 80041e0:	2008      	movs	r0, #8
 80041e2:	f001 fee7 	bl	8005fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041f0:	4803      	ldr	r0, [pc, #12]	; (8004200 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80041f2:	f003 f8f3 	bl	80073dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80041f6:	4803      	ldr	r0, [pc, #12]	; (8004204 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80041f8:	f003 f8f0 	bl	80073dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	2000032c 	.word	0x2000032c
 8004204:	20000404 	.word	0x20000404

08004208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800420c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004210:	f001 fed0 	bl	8005fb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8004214:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004218:	f001 fecc 	bl	8005fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}

08004220 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <DMA2_Stream0_IRQHandler+0x10>)
 8004226:	f001 fabd 	bl	80057a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000274 	.word	0x20000274

08004234 <HAL_ADC_ConvCpltCallback>:
volatile uint32_t adc1_time_delta = 0;
volatile uint16_t adc0_prev       = 0;
volatile uint16_t adc1_prev       = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a95      	ldr	r2, [pc, #596]	; (8004498 <HAL_ADC_ConvCpltCallback+0x264>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f040 81cd 	bne.w	80045e2 <HAL_ADC_ConvCpltCallback+0x3ae>
    {
    	if (adc_reset_cyccnt) {
 8004248:	4b94      	ldr	r3, [pc, #592]	; (800449c <HAL_ADC_ConvCpltCallback+0x268>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_ADC_ConvCpltCallback+0x36>
    		DWT->CYCCNT = 0U;
 8004252:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <HAL_ADC_ConvCpltCallback+0x26c>)
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]
    		adc0_time_delta = 0;
 8004258:	4b92      	ldr	r3, [pc, #584]	; (80044a4 <HAL_ADC_ConvCpltCallback+0x270>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    		adc1_time_delta = 0;
 800425e:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_ADC_ConvCpltCallback+0x274>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
    		adc_reset_cyccnt = 0;
 8004264:	4b8d      	ldr	r3, [pc, #564]	; (800449c <HAL_ADC_ConvCpltCallback+0x268>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc0_filled) {
 800426a:	4b90      	ldr	r3, [pc, #576]	; (80044ac <HAL_ADC_ConvCpltCallback+0x278>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 80b0 	bne.w	80043d6 <HAL_ADC_ConvCpltCallback+0x1a2>
			adc0_time[adc0_length] = (DWT->CYCCNT - adc0_time_delta) / (SystemCoreClock / 1000000);
 8004276:	4b8a      	ldr	r3, [pc, #552]	; (80044a0 <HAL_ADC_ConvCpltCallback+0x26c>)
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4b8a      	ldr	r3, [pc, #552]	; (80044a4 <HAL_ADC_ConvCpltCallback+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1ad1      	subs	r1, r2, r3
 8004280:	4b8b      	ldr	r3, [pc, #556]	; (80044b0 <HAL_ADC_ConvCpltCallback+0x27c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a8b      	ldr	r2, [pc, #556]	; (80044b4 <HAL_ADC_ConvCpltCallback+0x280>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0c9a      	lsrs	r2, r3, #18
 800428c:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	fbb1 f2f2 	udiv	r2, r1, r2
 8004294:	4989      	ldr	r1, [pc, #548]	; (80044bc <HAL_ADC_ConvCpltCallback+0x288>)
 8004296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc0[adc0_length] = adc_data[0] * ADC_CHANNEL0_SCALE;
 800429a:	4b89      	ldr	r3, [pc, #548]	; (80044c0 <HAL_ADC_ConvCpltCallback+0x28c>)
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b299      	uxth	r1, r3
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	460b      	mov	r3, r1
 80042a6:	4619      	mov	r1, r3
 80042a8:	0089      	lsls	r1, r1, #2
 80042aa:	4419      	add	r1, r3
 80042ac:	0049      	lsls	r1, r1, #1
 80042ae:	440b      	add	r3, r1
 80042b0:	b299      	uxth	r1, r3
 80042b2:	4b84      	ldr	r3, [pc, #528]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 80042b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			if (adc_max[0] < adc0[adc0_length])
 80042b8:	4b83      	ldr	r3, [pc, #524]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x294>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	4b7e      	ldr	r3, [pc, #504]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4980      	ldr	r1, [pc, #512]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 80042c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d206      	bcs.n	80042da <HAL_ADC_ConvCpltCallback+0xa6>
				adc_max[0] = adc0[adc0_length];
 80042cc:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7c      	ldr	r2, [pc, #496]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 80042d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80042d6:	4b7c      	ldr	r3, [pc, #496]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x294>)
 80042d8:	801a      	strh	r2, [r3, #0]

			if (adc_min[0] > adc0[adc0_length])
 80042da:	4b7c      	ldr	r3, [pc, #496]	; (80044cc <HAL_ADC_ConvCpltCallback+0x298>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29a      	uxth	r2, r3
 80042e0:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4977      	ldr	r1, [pc, #476]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 80042e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d906      	bls.n	80042fc <HAL_ADC_ConvCpltCallback+0xc8>
				adc_min[0] = adc0[adc0_length];
 80042ee:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a74      	ldr	r2, [pc, #464]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 80042f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80042f8:	4b74      	ldr	r3, [pc, #464]	; (80044cc <HAL_ADC_ConvCpltCallback+0x298>)
 80042fa:	801a      	strh	r2, [r3, #0]

			if (adc0_length < (ADC_BUFFER_SIZE - 1)) {
 80042fc:	4b6e      	ldr	r3, [pc, #440]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004304:	d864      	bhi.n	80043d0 <HAL_ADC_ConvCpltCallback+0x19c>

				uint8_t trigger = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]

				if (trigger_mode == 0)
 800430a:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <HAL_ADC_ConvCpltCallback+0x29c>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d114      	bne.n	800433c <HAL_ADC_ConvCpltCallback+0x108>
					trigger = (adc0_prev < trigger0_value && adc0[adc0_length] > trigger0_value);
 8004312:	4b70      	ldr	r3, [pc, #448]	; (80044d4 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29a      	uxth	r2, r3
 8004318:	4b6f      	ldr	r3, [pc, #444]	; (80044d8 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d20a      	bcs.n	8004336 <HAL_ADC_ConvCpltCallback+0x102>
 8004320:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a67      	ldr	r2, [pc, #412]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 8004326:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800432a:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d901      	bls.n	8004336 <HAL_ADC_ConvCpltCallback+0x102>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_ADC_ConvCpltCallback+0x104>
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	e013      	b.n	8004364 <HAL_ADC_ConvCpltCallback+0x130>
				else
					trigger = (adc0_prev > trigger0_value && adc0[adc0_length] < trigger0_value);
 800433c:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29a      	uxth	r2, r3
 8004342:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d90a      	bls.n	8004360 <HAL_ADC_ConvCpltCallback+0x12c>
 800434a:	4b5b      	ldr	r3, [pc, #364]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5d      	ldr	r2, [pc, #372]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x290>)
 8004350:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004354:	4b60      	ldr	r3, [pc, #384]	; (80044d8 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d201      	bcs.n	8004360 <HAL_ADC_ConvCpltCallback+0x12c>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_ADC_ConvCpltCallback+0x12e>
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]

				if (trigger && adc0_length != 0) {
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d021      	beq.n	80043ae <HAL_ADC_ConvCpltCallback+0x17a>
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01d      	beq.n	80043ae <HAL_ADC_ConvCpltCallback+0x17a>
					if (!event_trigger0_detected) {
 8004372:	4b5a      	ldr	r3, [pc, #360]	; (80044dc <HAL_ADC_ConvCpltCallback+0x2a8>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_ADC_ConvCpltCallback+0x15c>
						adc0_length = 0;
 800437a:	4b4f      	ldr	r3, [pc, #316]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
						adc0_time_delta = DWT->CYCCNT;
 8004380:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <HAL_ADC_ConvCpltCallback+0x26c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a47      	ldr	r2, [pc, #284]	; (80044a4 <HAL_ADC_ConvCpltCallback+0x270>)
 8004386:	6013      	str	r3, [r2, #0]
						event_trigger0_detected = 1;
 8004388:	4b54      	ldr	r3, [pc, #336]	; (80044dc <HAL_ADC_ConvCpltCallback+0x2a8>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e00e      	b.n	80043ae <HAL_ADC_ConvCpltCallback+0x17a>
					} else if (!adc_period0_detected) {
 8004390:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_ADC_ConvCpltCallback+0x17a>
						adc_period[0] = adc0_time[adc0_length];
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a47      	ldr	r2, [pc, #284]	; (80044bc <HAL_ADC_ConvCpltCallback+0x288>)
 80043a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a4:	4a4f      	ldr	r2, [pc, #316]	; (80044e4 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80043a6:	6013      	str	r3, [r2, #0]
						adc_period0_detected = 1;
 80043a8:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
					}
				}

				adc0_prev = adc_data[0] * ADC_CHANNEL0_SCALE;
 80043ae:	4b44      	ldr	r3, [pc, #272]	; (80044c0 <HAL_ADC_ConvCpltCallback+0x28c>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	0092      	lsls	r2, r2, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	0052      	lsls	r2, r2, #1
 80043bc:	4413      	add	r3, r2
 80043be:	b29a      	uxth	r2, r3
 80043c0:	4b44      	ldr	r3, [pc, #272]	; (80044d4 <HAL_ADC_ConvCpltCallback+0x2a0>)
 80043c2:	801a      	strh	r2, [r3, #0]
				adc0_length++;
 80043c4:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <HAL_ADC_ConvCpltCallback+0x284>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e002      	b.n	80043d6 <HAL_ADC_ConvCpltCallback+0x1a2>

			} else
				adc0_filled = 1;
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_ADC_ConvCpltCallback+0x278>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    	}

    	if (!adc1_filled) {
 80043d6:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <HAL_ADC_ConvCpltCallback+0x2b4>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 80d9 	bne.w	8004594 <HAL_ADC_ConvCpltCallback+0x360>
			adc1_time[adc1_length] = (DWT->CYCCNT - adc1_time_delta) / (SystemCoreClock / 1000000);
 80043e2:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <HAL_ADC_ConvCpltCallback+0x26c>)
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <HAL_ADC_ConvCpltCallback+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1ad1      	subs	r1, r2, r3
 80043ec:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <HAL_ADC_ConvCpltCallback+0x27c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <HAL_ADC_ConvCpltCallback+0x280>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	0c9a      	lsrs	r2, r3, #18
 80043f8:	4b3c      	ldr	r3, [pc, #240]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	fbb1 f2f2 	udiv	r2, r1, r2
 8004400:	493b      	ldr	r1, [pc, #236]	; (80044f0 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adc1[adc1_length] = adc_data[1] * ADC_CHANNEL1_SCALE;
 8004406:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2d      	ldr	r2, [pc, #180]	; (80044c0 <HAL_ADC_ConvCpltCallback+0x28c>)
 800440c:	8852      	ldrh	r2, [r2, #2]
 800440e:	b291      	uxth	r1, r2
 8004410:	4a38      	ldr	r2, [pc, #224]	; (80044f4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8004412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if (adc_max[1] < adc1[adc1_length])
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x294>)
 8004418:	885b      	ldrh	r3, [r3, #2]
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4934      	ldr	r1, [pc, #208]	; (80044f4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8004422:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004426:	429a      	cmp	r2, r3
 8004428:	d206      	bcs.n	8004438 <HAL_ADC_ConvCpltCallback+0x204>
				adc_max[1] = adc1[adc1_length];
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a31      	ldr	r2, [pc, #196]	; (80044f4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8004430:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x294>)
 8004436:	805a      	strh	r2, [r3, #2]

			if (adc_min[1] > adc1[adc1_length])
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_ADC_ConvCpltCallback+0x298>)
 800443a:	885b      	ldrh	r3, [r3, #2]
 800443c:	b29a      	uxth	r2, r3
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	492c      	ldr	r1, [pc, #176]	; (80044f4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8004444:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004448:	429a      	cmp	r2, r3
 800444a:	d906      	bls.n	800445a <HAL_ADC_ConvCpltCallback+0x226>
				adc_min[1] = adc1[adc1_length];
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8004452:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_ADC_ConvCpltCallback+0x298>)
 8004458:	805a      	strh	r2, [r3, #2]

			if (adc1_length < (ADC_BUFFER_SIZE - 1)) {
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004462:	f200 8094 	bhi.w	800458e <HAL_ADC_ConvCpltCallback+0x35a>

				uint8_t trigger = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	73bb      	strb	r3, [r7, #14]

				if (trigger_mode == 0)
 800446a:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_ADC_ConvCpltCallback+0x29c>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d149      	bne.n	8004506 <HAL_ADC_ConvCpltCallback+0x2d2>
					trigger = (adc1_prev < trigger1_value && adc1[adc1_length] > trigger1_value);
 8004472:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_ADC_ConvCpltCallback+0x2c8>)
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d23f      	bcs.n	8004500 <HAL_ADC_ConvCpltCallback+0x2cc>
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_ADC_ConvCpltCallback+0x2b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8004486:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <HAL_ADC_ConvCpltCallback+0x2c8>)
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d936      	bls.n	8004500 <HAL_ADC_ConvCpltCallback+0x2cc>
 8004492:	2301      	movs	r3, #1
 8004494:	e035      	b.n	8004502 <HAL_ADC_ConvCpltCallback+0x2ce>
 8004496:	bf00      	nop
 8004498:	40012000 	.word	0x40012000
 800449c:	20000012 	.word	0x20000012
 80044a0:	e0001000 	.word	0xe0001000
 80044a4:	20001c94 	.word	0x20001c94
 80044a8:	20001c98 	.word	0x20001c98
 80044ac:	20000478 	.word	0x20000478
 80044b0:	2000003c 	.word	0x2000003c
 80044b4:	431bde83 	.word	0x431bde83
 80044b8:	20000470 	.word	0x20000470
 80044bc:	2000048c 	.word	0x2000048c
 80044c0:	20000468 	.word	0x20000468
 80044c4:	2000148c 	.word	0x2000148c
 80044c8:	2000047c 	.word	0x2000047c
 80044cc:	20000014 	.word	0x20000014
 80044d0:	20001c8c 	.word	0x20001c8c
 80044d4:	20001c9c 	.word	0x20001c9c
 80044d8:	2000002c 	.word	0x2000002c
 80044dc:	20000039 	.word	0x20000039
 80044e0:	20000488 	.word	0x20000488
 80044e4:	20000480 	.word	0x20000480
 80044e8:	20000010 	.word	0x20000010
 80044ec:	20000474 	.word	0x20000474
 80044f0:	20000c8c 	.word	0x20000c8c
 80044f4:	2000188c 	.word	0x2000188c
 80044f8:	20001c9e 	.word	0x20001c9e
 80044fc:	2000002e 	.word	0x2000002e
 8004500:	2300      	movs	r3, #0
 8004502:	73bb      	strb	r3, [r7, #14]
 8004504:	e013      	b.n	800452e <HAL_ADC_ConvCpltCallback+0x2fa>
				else
					trigger = (adc1_prev > trigger1_value && adc1[adc1_length] < trigger1_value);
 8004506:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <HAL_ADC_ConvCpltCallback+0x3b4>)
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_ADC_ConvCpltCallback+0x3b8>)
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d90a      	bls.n	800452a <HAL_ADC_ConvCpltCallback+0x2f6>
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a36      	ldr	r2, [pc, #216]	; (80045f4 <HAL_ADC_ConvCpltCallback+0x3c0>)
 800451a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <HAL_ADC_ConvCpltCallback+0x3b8>)
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d201      	bcs.n	800452a <HAL_ADC_ConvCpltCallback+0x2f6>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_ADC_ConvCpltCallback+0x2f8>
 800452a:	2300      	movs	r3, #0
 800452c:	73bb      	strb	r3, [r7, #14]

				if (trigger && adc1_length != 0) {
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d021      	beq.n	8004578 <HAL_ADC_ConvCpltCallback+0x344>
 8004534:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01d      	beq.n	8004578 <HAL_ADC_ConvCpltCallback+0x344>
					if (!event_trigger1_detected) {
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_ADC_ConvCpltCallback+0x3c4>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_ADC_ConvCpltCallback+0x326>
						adc1_length = 0;
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
						adc1_time_delta = DWT->CYCCNT;
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_ADC_ConvCpltCallback+0x3c8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <HAL_ADC_ConvCpltCallback+0x3cc>)
 8004550:	6013      	str	r3, [r2, #0]
						event_trigger1_detected = 1;
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <HAL_ADC_ConvCpltCallback+0x3c4>)
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	e00e      	b.n	8004578 <HAL_ADC_ConvCpltCallback+0x344>
					} else if (!adc_period1_detected) {
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_ADC_ConvCpltCallback+0x3d0>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_ADC_ConvCpltCallback+0x344>
						adc_period[1] = adc1_time[adc1_length];
 8004564:	4b22      	ldr	r3, [pc, #136]	; (80045f0 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <HAL_ADC_ConvCpltCallback+0x3d4>)
 800456a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456e:	4a27      	ldr	r2, [pc, #156]	; (800460c <HAL_ADC_ConvCpltCallback+0x3d8>)
 8004570:	6053      	str	r3, [r2, #4]
						adc_period1_detected = 1;
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_ADC_ConvCpltCallback+0x3d0>)
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
					}
				}

				adc1_prev = adc_data[1] * ADC_CHANNEL1_SCALE;
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_ADC_ConvCpltCallback+0x3dc>)
 800457a:	885b      	ldrh	r3, [r3, #2]
 800457c:	b29a      	uxth	r2, r3
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_ADC_ConvCpltCallback+0x3b4>)
 8004580:	801a      	strh	r2, [r3, #0]
				adc1_length++;
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_ADC_ConvCpltCallback+0x3bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_ADC_ConvCpltCallback+0x3bc>)
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e002      	b.n	8004594 <HAL_ADC_ConvCpltCallback+0x360>

			} else
				adc1_filled = 1;
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_ADC_ConvCpltCallback+0x3e0>)
 8004590:	2201      	movs	r2, #1
 8004592:	701a      	strb	r2, [r3, #0]
    	}

		if (adc0_filled && adc1_filled) {
 8004594:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_ADC_ConvCpltCallback+0x3e4>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <HAL_ADC_ConvCpltCallback+0x390>
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_ADC_ConvCpltCallback+0x3e0>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_ADC_ConvCpltCallback+0x390>
			event_adc = 1;
 80045a8:	4b1c      	ldr	r3, [pc, #112]	; (800461c <HAL_ADC_ConvCpltCallback+0x3e8>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]

	    	if (!adc_immediate) {
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_ADC_ConvCpltCallback+0x3ec>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d114      	bne.n	80045e0 <HAL_ADC_ConvCpltCallback+0x3ac>
				HAL_TIM_Base_Stop_IT(&htim10);
 80045b6:	481b      	ldr	r0, [pc, #108]	; (8004624 <HAL_ADC_ConvCpltCallback+0x3f0>)
 80045b8:	f002 fcae 	bl	8006f18 <HAL_TIM_Base_Stop_IT>
				adc_available = 1;
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_ADC_ConvCpltCallback+0x3f4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
	    	}

    		return;
 80045c2:	e00d      	b.n	80045e0 <HAL_ADC_ConvCpltCallback+0x3ac>
		}

		if (adc_immediate)
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_ADC_ConvCpltCallback+0x3ec>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_ADC_ConvCpltCallback+0x3a4>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 80045cc:	2202      	movs	r2, #2
 80045ce:	4910      	ldr	r1, [pc, #64]	; (8004610 <HAL_ADC_ConvCpltCallback+0x3dc>)
 80045d0:	4816      	ldr	r0, [pc, #88]	; (800462c <HAL_ADC_ConvCpltCallback+0x3f8>)
 80045d2:	f000 fa51 	bl	8004a78 <HAL_ADC_Start_DMA>
 80045d6:	e004      	b.n	80045e2 <HAL_ADC_ConvCpltCallback+0x3ae>
		else
			adc_available = 1;
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_ADC_ConvCpltCallback+0x3f4>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e000      	b.n	80045e2 <HAL_ADC_ConvCpltCallback+0x3ae>
    		return;
 80045e0:	bf00      	nop
    }
}
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20001c9e 	.word	0x20001c9e
 80045ec:	2000002e 	.word	0x2000002e
 80045f0:	20000474 	.word	0x20000474
 80045f4:	2000188c 	.word	0x2000188c
 80045f8:	2000003a 	.word	0x2000003a
 80045fc:	e0001000 	.word	0xe0001000
 8004600:	20001c98 	.word	0x20001c98
 8004604:	20000489 	.word	0x20000489
 8004608:	20000c8c 	.word	0x20000c8c
 800460c:	20000480 	.word	0x20000480
 8004610:	20000468 	.word	0x20000468
 8004614:	20000010 	.word	0x20000010
 8004618:	20000478 	.word	0x20000478
 800461c:	20001c8d 	.word	0x20001c8d
 8004620:	20000018 	.word	0x20000018
 8004624:	20000404 	.word	0x20000404
 8004628:	20000011 	.word	0x20000011
 800462c:	2000022c 	.word	0x2000022c

08004630 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (adc_available) {
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_PeriodElapsedCallback+0x2c>
			adc_available = 0;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_data, 2);
 8004652:	2202      	movs	r2, #2
 8004654:	4905      	ldr	r1, [pc, #20]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004656:	4806      	ldr	r0, [pc, #24]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004658:	f000 fa0e 	bl	8004a78 <HAL_ADC_Start_DMA>
		}
	}
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40014400 	.word	0x40014400
 8004668:	20000011 	.word	0x20000011
 800466c:	20000468 	.word	0x20000468
 8004670:	2000022c 	.word	0x2000022c

08004674 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON0_Pin)
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d102      	bne.n	800468a <HAL_GPIO_EXTI_Callback+0x16>
		event_button0 = 1;
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_GPIO_EXTI_Callback+0x40>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]

	if (GPIO_Pin == BUTTON1_Pin)
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004690:	d102      	bne.n	8004698 <HAL_GPIO_EXTI_Callback+0x24>
		event_button1 = 1;
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_GPIO_EXTI_Callback+0x44>)
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]

	if (GPIO_Pin == BUTTON2_Pin)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469e:	d102      	bne.n	80046a6 <HAL_GPIO_EXTI_Callback+0x32>
		event_button2 = 1;
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_GPIO_EXTI_Callback+0x48>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20001c8e 	.word	0x20001c8e
 80046b8:	20001c8f 	.word	0x20001c8f
 80046bc:	20001c90 	.word	0x20001c90

080046c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return 1;
 80046c4:	2301      	movs	r3, #1
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_kill>:

int _kill(int pid, int sig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046da:	f004 f969 	bl	80089b0 <__errno>
 80046de:	4603      	mov	r3, r0
 80046e0:	2216      	movs	r2, #22
 80046e2:	601a      	str	r2, [r3, #0]
  return -1;
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_exit>:

void _exit (int status)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff ffe7 	bl	80046d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004702:	e7fe      	b.n	8004702 <_exit+0x12>

08004704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e00a      	b.n	800472c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004716:	f3af 8000 	nop.w
 800471a:	4601      	mov	r1, r0
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	60ba      	str	r2, [r7, #8]
 8004722:	b2ca      	uxtb	r2, r1
 8004724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	dbf0      	blt.n	8004716 <_read+0x12>
  }

  return len;
 8004734:	687b      	ldr	r3, [r7, #4]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e009      	b.n	8004764 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	60ba      	str	r2, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3301      	adds	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	dbf1      	blt.n	8004750 <_write+0x12>
  }
  return len;
 800476c:	687b      	ldr	r3, [r7, #4]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_close>:

int _close(int file)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800479e:	605a      	str	r2, [r3, #4]
  return 0;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <_isatty>:

int _isatty(int file)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047b6:	2301      	movs	r3, #1
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <_sbrk+0x5c>)
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <_sbrk+0x60>)
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <_sbrk+0x64>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <_sbrk+0x64>)
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <_sbrk+0x68>)
 8004800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <_sbrk+0x64>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	429a      	cmp	r2, r3
 800480e:	d207      	bcs.n	8004820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004810:	f004 f8ce 	bl	80089b0 <__errno>
 8004814:	4603      	mov	r3, r0
 8004816:	220c      	movs	r2, #12
 8004818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800481e:	e009      	b.n	8004834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <_sbrk+0x64>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <_sbrk+0x64>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	4a05      	ldr	r2, [pc, #20]	; (8004844 <_sbrk+0x64>)
 8004830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20020000 	.word	0x20020000
 8004840:	00000400 	.word	0x00000400
 8004844:	20001ca0 	.word	0x20001ca0
 8004848:	20001df8 	.word	0x20001df8

0800484c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <SystemInit+0x20>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <SystemInit+0x20>)
 8004858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800485c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004874:	480d      	ldr	r0, [pc, #52]	; (80048ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004876:	490e      	ldr	r1, [pc, #56]	; (80048b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004878:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800487a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800487c:	e002      	b.n	8004884 <LoopCopyDataInit>

0800487e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800487e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004882:	3304      	adds	r3, #4

08004884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004888:	d3f9      	bcc.n	800487e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800488a:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800488c:	4c0b      	ldr	r4, [pc, #44]	; (80048bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800488e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004890:	e001      	b.n	8004896 <LoopFillZerobss>

08004892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004894:	3204      	adds	r2, #4

08004896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004898:	d3fb      	bcc.n	8004892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800489a:	f7ff ffd7 	bl	800484c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800489e:	f004 f88d 	bl	80089bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048a2:	f7fc ffc1 	bl	8001828 <main>
  bx  lr    
 80048a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80048a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048b0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80048b4:	0800c5b4 	.word	0x0800c5b4
  ldr r2, =_sbss
 80048b8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80048bc:	20001df4 	.word	0x20001df4

080048c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048c0:	e7fe      	b.n	80048c0 <ADC_IRQHandler>
	...

080048c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_Init+0x40>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0d      	ldr	r2, [pc, #52]	; (8004904 <HAL_Init+0x40>)
 80048ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_Init+0x40>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <HAL_Init+0x40>)
 80048da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_Init+0x40>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a07      	ldr	r2, [pc, #28]	; (8004904 <HAL_Init+0x40>)
 80048e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ec:	2003      	movs	r0, #3
 80048ee:	f000 fda1 	bl	8005434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048f2:	200f      	movs	r0, #15
 80048f4:	f000 f808 	bl	8004908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048f8:	f7ff fa3c 	bl	8003d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023c00 	.word	0x40023c00

08004908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_InitTick+0x54>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_InitTick+0x58>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800491e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fdb9 	bl	800549e <HAL_SYSTICK_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e00e      	b.n	8004954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	d80a      	bhi.n	8004952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800493c:	2200      	movs	r2, #0
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004944:	f000 fd81 	bl	800544a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004948:	4a06      	ldr	r2, [pc, #24]	; (8004964 <HAL_InitTick+0x5c>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	2000003c 	.word	0x2000003c
 8004960:	20000044 	.word	0x20000044
 8004964:	20000040 	.word	0x20000040

08004968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_IncTick+0x20>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_IncTick+0x24>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4413      	add	r3, r2
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <HAL_IncTick+0x24>)
 800497a:	6013      	str	r3, [r2, #0]
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000044 	.word	0x20000044
 800498c:	20001ca4 	.word	0x20001ca4

08004990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return uwTick;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_GetTick+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20001ca4 	.word	0x20001ca4

080049a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049b0:	f7ff ffee 	bl	8004990 <HAL_GetTick>
 80049b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c0:	d005      	beq.n	80049ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_Delay+0x44>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049ce:	bf00      	nop
 80049d0:	f7ff ffde 	bl	8004990 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d8f7      	bhi.n	80049d0 <HAL_Delay+0x28>
  {
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000044 	.word	0x20000044

080049f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e033      	b.n	8004a6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff f9d8 	bl	8003dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d118      	bne.n	8004a60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a36:	f023 0302 	bic.w	r3, r3, #2
 8004a3a:	f043 0202 	orr.w	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 faa8 	bl	8004f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a5e:	e001      	b.n	8004a64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_Start_DMA+0x1e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0ce      	b.n	8004c34 <HAL_ADC_Start_DMA+0x1bc>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d018      	beq.n	8004ade <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004abc:	4b5f      	ldr	r3, [pc, #380]	; (8004c3c <HAL_ADC_Start_DMA+0x1c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5f      	ldr	r2, [pc, #380]	; (8004c40 <HAL_ADC_Start_DMA+0x1c8>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0c9a      	lsrs	r2, r3, #18
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ad0:	e002      	b.n	8004ad8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f9      	bne.n	8004ad2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aec:	d107      	bne.n	8004afe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 8086 	bne.w	8004c1a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d106      	bne.n	8004b5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b52:	f023 0206 	bic.w	r2, r3, #6
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
 8004b5a:	e002      	b.n	8004b62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b6a:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <HAL_ADC_Start_DMA+0x1cc>)
 8004b6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	4a35      	ldr	r2, [pc, #212]	; (8004c48 <HAL_ADC_Start_DMA+0x1d0>)
 8004b74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	4a34      	ldr	r2, [pc, #208]	; (8004c4c <HAL_ADC_Start_DMA+0x1d4>)
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	4a33      	ldr	r2, [pc, #204]	; (8004c50 <HAL_ADC_Start_DMA+0x1d8>)
 8004b84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	334c      	adds	r3, #76	; 0x4c
 8004bba:	4619      	mov	r1, r3
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f000 fd28 	bl	8005614 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d129      	bne.n	8004c32 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bec:	609a      	str	r2, [r3, #8]
 8004bee:	e020      	b.n	8004c32 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <HAL_ADC_Start_DMA+0x1dc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d11b      	bne.n	8004c32 <HAL_ADC_Start_DMA+0x1ba>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d114      	bne.n	8004c32 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	e00b      	b.n	8004c32 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0210 	orr.w	r2, r3, #16
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f043 0201 	orr.w	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	2000003c 	.word	0x2000003c
 8004c40:	431bde83 	.word	0x431bde83
 8004c44:	40012300 	.word	0x40012300
 8004c48:	08005191 	.word	0x08005191
 8004c4c:	0800524b 	.word	0x0800524b
 8004c50:	08005267 	.word	0x08005267
 8004c54:	40012000 	.word	0x40012000

08004c58 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADC_Stop_DMA+0x1a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e048      	b.n	8004d04 <HAL_ADC_Stop_DMA+0xac>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d130      	bne.n	8004cfa <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ca6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fd02 	bl	80056c4 <HAL_DMA_Abort>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004ce4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e113      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x244>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d925      	bls.n	8004dac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68d9      	ldr	r1, [r3, #12]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	3b1e      	subs	r3, #30
 8004d76:	2207      	movs	r2, #7
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	400a      	ands	r2, r1
 8004d84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68d9      	ldr	r1, [r3, #12]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4618      	mov	r0, r3
 8004d98:	4603      	mov	r3, r0
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4403      	add	r3, r0
 8004d9e:	3b1e      	subs	r3, #30
 8004da0:	409a      	lsls	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e022      	b.n	8004df2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6919      	ldr	r1, [r3, #16]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	400a      	ands	r2, r1
 8004dce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6919      	ldr	r1, [r3, #16]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4618      	mov	r0, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4403      	add	r3, r0
 8004de8:	409a      	lsls	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d824      	bhi.n	8004e44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	3b05      	subs	r3, #5
 8004e0c:	221f      	movs	r2, #31
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43da      	mvns	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	400a      	ands	r2, r1
 8004e1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	4618      	mov	r0, r3
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	3b05      	subs	r3, #5
 8004e36:	fa00 f203 	lsl.w	r2, r0, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	635a      	str	r2, [r3, #52]	; 0x34
 8004e42:	e04c      	b.n	8004ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	d824      	bhi.n	8004e96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3b23      	subs	r3, #35	; 0x23
 8004e5e:	221f      	movs	r2, #31
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43da      	mvns	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	3b23      	subs	r3, #35	; 0x23
 8004e88:	fa00 f203 	lsl.w	r2, r0, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
 8004e94:	e023      	b.n	8004ede <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b41      	subs	r3, #65	; 0x41
 8004ea8:	221f      	movs	r2, #31
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	3b41      	subs	r3, #65	; 0x41
 8004ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ede:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <HAL_ADC_ConfigChannel+0x250>)
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a28      	ldr	r2, [pc, #160]	; (8004f88 <HAL_ADC_ConfigChannel+0x254>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10f      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x1d8>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b12      	cmp	r3, #18
 8004ef2:	d10b      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_ADC_ConfigChannel+0x254>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d12b      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x23a>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <HAL_ADC_ConfigChannel+0x258>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <HAL_ADC_ConfigChannel+0x1f4>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b11      	cmp	r3, #17
 8004f26:	d122      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_ADC_ConfigChannel+0x258>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d111      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_ADC_ConfigChannel+0x25c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a11      	ldr	r2, [pc, #68]	; (8004f94 <HAL_ADC_ConfigChannel+0x260>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	0c9a      	lsrs	r2, r3, #18
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f60:	e002      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f9      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40012300 	.word	0x40012300
 8004f88:	40012000 	.word	0x40012000
 8004f8c:	10000012 	.word	0x10000012
 8004f90:	2000003c 	.word	0x2000003c
 8004f94:	431bde83 	.word	0x431bde83

08004f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fa0:	4b79      	ldr	r3, [pc, #484]	; (8005188 <ADC_Init+0x1f0>)
 8004fa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	4a58      	ldr	r2, [pc, #352]	; (800518c <ADC_Init+0x1f4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d022      	beq.n	8005076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800503e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	e00f      	b.n	8005096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0202 	bic.w	r2, r2, #2
 80050a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6899      	ldr	r1, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7e1b      	ldrb	r3, [r3, #24]
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	3b01      	subs	r3, #1
 80050f0:	035a      	lsls	r2, r3, #13
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	e007      	b.n	800510c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	3b01      	subs	r3, #1
 8005128:	051a      	lsls	r2, r3, #20
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800514e:	025a      	lsls	r2, r3, #9
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	029a      	lsls	r2, r3, #10
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40012300 	.word	0x40012300
 800518c:	0f000001 	.word	0x0f000001

08005190 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13c      	bne.n	8005224 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d12b      	bne.n	800521c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d127      	bne.n	800521c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d006      	beq.n	80051e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d119      	bne.n	800521c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0220 	bic.w	r2, r2, #32
 80051f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0201 	orr.w	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff f809 	bl	8004234 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005222:	e00e      	b.n	8005242 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fd75 	bl	8004d20 <HAL_ADC_ErrorCallback>
}
 8005236:	e004      	b.n	8005242 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fd57 	bl	8004d0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2240      	movs	r2, #64	; 0x40
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff fd4a 	bl	8004d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <__NVIC_SetPriorityGrouping+0x44>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052b0:	4013      	ands	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052c6:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <__NVIC_SetPriorityGrouping+0x44>)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	60d3      	str	r3, [r2, #12]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <__NVIC_GetPriorityGrouping+0x18>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	f003 0307 	and.w	r3, r3, #7
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005306:	2b00      	cmp	r3, #0
 8005308:	db0b      	blt.n	8005322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	f003 021f 	and.w	r2, r3, #31
 8005310:	4907      	ldr	r1, [pc, #28]	; (8005330 <__NVIC_EnableIRQ+0x38>)
 8005312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2001      	movs	r0, #1
 800531a:	fa00 f202 	lsl.w	r2, r0, r2
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e100 	.word	0xe000e100

08005334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005344:	2b00      	cmp	r3, #0
 8005346:	db0a      	blt.n	800535e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	490c      	ldr	r1, [pc, #48]	; (8005380 <__NVIC_SetPriority+0x4c>)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	0112      	lsls	r2, r2, #4
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	440b      	add	r3, r1
 8005358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800535c:	e00a      	b.n	8005374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4908      	ldr	r1, [pc, #32]	; (8005384 <__NVIC_SetPriority+0x50>)
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	3b04      	subs	r3, #4
 800536c:	0112      	lsls	r2, r2, #4
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	440b      	add	r3, r1
 8005372:	761a      	strb	r2, [r3, #24]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000e100 	.word	0xe000e100
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f1c3 0307 	rsb	r3, r3, #7
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	bf28      	it	cs
 80053a6:	2304      	movcs	r3, #4
 80053a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3304      	adds	r3, #4
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d902      	bls.n	80053b8 <NVIC_EncodePriority+0x30>
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3b03      	subs	r3, #3
 80053b6:	e000      	b.n	80053ba <NVIC_EncodePriority+0x32>
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43da      	mvns	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	401a      	ands	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	43d9      	mvns	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e0:	4313      	orrs	r3, r2
         );
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005400:	d301      	bcc.n	8005406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005402:	2301      	movs	r3, #1
 8005404:	e00f      	b.n	8005426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <SysTick_Config+0x40>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3b01      	subs	r3, #1
 800540c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800540e:	210f      	movs	r1, #15
 8005410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005414:	f7ff ff8e 	bl	8005334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <SysTick_Config+0x40>)
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <SysTick_Config+0x40>)
 8005420:	2207      	movs	r2, #7
 8005422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	e000e010 	.word	0xe000e010

08005434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ff29 	bl	8005294 <__NVIC_SetPriorityGrouping>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	4603      	mov	r3, r0
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800545c:	f7ff ff3e 	bl	80052dc <__NVIC_GetPriorityGrouping>
 8005460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7ff ff8e 	bl	8005388 <NVIC_EncodePriority>
 800546c:	4602      	mov	r2, r0
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff5d 	bl	8005334 <__NVIC_SetPriority>
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800548c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff31 	bl	80052f8 <__NVIC_EnableIRQ>
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff ffa2 	bl	80053f0 <SysTick_Config>
 80054ac:	4603      	mov	r3, r0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054c4:	f7ff fa64 	bl	8004990 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e099      	b.n	8005608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f4:	e00f      	b.n	8005516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054f6:	f7ff fa4b 	bl	8004990 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b05      	cmp	r3, #5
 8005502:	d908      	bls.n	8005516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2203      	movs	r2, #3
 800550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e078      	b.n	8005608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e8      	bne.n	80054f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4b38      	ldr	r3, [pc, #224]	; (8005610 <HAL_DMA_Init+0x158>)
 8005530:	4013      	ands	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b04      	cmp	r3, #4
 800556e:	d107      	bne.n	8005580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	4313      	orrs	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d117      	bne.n	80055da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fadf 	bl	8005b80 <DMA_CheckFifoParam>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055d6:	2301      	movs	r3, #1
 80055d8:	e016      	b.n	8005608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fa96 	bl	8005b14 <DMA_CalcBaseAndBitshift>
 80055e8:	4603      	mov	r3, r0
 80055ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f0:	223f      	movs	r2, #63	; 0x3f
 80055f2:	409a      	lsls	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	f010803f 	.word	0xf010803f

08005614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_DMA_Start_IT+0x26>
 8005636:	2302      	movs	r3, #2
 8005638:	e040      	b.n	80056bc <HAL_DMA_Start_IT+0xa8>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d12f      	bne.n	80056ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fa28 	bl	8005ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566c:	223f      	movs	r2, #63	; 0x3f
 800566e:	409a      	lsls	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0216 	orr.w	r2, r2, #22
 8005682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e005      	b.n	80056ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056d2:	f7ff f95d 	bl	8004990 <HAL_GetTick>
 80056d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d008      	beq.n	80056f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e052      	b.n	800579c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0216 	bic.w	r2, r2, #22
 8005704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <HAL_DMA_Abort+0x62>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0208 	bic.w	r2, r2, #8
 8005734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005746:	e013      	b.n	8005770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005748:	f7ff f922 	bl	8004990 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b05      	cmp	r3, #5
 8005754:	d90c      	bls.n	8005770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2203      	movs	r2, #3
 8005760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e015      	b.n	800579c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e4      	bne.n	8005748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	223f      	movs	r2, #63	; 0x3f
 8005784:	409a      	lsls	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057b0:	4b8e      	ldr	r3, [pc, #568]	; (80059ec <HAL_DMA_IRQHandler+0x248>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a8e      	ldr	r2, [pc, #568]	; (80059f0 <HAL_DMA_IRQHandler+0x24c>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	0a9b      	lsrs	r3, r3, #10
 80057bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ce:	2208      	movs	r2, #8
 80057d0:	409a      	lsls	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01a      	beq.n	8005810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d013      	beq.n	8005810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0204 	bic.w	r2, r2, #4
 80057f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	2208      	movs	r2, #8
 80057fe:	409a      	lsls	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d012      	beq.n	8005846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	2201      	movs	r2, #1
 8005834:	409a      	lsls	r2, r3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f043 0202 	orr.w	r2, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	2204      	movs	r2, #4
 800584c:	409a      	lsls	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d012      	beq.n	800587c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005868:	2204      	movs	r2, #4
 800586a:	409a      	lsls	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	f043 0204 	orr.w	r2, r3, #4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	2210      	movs	r2, #16
 8005882:	409a      	lsls	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4013      	ands	r3, r2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d043      	beq.n	8005914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d03c      	beq.n	8005914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	2210      	movs	r2, #16
 80058a0:	409a      	lsls	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d018      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d024      	beq.n	8005914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
 80058d2:	e01f      	b.n	8005914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4798      	blx	r3
 80058e4:	e016      	b.n	8005914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d107      	bne.n	8005904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0208 	bic.w	r2, r2, #8
 8005902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	2220      	movs	r2, #32
 800591a:	409a      	lsls	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 808f 	beq.w	8005a44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8087 	beq.w	8005a44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	2220      	movs	r2, #32
 800593c:	409a      	lsls	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b05      	cmp	r3, #5
 800594c:	d136      	bne.n	80059bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0216 	bic.w	r2, r2, #22
 800595c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800596c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <HAL_DMA_IRQHandler+0x1da>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0208 	bic.w	r2, r2, #8
 800598c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	223f      	movs	r2, #63	; 0x3f
 8005994:	409a      	lsls	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d07e      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	4798      	blx	r3
        }
        return;
 80059ba:	e079      	b.n	8005ab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01d      	beq.n	8005a06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10d      	bne.n	80059f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d031      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
 80059e8:	e02c      	b.n	8005a44 <HAL_DMA_IRQHandler+0x2a0>
 80059ea:	bf00      	nop
 80059ec:	2000003c 	.word	0x2000003c
 80059f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d023      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4798      	blx	r3
 8005a04:	e01e      	b.n	8005a44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10f      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0210 	bic.w	r2, r2, #16
 8005a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d032      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d022      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2205      	movs	r2, #5
 8005a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d307      	bcc.n	8005a8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f2      	bne.n	8005a70 <HAL_DMA_IRQHandler+0x2cc>
 8005a8a:	e000      	b.n	8005a8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
 8005aae:	e000      	b.n	8005ab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ab0:	bf00      	nop
    }
  }
}
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d108      	bne.n	8005af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005af6:	e007      	b.n	8005b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	3b10      	subs	r3, #16
 8005b24:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <DMA_CalcBaseAndBitshift+0x64>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <DMA_CalcBaseAndBitshift+0x68>)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d909      	bls.n	8005b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	1d1a      	adds	r2, r3, #4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	659a      	str	r2, [r3, #88]	; 0x58
 8005b54:	e007      	b.n	8005b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	aaaaaaab 	.word	0xaaaaaaab
 8005b7c:	0800c22c 	.word	0x0800c22c

08005b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d11f      	bne.n	8005bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d856      	bhi.n	8005c4e <DMA_CheckFifoParam+0xce>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <DMA_CheckFifoParam+0x28>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bcb 	.word	0x08005bcb
 8005bb0:	08005bb9 	.word	0x08005bb9
 8005bb4:	08005c4f 	.word	0x08005c4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d046      	beq.n	8005c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc8:	e043      	b.n	8005c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bd2:	d140      	bne.n	8005c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bd8:	e03d      	b.n	8005c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be2:	d121      	bne.n	8005c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d837      	bhi.n	8005c5a <DMA_CheckFifoParam+0xda>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <DMA_CheckFifoParam+0x70>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c07 	.word	0x08005c07
 8005bf8:	08005c01 	.word	0x08005c01
 8005bfc:	08005c19 	.word	0x08005c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e030      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d025      	beq.n	8005c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c16:	e022      	b.n	8005c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c20:	d11f      	bne.n	8005c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c26:	e01c      	b.n	8005c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d903      	bls.n	8005c36 <DMA_CheckFifoParam+0xb6>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d003      	beq.n	8005c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c34:	e018      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3a:	e015      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c4c:	e00b      	b.n	8005c66 <DMA_CheckFifoParam+0xe6>
      break;
 8005c4e:	bf00      	nop
 8005c50:	e00a      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      break;
 8005c52:	bf00      	nop
 8005c54:	e008      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      break;
 8005c56:	bf00      	nop
 8005c58:	e006      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e004      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e002      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
      break;
 8005c66:	bf00      	nop
    }
  } 
  
  return status; 
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop

08005c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	e159      	b.n	8005f48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c94:	2201      	movs	r2, #1
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	f040 8148 	bne.w	8005f42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d005      	beq.n	8005cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d130      	bne.n	8005d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d00:	2201      	movs	r2, #1
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	f003 0201 	and.w	r2, r3, #1
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d017      	beq.n	8005d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	2203      	movs	r2, #3
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d123      	bne.n	8005dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	08da      	lsrs	r2, r3, #3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3208      	adds	r2, #8
 8005d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	220f      	movs	r2, #15
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4013      	ands	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	08da      	lsrs	r2, r3, #3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3208      	adds	r2, #8
 8005db6:	69b9      	ldr	r1, [r7, #24]
 8005db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 0203 	and.w	r2, r3, #3
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a2 	beq.w	8005f42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	4b57      	ldr	r3, [pc, #348]	; (8005f60 <HAL_GPIO_Init+0x2e8>)
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	4a56      	ldr	r2, [pc, #344]	; (8005f60 <HAL_GPIO_Init+0x2e8>)
 8005e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e0e:	4b54      	ldr	r3, [pc, #336]	; (8005f60 <HAL_GPIO_Init+0x2e8>)
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e1a:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <HAL_GPIO_Init+0x2ec>)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	3302      	adds	r3, #2
 8005e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	220f      	movs	r2, #15
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43db      	mvns	r3, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a49      	ldr	r2, [pc, #292]	; (8005f68 <HAL_GPIO_Init+0x2f0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d019      	beq.n	8005e7a <HAL_GPIO_Init+0x202>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a48      	ldr	r2, [pc, #288]	; (8005f6c <HAL_GPIO_Init+0x2f4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_GPIO_Init+0x1fe>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a47      	ldr	r2, [pc, #284]	; (8005f70 <HAL_GPIO_Init+0x2f8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00d      	beq.n	8005e72 <HAL_GPIO_Init+0x1fa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a46      	ldr	r2, [pc, #280]	; (8005f74 <HAL_GPIO_Init+0x2fc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <HAL_GPIO_Init+0x1f6>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a45      	ldr	r2, [pc, #276]	; (8005f78 <HAL_GPIO_Init+0x300>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d101      	bne.n	8005e6a <HAL_GPIO_Init+0x1f2>
 8005e66:	2304      	movs	r3, #4
 8005e68:	e008      	b.n	8005e7c <HAL_GPIO_Init+0x204>
 8005e6a:	2307      	movs	r3, #7
 8005e6c:	e006      	b.n	8005e7c <HAL_GPIO_Init+0x204>
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e004      	b.n	8005e7c <HAL_GPIO_Init+0x204>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e002      	b.n	8005e7c <HAL_GPIO_Init+0x204>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <HAL_GPIO_Init+0x204>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	f002 0203 	and.w	r2, r2, #3
 8005e82:	0092      	lsls	r2, r2, #2
 8005e84:	4093      	lsls	r3, r2
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e8c:	4935      	ldr	r1, [pc, #212]	; (8005f64 <HAL_GPIO_Init+0x2ec>)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	089b      	lsrs	r3, r3, #2
 8005e92:	3302      	adds	r3, #2
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e9a:	4b38      	ldr	r3, [pc, #224]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ebe:	4a2f      	ldr	r2, [pc, #188]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ec4:	4b2d      	ldr	r3, [pc, #180]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ee8:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005eee:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f12:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4013      	ands	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f3c:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <HAL_GPIO_Init+0x304>)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b0f      	cmp	r3, #15
 8005f4c:	f67f aea2 	bls.w	8005c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	3724      	adds	r7, #36	; 0x24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40023800 	.word	0x40023800
 8005f64:	40013800 	.word	0x40013800
 8005f68:	40020000 	.word	0x40020000
 8005f6c:	40020400 	.word	0x40020400
 8005f70:	40020800 	.word	0x40020800
 8005f74:	40020c00 	.word	0x40020c00
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40013c00 	.word	0x40013c00

08005f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f90:	787b      	ldrb	r3, [r7, #1]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f96:	887a      	ldrh	r2, [r7, #2]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f9c:	e003      	b.n	8005fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	041a      	lsls	r2, r3, #16
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	619a      	str	r2, [r3, #24]
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d006      	beq.n	8005fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fca:	4a05      	ldr	r2, [pc, #20]	; (8005fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fb4e 	bl	8004674 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40013c00 	.word	0x40013c00

08005fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e267      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d075      	beq.n	80060ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006002:	4b88      	ldr	r3, [pc, #544]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b04      	cmp	r3, #4
 800600c:	d00c      	beq.n	8006028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800600e:	4b85      	ldr	r3, [pc, #532]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006016:	2b08      	cmp	r3, #8
 8006018:	d112      	bne.n	8006040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800601a:	4b82      	ldr	r3, [pc, #520]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006026:	d10b      	bne.n	8006040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006028:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d05b      	beq.n	80060ec <HAL_RCC_OscConfig+0x108>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d157      	bne.n	80060ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e242      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006048:	d106      	bne.n	8006058 <HAL_RCC_OscConfig+0x74>
 800604a:	4b76      	ldr	r3, [pc, #472]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a75      	ldr	r2, [pc, #468]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e01d      	b.n	8006094 <HAL_RCC_OscConfig+0xb0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0x98>
 8006062:	4b70      	ldr	r3, [pc, #448]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6f      	ldr	r2, [pc, #444]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a6c      	ldr	r2, [pc, #432]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e00b      	b.n	8006094 <HAL_RCC_OscConfig+0xb0>
 800607c:	4b69      	ldr	r3, [pc, #420]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a68      	ldr	r2, [pc, #416]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	4b66      	ldr	r3, [pc, #408]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a65      	ldr	r2, [pc, #404]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800608e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d013      	beq.n	80060c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609c:	f7fe fc78 	bl	8004990 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a4:	f7fe fc74 	bl	8004990 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e207      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0xc0>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fe fc64 	bl	8004990 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060cc:	f7fe fc60 	bl	8004990 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b64      	cmp	r3, #100	; 0x64
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e1f3      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	4b51      	ldr	r3, [pc, #324]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0xe8>
 80060ea:	e000      	b.n	80060ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d063      	beq.n	80061c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fa:	4b4a      	ldr	r3, [pc, #296]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006106:	4b47      	ldr	r3, [pc, #284]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800610e:	2b08      	cmp	r3, #8
 8006110:	d11c      	bne.n	800614c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006112:	4b44      	ldr	r3, [pc, #272]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d116      	bne.n	800614c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800611e:	4b41      	ldr	r3, [pc, #260]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_RCC_OscConfig+0x152>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e1c7      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006136:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4937      	ldr	r1, [pc, #220]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006146:	4313      	orrs	r3, r2
 8006148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614a:	e03a      	b.n	80061c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006154:	4b34      	ldr	r3, [pc, #208]	; (8006228 <HAL_RCC_OscConfig+0x244>)
 8006156:	2201      	movs	r2, #1
 8006158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615a:	f7fe fc19 	bl	8004990 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006162:	f7fe fc15 	bl	8004990 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e1a8      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006174:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f0      	beq.n	8006162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4925      	ldr	r1, [pc, #148]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006190:	4313      	orrs	r3, r2
 8006192:	600b      	str	r3, [r1, #0]
 8006194:	e015      	b.n	80061c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006196:	4b24      	ldr	r3, [pc, #144]	; (8006228 <HAL_RCC_OscConfig+0x244>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fe fbf8 	bl	8004990 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a4:	f7fe fbf4 	bl	8004990 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e187      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b6:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d036      	beq.n	800623c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061d6:	4b15      	ldr	r3, [pc, #84]	; (800622c <HAL_RCC_OscConfig+0x248>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7fe fbd8 	bl	8004990 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061e4:	f7fe fbd4 	bl	8004990 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e167      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80061f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x200>
 8006202:	e01b      	b.n	800623c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006204:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_RCC_OscConfig+0x248>)
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800620a:	f7fe fbc1 	bl	8004990 <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006210:	e00e      	b.n	8006230 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006212:	f7fe fbbd 	bl	8004990 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d907      	bls.n	8006230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e150      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006224:	40023800 	.word	0x40023800
 8006228:	42470000 	.word	0x42470000
 800622c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006230:	4b88      	ldr	r3, [pc, #544]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ea      	bne.n	8006212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8097 	beq.w	8006378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624a:	2300      	movs	r3, #0
 800624c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800624e:	4b81      	ldr	r3, [pc, #516]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10f      	bne.n	800627a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	4b7d      	ldr	r3, [pc, #500]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a7c      	ldr	r2, [pc, #496]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6413      	str	r3, [r2, #64]	; 0x40
 800626a:	4b7a      	ldr	r3, [pc, #488]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627a:	4b77      	ldr	r3, [pc, #476]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d118      	bne.n	80062b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006286:	4b74      	ldr	r3, [pc, #464]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a73      	ldr	r2, [pc, #460]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 800628c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006292:	f7fe fb7d 	bl	8004990 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629a:	f7fe fb79 	bl	8004990 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e10c      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ac:	4b6a      	ldr	r3, [pc, #424]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d106      	bne.n	80062ce <HAL_RCC_OscConfig+0x2ea>
 80062c0:	4b64      	ldr	r3, [pc, #400]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a63      	ldr	r2, [pc, #396]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
 80062cc:	e01c      	b.n	8006308 <HAL_RCC_OscConfig+0x324>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x30c>
 80062d6:	4b5f      	ldr	r3, [pc, #380]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	4a5e      	ldr	r2, [pc, #376]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	6713      	str	r3, [r2, #112]	; 0x70
 80062e2:	4b5c      	ldr	r3, [pc, #368]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	4a5b      	ldr	r2, [pc, #364]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6713      	str	r3, [r2, #112]	; 0x70
 80062ee:	e00b      	b.n	8006308 <HAL_RCC_OscConfig+0x324>
 80062f0:	4b58      	ldr	r3, [pc, #352]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a57      	ldr	r2, [pc, #348]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	4b55      	ldr	r3, [pc, #340]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4a54      	ldr	r2, [pc, #336]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006302:	f023 0304 	bic.w	r3, r3, #4
 8006306:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d015      	beq.n	800633c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006310:	f7fe fb3e 	bl	8004990 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006316:	e00a      	b.n	800632e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006318:	f7fe fb3a 	bl	8004990 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e0cb      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632e:	4b49      	ldr	r3, [pc, #292]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ee      	beq.n	8006318 <HAL_RCC_OscConfig+0x334>
 800633a:	e014      	b.n	8006366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800633c:	f7fe fb28 	bl	8004990 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006342:	e00a      	b.n	800635a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006344:	f7fe fb24 	bl	8004990 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e0b5      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1ee      	bne.n	8006344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d105      	bne.n	8006378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800636c:	4b39      	ldr	r3, [pc, #228]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	4a38      	ldr	r2, [pc, #224]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006376:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a1 	beq.w	80064c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006382:	4b34      	ldr	r3, [pc, #208]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b08      	cmp	r3, #8
 800638c:	d05c      	beq.n	8006448 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d141      	bne.n	800641a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006396:	4b31      	ldr	r3, [pc, #196]	; (800645c <HAL_RCC_OscConfig+0x478>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639c:	f7fe faf8 	bl	8004990 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fe faf4 	bl	8004990 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e087      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	4b27      	ldr	r3, [pc, #156]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	3b01      	subs	r3, #1
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	491b      	ldr	r1, [pc, #108]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x478>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f2:	f7fe facd 	bl	8004990 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fa:	f7fe fac9 	bl	8004990 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e05c      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640c:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x416>
 8006418:	e054      	b.n	80064c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <HAL_RCC_OscConfig+0x478>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fe fab6 	bl	8004990 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006428:	f7fe fab2 	bl	8004990 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e045      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x444>
 8006446:	e03d      	b.n	80064c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d107      	bne.n	8006460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e038      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006454:	40023800 	.word	0x40023800
 8006458:	40007000 	.word	0x40007000
 800645c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006460:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <HAL_RCC_OscConfig+0x4ec>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d028      	beq.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006478:	429a      	cmp	r2, r3
 800647a:	d121      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006486:	429a      	cmp	r2, r3
 8006488:	d11a      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006490:	4013      	ands	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006498:	4293      	cmp	r3, r2
 800649a:	d111      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	3b01      	subs	r3, #1
 80064aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d107      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800

080064d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0cc      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064e8:	4b68      	ldr	r3, [pc, #416]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d90c      	bls.n	8006510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f6:	4b65      	ldr	r3, [pc, #404]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fe:	4b63      	ldr	r3, [pc, #396]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e0b8      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d020      	beq.n	800655e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006528:	4b59      	ldr	r3, [pc, #356]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a58      	ldr	r2, [pc, #352]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006540:	4b53      	ldr	r3, [pc, #332]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4a52      	ldr	r2, [pc, #328]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800654a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800654c:	4b50      	ldr	r3, [pc, #320]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	494d      	ldr	r1, [pc, #308]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d044      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d107      	bne.n	8006582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006572:	4b47      	ldr	r3, [pc, #284]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d119      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e07f      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d003      	beq.n	8006592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658e:	2b03      	cmp	r3, #3
 8006590:	d107      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006592:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e06f      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a2:	4b3b      	ldr	r3, [pc, #236]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e067      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 0203 	bic.w	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	4934      	ldr	r1, [pc, #208]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c4:	f7fe f9e4 	bl	8004990 <HAL_GetTick>
 80065c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065cc:	f7fe f9e0 	bl	8004990 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e04f      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e2:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 020c 	and.w	r2, r3, #12
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d1eb      	bne.n	80065cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d20c      	bcs.n	800661c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006602:	4b22      	ldr	r3, [pc, #136]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660a:	4b20      	ldr	r3, [pc, #128]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e032      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4916      	ldr	r1, [pc, #88]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	4313      	orrs	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	490e      	ldr	r1, [pc, #56]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	4313      	orrs	r3, r2
 8006658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800665a:	f000 f821 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 800665e:	4602      	mov	r2, r0
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	490a      	ldr	r1, [pc, #40]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 800666c:	5ccb      	ldrb	r3, [r1, r3]
 800666e:	fa22 f303 	lsr.w	r3, r2, r3
 8006672:	4a09      	ldr	r2, [pc, #36]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1c8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe f944 	bl	8004908 <HAL_InitTick>

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40023c00 	.word	0x40023c00
 8006690:	40023800 	.word	0x40023800
 8006694:	0800c214 	.word	0x0800c214
 8006698:	2000003c 	.word	0x2000003c
 800669c:	20000040 	.word	0x20000040

080066a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b090      	sub	sp, #64	; 0x40
 80066a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b0:	2300      	movs	r3, #0
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066b8:	4b59      	ldr	r3, [pc, #356]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d00d      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0x40>
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	f200 80a1 	bhi.w	800680c <HAL_RCC_GetSysClockFreq+0x16c>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x34>
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d003      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0x3a>
 80066d2:	e09b      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d4:	4b53      	ldr	r3, [pc, #332]	; (8006824 <HAL_RCC_GetSysClockFreq+0x184>)
 80066d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80066d8:	e09b      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066da:	4b53      	ldr	r3, [pc, #332]	; (8006828 <HAL_RCC_GetSysClockFreq+0x188>)
 80066dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066de:	e098      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066e0:	4b4f      	ldr	r3, [pc, #316]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ea:	4b4d      	ldr	r3, [pc, #308]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d028      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f6:	4b4a      	ldr	r3, [pc, #296]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	099b      	lsrs	r3, r3, #6
 80066fc:	2200      	movs	r2, #0
 80066fe:	623b      	str	r3, [r7, #32]
 8006700:	627a      	str	r2, [r7, #36]	; 0x24
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006708:	2100      	movs	r1, #0
 800670a:	4b47      	ldr	r3, [pc, #284]	; (8006828 <HAL_RCC_GetSysClockFreq+0x188>)
 800670c:	fb03 f201 	mul.w	r2, r3, r1
 8006710:	2300      	movs	r3, #0
 8006712:	fb00 f303 	mul.w	r3, r0, r3
 8006716:	4413      	add	r3, r2
 8006718:	4a43      	ldr	r2, [pc, #268]	; (8006828 <HAL_RCC_GetSysClockFreq+0x188>)
 800671a:	fba0 1202 	umull	r1, r2, r0, r2
 800671e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006720:	460a      	mov	r2, r1
 8006722:	62ba      	str	r2, [r7, #40]	; 0x28
 8006724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006726:	4413      	add	r3, r2
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	2200      	movs	r2, #0
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	61fa      	str	r2, [r7, #28]
 8006732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800673a:	f7fa fa3d 	bl	8000bb8 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4613      	mov	r3, r2
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006746:	e053      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006748:	4b35      	ldr	r3, [pc, #212]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	099b      	lsrs	r3, r3, #6
 800674e:	2200      	movs	r2, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	617a      	str	r2, [r7, #20]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800675a:	f04f 0b00 	mov.w	fp, #0
 800675e:	4652      	mov	r2, sl
 8006760:	465b      	mov	r3, fp
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f04f 0100 	mov.w	r1, #0
 800676a:	0159      	lsls	r1, r3, #5
 800676c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006770:	0150      	lsls	r0, r2, #5
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	ebb2 080a 	subs.w	r8, r2, sl
 800677a:	eb63 090b 	sbc.w	r9, r3, fp
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800678a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800678e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006792:	ebb2 0408 	subs.w	r4, r2, r8
 8006796:	eb63 0509 	sbc.w	r5, r3, r9
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	00eb      	lsls	r3, r5, #3
 80067a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067a8:	00e2      	lsls	r2, r4, #3
 80067aa:	4614      	mov	r4, r2
 80067ac:	461d      	mov	r5, r3
 80067ae:	eb14 030a 	adds.w	r3, r4, sl
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	eb45 030b 	adc.w	r3, r5, fp
 80067b8:	607b      	str	r3, [r7, #4]
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067c6:	4629      	mov	r1, r5
 80067c8:	028b      	lsls	r3, r1, #10
 80067ca:	4621      	mov	r1, r4
 80067cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067d0:	4621      	mov	r1, r4
 80067d2:	028a      	lsls	r2, r1, #10
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	2200      	movs	r2, #0
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	60fa      	str	r2, [r7, #12]
 80067e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067e4:	f7fa f9e8 	bl	8000bb8 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4613      	mov	r3, r2
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	3301      	adds	r3, #1
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800680a:	e002      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCC_GetSysClockFreq+0x184>)
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006814:	4618      	mov	r0, r3
 8006816:	3740      	adds	r7, #64	; 0x40
 8006818:	46bd      	mov	sp, r7
 800681a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800681e:	bf00      	nop
 8006820:	40023800 	.word	0x40023800
 8006824:	00f42400 	.word	0x00f42400
 8006828:	017d7840 	.word	0x017d7840

0800682c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_RCC_GetHCLKFreq+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	2000003c 	.word	0x2000003c

08006844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006848:	f7ff fff0 	bl	800682c <HAL_RCC_GetHCLKFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	0a9b      	lsrs	r3, r3, #10
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40023800 	.word	0x40023800
 8006868:	0800c224 	.word	0x0800c224

0800686c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006870:	f7ff ffdc 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0b5b      	lsrs	r3, r3, #13
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4903      	ldr	r1, [pc, #12]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	0800c224 	.word	0x0800c224

08006894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e07b      	b.n	800699e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d108      	bne.n	80068c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b6:	d009      	beq.n	80068cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	61da      	str	r2, [r3, #28]
 80068be:	e005      	b.n	80068cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fd fb00 	bl	8003eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006902:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	ea42 0103 	orr.w	r1, r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0104 	and.w	r1, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	f003 0210 	and.w	r2, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800698c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b088      	sub	sp, #32
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_SPI_Transmit+0x22>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e126      	b.n	8006c16 <HAL_SPI_Transmit+0x270>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d0:	f7fd ffde 	bl	8004990 <HAL_GetTick>
 80069d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d002      	beq.n	80069ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
 80069e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069ea:	e10b      	b.n	8006c04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_Transmit+0x52>
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069fc:	e102      	b.n	8006c04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2203      	movs	r2, #3
 8006a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d10f      	bne.n	8006a66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b40      	cmp	r3, #64	; 0x40
 8006a72:	d007      	beq.n	8006a84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8c:	d14b      	bne.n	8006b26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_SPI_Transmit+0xf6>
 8006a96:	8afb      	ldrh	r3, [r7, #22]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d13e      	bne.n	8006b1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	881a      	ldrh	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	1c9a      	adds	r2, r3, #2
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ac0:	e02b      	b.n	8006b1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d112      	bne.n	8006af6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	881a      	ldrh	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006af4:	e011      	b.n	8006b1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af6:	f7fd ff4b 	bl	8004990 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d803      	bhi.n	8006b0e <HAL_SPI_Transmit+0x168>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b0c:	d102      	bne.n	8006b14 <HAL_SPI_Transmit+0x16e>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b18:	e074      	b.n	8006c04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1ce      	bne.n	8006ac2 <HAL_SPI_Transmit+0x11c>
 8006b24:	e04c      	b.n	8006bc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <HAL_SPI_Transmit+0x18e>
 8006b2e:	8afb      	ldrh	r3, [r7, #22]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d140      	bne.n	8006bb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	7812      	ldrb	r2, [r2, #0]
 8006b40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b5a:	e02c      	b.n	8006bb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d113      	bne.n	8006b92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b90:	e011      	b.n	8006bb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b92:	f7fd fefd 	bl	8004990 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d803      	bhi.n	8006baa <HAL_SPI_Transmit+0x204>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba8:	d102      	bne.n	8006bb0 <HAL_SPI_Transmit+0x20a>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bb4:	e026      	b.n	8006c04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1cd      	bne.n	8006b5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f8b3 	bl	8006d30 <SPI_EndRxTxTransaction>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e000      	b.n	8006c04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c30:	f7fd feae 	bl	8004990 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c40:	f7fd fea6 	bl	8004990 <HAL_GetTick>
 8006c44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c46:	4b39      	ldr	r3, [pc, #228]	; (8006d2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	015b      	lsls	r3, r3, #5
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c56:	e054      	b.n	8006d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c5e:	d050      	beq.n	8006d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c60:	f7fd fe96 	bl	8004990 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	69fa      	ldr	r2, [r7, #28]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d902      	bls.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d13d      	bne.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c8e:	d111      	bne.n	8006cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c98:	d004      	beq.n	8006ca4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca2:	d107      	bne.n	8006cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbc:	d10f      	bne.n	8006cde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e017      	b.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d19b      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000003c 	.word	0x2000003c

08006d30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <SPI_EndRxTxTransaction+0x7c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <SPI_EndRxTxTransaction+0x80>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	0d5b      	lsrs	r3, r3, #21
 8006d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d5a:	d112      	bne.n	8006d82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	2180      	movs	r1, #128	; 0x80
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff ff5a 	bl	8006c20 <SPI_WaitFlagStateUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d016      	beq.n	8006da0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e00f      	b.n	8006da2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d0f2      	beq.n	8006d82 <SPI_EndRxTxTransaction+0x52>
 8006d9c:	e000      	b.n	8006da0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006d9e:	bf00      	nop
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000003c 	.word	0x2000003c
 8006db0:	165e9f81 	.word	0x165e9f81

08006db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e041      	b.n	8006e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fd f972 	bl	80040c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f000 fce4 	bl	80077c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e044      	b.n	8006ef6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1a      	ldr	r2, [pc, #104]	; (8006f08 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <HAL_TIM_Base_Start_IT+0xb8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d111      	bne.n	8006ee4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d010      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee2:	e007      	b.n	8006ef4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40014000 	.word	0x40014000

08006f18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10f      	bne.n	8006f60 <HAL_TIM_Base_Stop_IT+0x48>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	f240 4344 	movw	r3, #1092	; 0x444
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d107      	bne.n	8006f60 <HAL_TIM_Base_Stop_IT+0x48>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0201 	bic.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e041      	b.n	800700c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fc ffed 	bl	8003f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fc03 	bl	80077c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <HAL_TIM_PWM_Start+0x24>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b01      	cmp	r3, #1
 800702e:	bf14      	ite	ne
 8007030:	2301      	movne	r3, #1
 8007032:	2300      	moveq	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	e022      	b.n	800707e <HAL_TIM_PWM_Start+0x6a>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b04      	cmp	r3, #4
 800703c:	d109      	bne.n	8007052 <HAL_TIM_PWM_Start+0x3e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	bf14      	ite	ne
 800704a:	2301      	movne	r3, #1
 800704c:	2300      	moveq	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	e015      	b.n	800707e <HAL_TIM_PWM_Start+0x6a>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b08      	cmp	r3, #8
 8007056:	d109      	bne.n	800706c <HAL_TIM_PWM_Start+0x58>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	bf14      	ite	ne
 8007064:	2301      	movne	r3, #1
 8007066:	2300      	moveq	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	e008      	b.n	800707e <HAL_TIM_PWM_Start+0x6a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	bf14      	ite	ne
 8007078:	2301      	movne	r3, #1
 800707a:	2300      	moveq	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e068      	b.n	8007158 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <HAL_TIM_PWM_Start+0x82>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007094:	e013      	b.n	80070be <HAL_TIM_PWM_Start+0xaa>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b04      	cmp	r3, #4
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_PWM_Start+0x92>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a4:	e00b      	b.n	80070be <HAL_TIM_PWM_Start+0xaa>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_PWM_Start+0xa2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b4:	e003      	b.n	80070be <HAL_TIM_PWM_Start+0xaa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fd86 	bl	8007bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a23      	ldr	r2, [pc, #140]	; (8007160 <HAL_TIM_PWM_Start+0x14c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d107      	bne.n	80070e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <HAL_TIM_PWM_Start+0x14c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d018      	beq.n	8007122 <HAL_TIM_PWM_Start+0x10e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f8:	d013      	beq.n	8007122 <HAL_TIM_PWM_Start+0x10e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_TIM_PWM_Start+0x150>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00e      	beq.n	8007122 <HAL_TIM_PWM_Start+0x10e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a17      	ldr	r2, [pc, #92]	; (8007168 <HAL_TIM_PWM_Start+0x154>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d009      	beq.n	8007122 <HAL_TIM_PWM_Start+0x10e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a16      	ldr	r2, [pc, #88]	; (800716c <HAL_TIM_PWM_Start+0x158>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d004      	beq.n	8007122 <HAL_TIM_PWM_Start+0x10e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a14      	ldr	r2, [pc, #80]	; (8007170 <HAL_TIM_PWM_Start+0x15c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d111      	bne.n	8007146 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b06      	cmp	r3, #6
 8007132:	d010      	beq.n	8007156 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007144:	e007      	b.n	8007156 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40010000 	.word	0x40010000
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40014000 	.word	0x40014000

08007174 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e097      	b.n	80072b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7fc ff15 	bl	8003fcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b8:	f023 0307 	bic.w	r3, r3, #7
 80071bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f000 faf9 	bl	80077c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	4313      	orrs	r3, r2
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007214:	f023 030c 	bic.w	r3, r3, #12
 8007218:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	4313      	orrs	r3, r2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	011a      	lsls	r2, r3, #4
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	031b      	lsls	r3, r3, #12
 8007244:	4313      	orrs	r3, r2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	4313      	orrs	r3, r2
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d110      	bne.n	8007312 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d102      	bne.n	80072fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072f6:	7b7b      	ldrb	r3, [r7, #13]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d001      	beq.n	8007300 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e069      	b.n	80073d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007310:	e031      	b.n	8007376 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b04      	cmp	r3, #4
 8007316:	d110      	bne.n	800733a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d102      	bne.n	8007324 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800731e:	7b3b      	ldrb	r3, [r7, #12]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d001      	beq.n	8007328 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e055      	b.n	80073d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007338:	e01d      	b.n	8007376 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d108      	bne.n	8007352 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d105      	bne.n	8007352 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007346:	7b7b      	ldrb	r3, [r7, #13]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d102      	bne.n	8007352 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800734c:	7b3b      	ldrb	r3, [r7, #12]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d001      	beq.n	8007356 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e03e      	b.n	80073d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_TIM_Encoder_Start+0xc4>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b04      	cmp	r3, #4
 8007380:	d008      	beq.n	8007394 <HAL_TIM_Encoder_Start+0xd4>
 8007382:	e00f      	b.n	80073a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2201      	movs	r2, #1
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fc23 	bl	8007bd8 <TIM_CCxChannelCmd>
      break;
 8007392:	e016      	b.n	80073c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2201      	movs	r2, #1
 800739a:	2104      	movs	r1, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fc1b 	bl	8007bd8 <TIM_CCxChannelCmd>
      break;
 80073a2:	e00e      	b.n	80073c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2201      	movs	r2, #1
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fc13 	bl	8007bd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2201      	movs	r2, #1
 80073b8:	2104      	movs	r1, #4
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fc0c 	bl	8007bd8 <TIM_CCxChannelCmd>
      break;
 80073c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0201 	orr.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d122      	bne.n	8007438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d11b      	bne.n	8007438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0202 	mvn.w	r2, #2
 8007408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9b0 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9a2 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f9b3 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b04      	cmp	r3, #4
 8007444:	d122      	bne.n	800748c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b04      	cmp	r3, #4
 8007452:	d11b      	bne.n	800748c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0204 	mvn.w	r2, #4
 800745c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f986 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 8007478:	e005      	b.n	8007486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f978 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f989 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b08      	cmp	r3, #8
 8007498:	d122      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d11b      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0208 	mvn.w	r2, #8
 80074b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2204      	movs	r2, #4
 80074b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f95c 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 80074cc:	e005      	b.n	80074da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f94e 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f95f 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d122      	bne.n	8007534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d11b      	bne.n	8007534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0210 	mvn.w	r2, #16
 8007504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2208      	movs	r2, #8
 800750a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f932 	bl	8007784 <HAL_TIM_IC_CaptureCallback>
 8007520:	e005      	b.n	800752e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f924 	bl	8007770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f935 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10e      	bne.n	8007560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d107      	bne.n	8007560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0201 	mvn.w	r2, #1
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fd f868 	bl	8004630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d10e      	bne.n	800758c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b80      	cmp	r3, #128	; 0x80
 800757a:	d107      	bne.n	800758c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fc16 	bl	8007db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f8fa 	bl	80077ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0220 	mvn.w	r2, #32
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fbe0 	bl	8007da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007606:	2302      	movs	r3, #2
 8007608:	e0ae      	b.n	8007768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b0c      	cmp	r3, #12
 8007616:	f200 809f 	bhi.w	8007758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007655 	.word	0x08007655
 8007624:	08007759 	.word	0x08007759
 8007628:	08007759 	.word	0x08007759
 800762c:	08007759 	.word	0x08007759
 8007630:	08007695 	.word	0x08007695
 8007634:	08007759 	.word	0x08007759
 8007638:	08007759 	.word	0x08007759
 800763c:	08007759 	.word	0x08007759
 8007640:	080076d7 	.word	0x080076d7
 8007644:	08007759 	.word	0x08007759
 8007648:	08007759 	.word	0x08007759
 800764c:	08007759 	.word	0x08007759
 8007650:	08007717 	.word	0x08007717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f930 	bl	80078c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0208 	orr.w	r2, r2, #8
 800766e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0204 	bic.w	r2, r2, #4
 800767e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6999      	ldr	r1, [r3, #24]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	691a      	ldr	r2, [r3, #16]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	619a      	str	r2, [r3, #24]
      break;
 8007692:	e064      	b.n	800775e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f976 	bl	800798c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6999      	ldr	r1, [r3, #24]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	021a      	lsls	r2, r3, #8
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	619a      	str	r2, [r3, #24]
      break;
 80076d4:	e043      	b.n	800775e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68b9      	ldr	r1, [r7, #8]
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f9c1 	bl	8007a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0208 	orr.w	r2, r2, #8
 80076f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0204 	bic.w	r2, r2, #4
 8007700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69d9      	ldr	r1, [r3, #28]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	61da      	str	r2, [r3, #28]
      break;
 8007714:	e023      	b.n	800775e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fa0b 	bl	8007b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69da      	ldr	r2, [r3, #28]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69d9      	ldr	r1, [r3, #28]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	021a      	lsls	r2, r3, #8
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	61da      	str	r2, [r3, #28]
      break;
 8007756:	e002      	b.n	800775e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a34      	ldr	r2, [pc, #208]	; (80078a4 <TIM_Base_SetConfig+0xe4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00f      	beq.n	80077f8 <TIM_Base_SetConfig+0x38>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077de:	d00b      	beq.n	80077f8 <TIM_Base_SetConfig+0x38>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a31      	ldr	r2, [pc, #196]	; (80078a8 <TIM_Base_SetConfig+0xe8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_Base_SetConfig+0x38>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a30      	ldr	r2, [pc, #192]	; (80078ac <TIM_Base_SetConfig+0xec>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_Base_SetConfig+0x38>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a2f      	ldr	r2, [pc, #188]	; (80078b0 <TIM_Base_SetConfig+0xf0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d108      	bne.n	800780a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a25      	ldr	r2, [pc, #148]	; (80078a4 <TIM_Base_SetConfig+0xe4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d01b      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007818:	d017      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <TIM_Base_SetConfig+0xe8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a21      	ldr	r2, [pc, #132]	; (80078ac <TIM_Base_SetConfig+0xec>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00f      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <TIM_Base_SetConfig+0xf0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00b      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <TIM_Base_SetConfig+0xf4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a1e      	ldr	r2, [pc, #120]	; (80078b8 <TIM_Base_SetConfig+0xf8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_Base_SetConfig+0x8a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <TIM_Base_SetConfig+0xfc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d108      	bne.n	800785c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a08      	ldr	r2, [pc, #32]	; (80078a4 <TIM_Base_SetConfig+0xe4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d103      	bne.n	8007890 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	615a      	str	r2, [r3, #20]
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40014400 	.word	0x40014400
 80078bc:	40014800 	.word	0x40014800

080078c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	f023 0201 	bic.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 0302 	bic.w	r3, r3, #2
 8007908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a1c      	ldr	r2, [pc, #112]	; (8007988 <TIM_OC1_SetConfig+0xc8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d10c      	bne.n	8007936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f023 0308 	bic.w	r3, r3, #8
 8007922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a13      	ldr	r2, [pc, #76]	; (8007988 <TIM_OC1_SetConfig+0xc8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d111      	bne.n	8007962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800794c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	621a      	str	r2, [r3, #32]
}
 800797c:	bf00      	nop
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40010000 	.word	0x40010000

0800798c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f023 0210 	bic.w	r2, r3, #16
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0320 	bic.w	r3, r3, #32
 80079d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <TIM_OC2_SetConfig+0xd4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d10d      	bne.n	8007a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a15      	ldr	r2, [pc, #84]	; (8007a60 <TIM_OC2_SetConfig+0xd4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d113      	bne.n	8007a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40010000 	.word	0x40010000

08007a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <TIM_OC3_SetConfig+0xd0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d10d      	bne.n	8007ade <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <TIM_OC3_SetConfig+0xd0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d113      	bne.n	8007b0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	40010000 	.word	0x40010000

08007b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	031b      	lsls	r3, r3, #12
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a10      	ldr	r2, [pc, #64]	; (8007bd4 <TIM_OC4_SetConfig+0x9c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d109      	bne.n	8007bac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	019b      	lsls	r3, r3, #6
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40010000 	.word	0x40010000

08007bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	2201      	movs	r2, #1
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1a      	ldr	r2, [r3, #32]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	401a      	ands	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a1a      	ldr	r2, [r3, #32]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	431a      	orrs	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e050      	b.n	8007cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1c      	ldr	r2, [pc, #112]	; (8007cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a18      	ldr	r2, [pc, #96]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a13      	ldr	r2, [pc, #76]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d10c      	bne.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40010000 	.word	0x40010000
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800
 8007cf8:	40000c00 	.word	0x40000c00
 8007cfc:	40014000 	.word	0x40014000

08007d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e03d      	b.n	8007d98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <__cvt>:
 8007dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	ec55 4b10 	vmov	r4, r5, d0
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	460e      	mov	r6, r1
 8007dd8:	4619      	mov	r1, r3
 8007dda:	462b      	mov	r3, r5
 8007ddc:	bfbb      	ittet	lt
 8007dde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007de2:	461d      	movlt	r5, r3
 8007de4:	2300      	movge	r3, #0
 8007de6:	232d      	movlt	r3, #45	; 0x2d
 8007de8:	700b      	strb	r3, [r1, #0]
 8007dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007df0:	4691      	mov	r9, r2
 8007df2:	f023 0820 	bic.w	r8, r3, #32
 8007df6:	bfbc      	itt	lt
 8007df8:	4622      	movlt	r2, r4
 8007dfa:	4614      	movlt	r4, r2
 8007dfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e00:	d005      	beq.n	8007e0e <__cvt+0x42>
 8007e02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e06:	d100      	bne.n	8007e0a <__cvt+0x3e>
 8007e08:	3601      	adds	r6, #1
 8007e0a:	2102      	movs	r1, #2
 8007e0c:	e000      	b.n	8007e10 <__cvt+0x44>
 8007e0e:	2103      	movs	r1, #3
 8007e10:	ab03      	add	r3, sp, #12
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	ab02      	add	r3, sp, #8
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	ec45 4b10 	vmov	d0, r4, r5
 8007e1c:	4653      	mov	r3, sl
 8007e1e:	4632      	mov	r2, r6
 8007e20:	f000 fe8a 	bl	8008b38 <_dtoa_r>
 8007e24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e28:	4607      	mov	r7, r0
 8007e2a:	d102      	bne.n	8007e32 <__cvt+0x66>
 8007e2c:	f019 0f01 	tst.w	r9, #1
 8007e30:	d022      	beq.n	8007e78 <__cvt+0xac>
 8007e32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e36:	eb07 0906 	add.w	r9, r7, r6
 8007e3a:	d110      	bne.n	8007e5e <__cvt+0x92>
 8007e3c:	783b      	ldrb	r3, [r7, #0]
 8007e3e:	2b30      	cmp	r3, #48	; 0x30
 8007e40:	d10a      	bne.n	8007e58 <__cvt+0x8c>
 8007e42:	2200      	movs	r2, #0
 8007e44:	2300      	movs	r3, #0
 8007e46:	4620      	mov	r0, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7f8 fe45 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e4e:	b918      	cbnz	r0, 8007e58 <__cvt+0x8c>
 8007e50:	f1c6 0601 	rsb	r6, r6, #1
 8007e54:	f8ca 6000 	str.w	r6, [sl]
 8007e58:	f8da 3000 	ldr.w	r3, [sl]
 8007e5c:	4499      	add	r9, r3
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2300      	movs	r3, #0
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fe37 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e6a:	b108      	cbz	r0, 8007e70 <__cvt+0xa4>
 8007e6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e70:	2230      	movs	r2, #48	; 0x30
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	454b      	cmp	r3, r9
 8007e76:	d307      	bcc.n	8007e88 <__cvt+0xbc>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e7c:	1bdb      	subs	r3, r3, r7
 8007e7e:	4638      	mov	r0, r7
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	b004      	add	sp, #16
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e88:	1c59      	adds	r1, r3, #1
 8007e8a:	9103      	str	r1, [sp, #12]
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	e7f0      	b.n	8007e72 <__cvt+0xa6>

08007e90 <__exponent>:
 8007e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e92:	4603      	mov	r3, r0
 8007e94:	2900      	cmp	r1, #0
 8007e96:	bfb8      	it	lt
 8007e98:	4249      	neglt	r1, r1
 8007e9a:	f803 2b02 	strb.w	r2, [r3], #2
 8007e9e:	bfb4      	ite	lt
 8007ea0:	222d      	movlt	r2, #45	; 0x2d
 8007ea2:	222b      	movge	r2, #43	; 0x2b
 8007ea4:	2909      	cmp	r1, #9
 8007ea6:	7042      	strb	r2, [r0, #1]
 8007ea8:	dd2a      	ble.n	8007f00 <__exponent+0x70>
 8007eaa:	f10d 0207 	add.w	r2, sp, #7
 8007eae:	4617      	mov	r7, r2
 8007eb0:	260a      	movs	r6, #10
 8007eb2:	4694      	mov	ip, r2
 8007eb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007eb8:	fb06 1415 	mls	r4, r6, r5, r1
 8007ebc:	3430      	adds	r4, #48	; 0x30
 8007ebe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2c63      	cmp	r4, #99	; 0x63
 8007ec6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007eca:	4629      	mov	r1, r5
 8007ecc:	dcf1      	bgt.n	8007eb2 <__exponent+0x22>
 8007ece:	3130      	adds	r1, #48	; 0x30
 8007ed0:	f1ac 0402 	sub.w	r4, ip, #2
 8007ed4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ed8:	1c41      	adds	r1, r0, #1
 8007eda:	4622      	mov	r2, r4
 8007edc:	42ba      	cmp	r2, r7
 8007ede:	d30a      	bcc.n	8007ef6 <__exponent+0x66>
 8007ee0:	f10d 0209 	add.w	r2, sp, #9
 8007ee4:	eba2 020c 	sub.w	r2, r2, ip
 8007ee8:	42bc      	cmp	r4, r7
 8007eea:	bf88      	it	hi
 8007eec:	2200      	movhi	r2, #0
 8007eee:	4413      	add	r3, r2
 8007ef0:	1a18      	subs	r0, r3, r0
 8007ef2:	b003      	add	sp, #12
 8007ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007efa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007efe:	e7ed      	b.n	8007edc <__exponent+0x4c>
 8007f00:	2330      	movs	r3, #48	; 0x30
 8007f02:	3130      	adds	r1, #48	; 0x30
 8007f04:	7083      	strb	r3, [r0, #2]
 8007f06:	70c1      	strb	r1, [r0, #3]
 8007f08:	1d03      	adds	r3, r0, #4
 8007f0a:	e7f1      	b.n	8007ef0 <__exponent+0x60>

08007f0c <_printf_float>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	ed2d 8b02 	vpush	{d8}
 8007f14:	b08d      	sub	sp, #52	; 0x34
 8007f16:	460c      	mov	r4, r1
 8007f18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f1c:	4616      	mov	r6, r2
 8007f1e:	461f      	mov	r7, r3
 8007f20:	4605      	mov	r5, r0
 8007f22:	f000 fcfb 	bl	800891c <_localeconv_r>
 8007f26:	f8d0 a000 	ldr.w	sl, [r0]
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	f7f8 f9a8 	bl	8000280 <strlen>
 8007f30:	2300      	movs	r3, #0
 8007f32:	930a      	str	r3, [sp, #40]	; 0x28
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f40:	3307      	adds	r3, #7
 8007f42:	f023 0307 	bic.w	r3, r3, #7
 8007f46:	f103 0208 	add.w	r2, r3, #8
 8007f4a:	f8c8 2000 	str.w	r2, [r8]
 8007f4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f5c:	ee08 0a10 	vmov	s16, r0
 8007f60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f68:	4b9e      	ldr	r3, [pc, #632]	; (80081e4 <_printf_float+0x2d8>)
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f6e:	f7f8 fde5 	bl	8000b3c <__aeabi_dcmpun>
 8007f72:	bb88      	cbnz	r0, 8007fd8 <_printf_float+0xcc>
 8007f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f78:	4b9a      	ldr	r3, [pc, #616]	; (80081e4 <_printf_float+0x2d8>)
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f7e:	f7f8 fdbf 	bl	8000b00 <__aeabi_dcmple>
 8007f82:	bb48      	cbnz	r0, 8007fd8 <_printf_float+0xcc>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4640      	mov	r0, r8
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	f7f8 fdae 	bl	8000aec <__aeabi_dcmplt>
 8007f90:	b110      	cbz	r0, 8007f98 <_printf_float+0x8c>
 8007f92:	232d      	movs	r3, #45	; 0x2d
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f98:	4a93      	ldr	r2, [pc, #588]	; (80081e8 <_printf_float+0x2dc>)
 8007f9a:	4b94      	ldr	r3, [pc, #592]	; (80081ec <_printf_float+0x2e0>)
 8007f9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fa0:	bf94      	ite	ls
 8007fa2:	4690      	movls	r8, r2
 8007fa4:	4698      	movhi	r8, r3
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	6123      	str	r3, [r4, #16]
 8007faa:	9b05      	ldr	r3, [sp, #20]
 8007fac:	f023 0304 	bic.w	r3, r3, #4
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	9700      	str	r7, [sp, #0]
 8007fb8:	4633      	mov	r3, r6
 8007fba:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f9da 	bl	8008378 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f040 8090 	bne.w	80080ea <_printf_float+0x1de>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fce:	b00d      	add	sp, #52	; 0x34
 8007fd0:	ecbd 8b02 	vpop	{d8}
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 fdac 	bl	8000b3c <__aeabi_dcmpun>
 8007fe4:	b140      	cbz	r0, 8007ff8 <_printf_float+0xec>
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbc      	itt	lt
 8007fec:	232d      	movlt	r3, #45	; 0x2d
 8007fee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ff2:	4a7f      	ldr	r2, [pc, #508]	; (80081f0 <_printf_float+0x2e4>)
 8007ff4:	4b7f      	ldr	r3, [pc, #508]	; (80081f4 <_printf_float+0x2e8>)
 8007ff6:	e7d1      	b.n	8007f9c <_printf_float+0x90>
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ffe:	9206      	str	r2, [sp, #24]
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	d13f      	bne.n	8008084 <_printf_float+0x178>
 8008004:	2306      	movs	r3, #6
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	6861      	ldr	r1, [r4, #4]
 800800c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008010:	2300      	movs	r3, #0
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	ab0a      	add	r3, sp, #40	; 0x28
 8008016:	e9cd b301 	strd	fp, r3, [sp, #4]
 800801a:	ab09      	add	r3, sp, #36	; 0x24
 800801c:	ec49 8b10 	vmov	d0, r8, r9
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	6022      	str	r2, [r4, #0]
 8008024:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008028:	4628      	mov	r0, r5
 800802a:	f7ff fecf 	bl	8007dcc <__cvt>
 800802e:	9b06      	ldr	r3, [sp, #24]
 8008030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008032:	2b47      	cmp	r3, #71	; 0x47
 8008034:	4680      	mov	r8, r0
 8008036:	d108      	bne.n	800804a <_printf_float+0x13e>
 8008038:	1cc8      	adds	r0, r1, #3
 800803a:	db02      	blt.n	8008042 <_printf_float+0x136>
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	4299      	cmp	r1, r3
 8008040:	dd41      	ble.n	80080c6 <_printf_float+0x1ba>
 8008042:	f1ab 0302 	sub.w	r3, fp, #2
 8008046:	fa5f fb83 	uxtb.w	fp, r3
 800804a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800804e:	d820      	bhi.n	8008092 <_printf_float+0x186>
 8008050:	3901      	subs	r1, #1
 8008052:	465a      	mov	r2, fp
 8008054:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008058:	9109      	str	r1, [sp, #36]	; 0x24
 800805a:	f7ff ff19 	bl	8007e90 <__exponent>
 800805e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008060:	1813      	adds	r3, r2, r0
 8008062:	2a01      	cmp	r2, #1
 8008064:	4681      	mov	r9, r0
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	dc02      	bgt.n	8008070 <_printf_float+0x164>
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	07d2      	lsls	r2, r2, #31
 800806e:	d501      	bpl.n	8008074 <_printf_float+0x168>
 8008070:	3301      	adds	r3, #1
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008078:	2b00      	cmp	r3, #0
 800807a:	d09c      	beq.n	8007fb6 <_printf_float+0xaa>
 800807c:	232d      	movs	r3, #45	; 0x2d
 800807e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008082:	e798      	b.n	8007fb6 <_printf_float+0xaa>
 8008084:	9a06      	ldr	r2, [sp, #24]
 8008086:	2a47      	cmp	r2, #71	; 0x47
 8008088:	d1be      	bne.n	8008008 <_printf_float+0xfc>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1bc      	bne.n	8008008 <_printf_float+0xfc>
 800808e:	2301      	movs	r3, #1
 8008090:	e7b9      	b.n	8008006 <_printf_float+0xfa>
 8008092:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008096:	d118      	bne.n	80080ca <_printf_float+0x1be>
 8008098:	2900      	cmp	r1, #0
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	dd0b      	ble.n	80080b6 <_printf_float+0x1aa>
 800809e:	6121      	str	r1, [r4, #16]
 80080a0:	b913      	cbnz	r3, 80080a8 <_printf_float+0x19c>
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	07d0      	lsls	r0, r2, #31
 80080a6:	d502      	bpl.n	80080ae <_printf_float+0x1a2>
 80080a8:	3301      	adds	r3, #1
 80080aa:	440b      	add	r3, r1
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80080b0:	f04f 0900 	mov.w	r9, #0
 80080b4:	e7de      	b.n	8008074 <_printf_float+0x168>
 80080b6:	b913      	cbnz	r3, 80080be <_printf_float+0x1b2>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	07d2      	lsls	r2, r2, #31
 80080bc:	d501      	bpl.n	80080c2 <_printf_float+0x1b6>
 80080be:	3302      	adds	r3, #2
 80080c0:	e7f4      	b.n	80080ac <_printf_float+0x1a0>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7f2      	b.n	80080ac <_printf_float+0x1a0>
 80080c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080cc:	4299      	cmp	r1, r3
 80080ce:	db05      	blt.n	80080dc <_printf_float+0x1d0>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	6121      	str	r1, [r4, #16]
 80080d4:	07d8      	lsls	r0, r3, #31
 80080d6:	d5ea      	bpl.n	80080ae <_printf_float+0x1a2>
 80080d8:	1c4b      	adds	r3, r1, #1
 80080da:	e7e7      	b.n	80080ac <_printf_float+0x1a0>
 80080dc:	2900      	cmp	r1, #0
 80080de:	bfd4      	ite	le
 80080e0:	f1c1 0202 	rsble	r2, r1, #2
 80080e4:	2201      	movgt	r2, #1
 80080e6:	4413      	add	r3, r2
 80080e8:	e7e0      	b.n	80080ac <_printf_float+0x1a0>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	055a      	lsls	r2, r3, #21
 80080ee:	d407      	bmi.n	8008100 <_printf_float+0x1f4>
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	4642      	mov	r2, r8
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	d12c      	bne.n	8008158 <_printf_float+0x24c>
 80080fe:	e764      	b.n	8007fca <_printf_float+0xbe>
 8008100:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008104:	f240 80e0 	bls.w	80082c8 <_printf_float+0x3bc>
 8008108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	f7f8 fce2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008114:	2800      	cmp	r0, #0
 8008116:	d034      	beq.n	8008182 <_printf_float+0x276>
 8008118:	4a37      	ldr	r2, [pc, #220]	; (80081f8 <_printf_float+0x2ec>)
 800811a:	2301      	movs	r3, #1
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f af51 	beq.w	8007fca <_printf_float+0xbe>
 8008128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800812c:	429a      	cmp	r2, r3
 800812e:	db02      	blt.n	8008136 <_printf_float+0x22a>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	07d8      	lsls	r0, r3, #31
 8008134:	d510      	bpl.n	8008158 <_printf_float+0x24c>
 8008136:	ee18 3a10 	vmov	r3, s16
 800813a:	4652      	mov	r2, sl
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	f43f af41 	beq.w	8007fca <_printf_float+0xbe>
 8008148:	f04f 0800 	mov.w	r8, #0
 800814c:	f104 091a 	add.w	r9, r4, #26
 8008150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008152:	3b01      	subs	r3, #1
 8008154:	4543      	cmp	r3, r8
 8008156:	dc09      	bgt.n	800816c <_printf_float+0x260>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	079b      	lsls	r3, r3, #30
 800815c:	f100 8107 	bmi.w	800836e <_printf_float+0x462>
 8008160:	68e0      	ldr	r0, [r4, #12]
 8008162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008164:	4298      	cmp	r0, r3
 8008166:	bfb8      	it	lt
 8008168:	4618      	movlt	r0, r3
 800816a:	e730      	b.n	8007fce <_printf_float+0xc2>
 800816c:	2301      	movs	r3, #1
 800816e:	464a      	mov	r2, r9
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f af27 	beq.w	8007fca <_printf_float+0xbe>
 800817c:	f108 0801 	add.w	r8, r8, #1
 8008180:	e7e6      	b.n	8008150 <_printf_float+0x244>
 8008182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	dc39      	bgt.n	80081fc <_printf_float+0x2f0>
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <_printf_float+0x2ec>)
 800818a:	2301      	movs	r3, #1
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f af19 	beq.w	8007fca <_printf_float+0xbe>
 8008198:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800819c:	4313      	orrs	r3, r2
 800819e:	d102      	bne.n	80081a6 <_printf_float+0x29a>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	07d9      	lsls	r1, r3, #31
 80081a4:	d5d8      	bpl.n	8008158 <_printf_float+0x24c>
 80081a6:	ee18 3a10 	vmov	r3, s16
 80081aa:	4652      	mov	r2, sl
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f af09 	beq.w	8007fca <_printf_float+0xbe>
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	f104 0a1a 	add.w	sl, r4, #26
 80081c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c2:	425b      	negs	r3, r3
 80081c4:	454b      	cmp	r3, r9
 80081c6:	dc01      	bgt.n	80081cc <_printf_float+0x2c0>
 80081c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ca:	e792      	b.n	80080f2 <_printf_float+0x1e6>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f43f aef7 	beq.w	8007fca <_printf_float+0xbe>
 80081dc:	f109 0901 	add.w	r9, r9, #1
 80081e0:	e7ee      	b.n	80081c0 <_printf_float+0x2b4>
 80081e2:	bf00      	nop
 80081e4:	7fefffff 	.word	0x7fefffff
 80081e8:	0800c234 	.word	0x0800c234
 80081ec:	0800c238 	.word	0x0800c238
 80081f0:	0800c23c 	.word	0x0800c23c
 80081f4:	0800c240 	.word	0x0800c240
 80081f8:	0800c244 	.word	0x0800c244
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008200:	429a      	cmp	r2, r3
 8008202:	bfa8      	it	ge
 8008204:	461a      	movge	r2, r3
 8008206:	2a00      	cmp	r2, #0
 8008208:	4691      	mov	r9, r2
 800820a:	dc37      	bgt.n	800827c <_printf_float+0x370>
 800820c:	f04f 0b00 	mov.w	fp, #0
 8008210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008214:	f104 021a 	add.w	r2, r4, #26
 8008218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	eba3 0309 	sub.w	r3, r3, r9
 8008220:	455b      	cmp	r3, fp
 8008222:	dc33      	bgt.n	800828c <_printf_float+0x380>
 8008224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008228:	429a      	cmp	r2, r3
 800822a:	db3b      	blt.n	80082a4 <_printf_float+0x398>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07da      	lsls	r2, r3, #31
 8008230:	d438      	bmi.n	80082a4 <_printf_float+0x398>
 8008232:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008236:	eba2 0903 	sub.w	r9, r2, r3
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	1ad2      	subs	r2, r2, r3
 800823e:	4591      	cmp	r9, r2
 8008240:	bfa8      	it	ge
 8008242:	4691      	movge	r9, r2
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	dc35      	bgt.n	80082b6 <_printf_float+0x3aa>
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008252:	f104 0a1a 	add.w	sl, r4, #26
 8008256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	eba3 0309 	sub.w	r3, r3, r9
 8008260:	4543      	cmp	r3, r8
 8008262:	f77f af79 	ble.w	8008158 <_printf_float+0x24c>
 8008266:	2301      	movs	r3, #1
 8008268:	4652      	mov	r2, sl
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f aeaa 	beq.w	8007fca <_printf_float+0xbe>
 8008276:	f108 0801 	add.w	r8, r8, #1
 800827a:	e7ec      	b.n	8008256 <_printf_float+0x34a>
 800827c:	4613      	mov	r3, r2
 800827e:	4631      	mov	r1, r6
 8008280:	4642      	mov	r2, r8
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	d1c0      	bne.n	800820c <_printf_float+0x300>
 800828a:	e69e      	b.n	8007fca <_printf_float+0xbe>
 800828c:	2301      	movs	r3, #1
 800828e:	4631      	mov	r1, r6
 8008290:	4628      	mov	r0, r5
 8008292:	9205      	str	r2, [sp, #20]
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	f43f ae97 	beq.w	8007fca <_printf_float+0xbe>
 800829c:	9a05      	ldr	r2, [sp, #20]
 800829e:	f10b 0b01 	add.w	fp, fp, #1
 80082a2:	e7b9      	b.n	8008218 <_printf_float+0x30c>
 80082a4:	ee18 3a10 	vmov	r3, s16
 80082a8:	4652      	mov	r2, sl
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	d1be      	bne.n	8008232 <_printf_float+0x326>
 80082b4:	e689      	b.n	8007fca <_printf_float+0xbe>
 80082b6:	9a05      	ldr	r2, [sp, #20]
 80082b8:	464b      	mov	r3, r9
 80082ba:	4442      	add	r2, r8
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	d1c1      	bne.n	800824a <_printf_float+0x33e>
 80082c6:	e680      	b.n	8007fca <_printf_float+0xbe>
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	dc01      	bgt.n	80082d2 <_printf_float+0x3c6>
 80082ce:	07db      	lsls	r3, r3, #31
 80082d0:	d53a      	bpl.n	8008348 <_printf_float+0x43c>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4642      	mov	r2, r8
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f ae74 	beq.w	8007fca <_printf_float+0xbe>
 80082e2:	ee18 3a10 	vmov	r3, s16
 80082e6:	4652      	mov	r2, sl
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f ae6b 	beq.w	8007fca <_printf_float+0xbe>
 80082f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082f8:	2200      	movs	r2, #0
 80082fa:	2300      	movs	r3, #0
 80082fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008300:	f7f8 fbea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008304:	b9d8      	cbnz	r0, 800833e <_printf_float+0x432>
 8008306:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800830a:	f108 0201 	add.w	r2, r8, #1
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	d10e      	bne.n	8008336 <_printf_float+0x42a>
 8008318:	e657      	b.n	8007fca <_printf_float+0xbe>
 800831a:	2301      	movs	r3, #1
 800831c:	4652      	mov	r2, sl
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	f43f ae50 	beq.w	8007fca <_printf_float+0xbe>
 800832a:	f108 0801 	add.w	r8, r8, #1
 800832e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008330:	3b01      	subs	r3, #1
 8008332:	4543      	cmp	r3, r8
 8008334:	dcf1      	bgt.n	800831a <_printf_float+0x40e>
 8008336:	464b      	mov	r3, r9
 8008338:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800833c:	e6da      	b.n	80080f4 <_printf_float+0x1e8>
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	f104 0a1a 	add.w	sl, r4, #26
 8008346:	e7f2      	b.n	800832e <_printf_float+0x422>
 8008348:	2301      	movs	r3, #1
 800834a:	4642      	mov	r2, r8
 800834c:	e7df      	b.n	800830e <_printf_float+0x402>
 800834e:	2301      	movs	r3, #1
 8008350:	464a      	mov	r2, r9
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f ae36 	beq.w	8007fca <_printf_float+0xbe>
 800835e:	f108 0801 	add.w	r8, r8, #1
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008366:	1a5b      	subs	r3, r3, r1
 8008368:	4543      	cmp	r3, r8
 800836a:	dcf0      	bgt.n	800834e <_printf_float+0x442>
 800836c:	e6f8      	b.n	8008160 <_printf_float+0x254>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	f104 0919 	add.w	r9, r4, #25
 8008376:	e7f4      	b.n	8008362 <_printf_float+0x456>

08008378 <_printf_common>:
 8008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	4616      	mov	r6, r2
 800837e:	4699      	mov	r9, r3
 8008380:	688a      	ldr	r2, [r1, #8]
 8008382:	690b      	ldr	r3, [r1, #16]
 8008384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008388:	4293      	cmp	r3, r2
 800838a:	bfb8      	it	lt
 800838c:	4613      	movlt	r3, r2
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008394:	4607      	mov	r7, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b10a      	cbz	r2, 800839e <_printf_common+0x26>
 800839a:	3301      	adds	r3, #1
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	0699      	lsls	r1, r3, #26
 80083a2:	bf42      	ittt	mi
 80083a4:	6833      	ldrmi	r3, [r6, #0]
 80083a6:	3302      	addmi	r3, #2
 80083a8:	6033      	strmi	r3, [r6, #0]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	f015 0506 	ands.w	r5, r5, #6
 80083b0:	d106      	bne.n	80083c0 <_printf_common+0x48>
 80083b2:	f104 0a19 	add.w	sl, r4, #25
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	6832      	ldr	r2, [r6, #0]
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	42ab      	cmp	r3, r5
 80083be:	dc26      	bgt.n	800840e <_printf_common+0x96>
 80083c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c4:	1e13      	subs	r3, r2, #0
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	bf18      	it	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	0692      	lsls	r2, r2, #26
 80083ce:	d42b      	bmi.n	8008428 <_printf_common+0xb0>
 80083d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d4:	4649      	mov	r1, r9
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	3001      	adds	r0, #1
 80083dc:	d01e      	beq.n	800841c <_printf_common+0xa4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	6922      	ldr	r2, [r4, #16]
 80083e2:	f003 0306 	and.w	r3, r3, #6
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	bf02      	ittt	eq
 80083ea:	68e5      	ldreq	r5, [r4, #12]
 80083ec:	6833      	ldreq	r3, [r6, #0]
 80083ee:	1aed      	subeq	r5, r5, r3
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	bf0c      	ite	eq
 80083f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f8:	2500      	movne	r5, #0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bfc4      	itt	gt
 80083fe:	1a9b      	subgt	r3, r3, r2
 8008400:	18ed      	addgt	r5, r5, r3
 8008402:	2600      	movs	r6, #0
 8008404:	341a      	adds	r4, #26
 8008406:	42b5      	cmp	r5, r6
 8008408:	d11a      	bne.n	8008440 <_printf_common+0xc8>
 800840a:	2000      	movs	r0, #0
 800840c:	e008      	b.n	8008420 <_printf_common+0xa8>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4649      	mov	r1, r9
 8008414:	4638      	mov	r0, r7
 8008416:	47c0      	blx	r8
 8008418:	3001      	adds	r0, #1
 800841a:	d103      	bne.n	8008424 <_printf_common+0xac>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	3501      	adds	r5, #1
 8008426:	e7c6      	b.n	80083b6 <_printf_common+0x3e>
 8008428:	18e1      	adds	r1, r4, r3
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	2030      	movs	r0, #48	; 0x30
 800842e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008432:	4422      	add	r2, r4
 8008434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800843c:	3302      	adds	r3, #2
 800843e:	e7c7      	b.n	80083d0 <_printf_common+0x58>
 8008440:	2301      	movs	r3, #1
 8008442:	4622      	mov	r2, r4
 8008444:	4649      	mov	r1, r9
 8008446:	4638      	mov	r0, r7
 8008448:	47c0      	blx	r8
 800844a:	3001      	adds	r0, #1
 800844c:	d0e6      	beq.n	800841c <_printf_common+0xa4>
 800844e:	3601      	adds	r6, #1
 8008450:	e7d9      	b.n	8008406 <_printf_common+0x8e>
	...

08008454 <_printf_i>:
 8008454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	7e0f      	ldrb	r7, [r1, #24]
 800845a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800845c:	2f78      	cmp	r7, #120	; 0x78
 800845e:	4691      	mov	r9, r2
 8008460:	4680      	mov	r8, r0
 8008462:	460c      	mov	r4, r1
 8008464:	469a      	mov	sl, r3
 8008466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800846a:	d807      	bhi.n	800847c <_printf_i+0x28>
 800846c:	2f62      	cmp	r7, #98	; 0x62
 800846e:	d80a      	bhi.n	8008486 <_printf_i+0x32>
 8008470:	2f00      	cmp	r7, #0
 8008472:	f000 80d4 	beq.w	800861e <_printf_i+0x1ca>
 8008476:	2f58      	cmp	r7, #88	; 0x58
 8008478:	f000 80c0 	beq.w	80085fc <_printf_i+0x1a8>
 800847c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008484:	e03a      	b.n	80084fc <_printf_i+0xa8>
 8008486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800848a:	2b15      	cmp	r3, #21
 800848c:	d8f6      	bhi.n	800847c <_printf_i+0x28>
 800848e:	a101      	add	r1, pc, #4	; (adr r1, 8008494 <_printf_i+0x40>)
 8008490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008494:	080084ed 	.word	0x080084ed
 8008498:	08008501 	.word	0x08008501
 800849c:	0800847d 	.word	0x0800847d
 80084a0:	0800847d 	.word	0x0800847d
 80084a4:	0800847d 	.word	0x0800847d
 80084a8:	0800847d 	.word	0x0800847d
 80084ac:	08008501 	.word	0x08008501
 80084b0:	0800847d 	.word	0x0800847d
 80084b4:	0800847d 	.word	0x0800847d
 80084b8:	0800847d 	.word	0x0800847d
 80084bc:	0800847d 	.word	0x0800847d
 80084c0:	08008605 	.word	0x08008605
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	080085bf 	.word	0x080085bf
 80084cc:	0800847d 	.word	0x0800847d
 80084d0:	0800847d 	.word	0x0800847d
 80084d4:	08008627 	.word	0x08008627
 80084d8:	0800847d 	.word	0x0800847d
 80084dc:	0800852d 	.word	0x0800852d
 80084e0:	0800847d 	.word	0x0800847d
 80084e4:	0800847d 	.word	0x0800847d
 80084e8:	080085c7 	.word	0x080085c7
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	1d1a      	adds	r2, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	602a      	str	r2, [r5, #0]
 80084f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084fc:	2301      	movs	r3, #1
 80084fe:	e09f      	b.n	8008640 <_printf_i+0x1ec>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	682b      	ldr	r3, [r5, #0]
 8008504:	0607      	lsls	r7, r0, #24
 8008506:	f103 0104 	add.w	r1, r3, #4
 800850a:	6029      	str	r1, [r5, #0]
 800850c:	d501      	bpl.n	8008512 <_printf_i+0xbe>
 800850e:	681e      	ldr	r6, [r3, #0]
 8008510:	e003      	b.n	800851a <_printf_i+0xc6>
 8008512:	0646      	lsls	r6, r0, #25
 8008514:	d5fb      	bpl.n	800850e <_printf_i+0xba>
 8008516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800851a:	2e00      	cmp	r6, #0
 800851c:	da03      	bge.n	8008526 <_printf_i+0xd2>
 800851e:	232d      	movs	r3, #45	; 0x2d
 8008520:	4276      	negs	r6, r6
 8008522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008526:	485a      	ldr	r0, [pc, #360]	; (8008690 <_printf_i+0x23c>)
 8008528:	230a      	movs	r3, #10
 800852a:	e012      	b.n	8008552 <_printf_i+0xfe>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	6029      	str	r1, [r5, #0]
 8008534:	0605      	lsls	r5, r0, #24
 8008536:	d501      	bpl.n	800853c <_printf_i+0xe8>
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0xee>
 800853c:	0641      	lsls	r1, r0, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0xe4>
 8008540:	881e      	ldrh	r6, [r3, #0]
 8008542:	4853      	ldr	r0, [pc, #332]	; (8008690 <_printf_i+0x23c>)
 8008544:	2f6f      	cmp	r7, #111	; 0x6f
 8008546:	bf0c      	ite	eq
 8008548:	2308      	moveq	r3, #8
 800854a:	230a      	movne	r3, #10
 800854c:	2100      	movs	r1, #0
 800854e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008552:	6865      	ldr	r5, [r4, #4]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	2d00      	cmp	r5, #0
 8008558:	bfa2      	ittt	ge
 800855a:	6821      	ldrge	r1, [r4, #0]
 800855c:	f021 0104 	bicge.w	r1, r1, #4
 8008560:	6021      	strge	r1, [r4, #0]
 8008562:	b90e      	cbnz	r6, 8008568 <_printf_i+0x114>
 8008564:	2d00      	cmp	r5, #0
 8008566:	d04b      	beq.n	8008600 <_printf_i+0x1ac>
 8008568:	4615      	mov	r5, r2
 800856a:	fbb6 f1f3 	udiv	r1, r6, r3
 800856e:	fb03 6711 	mls	r7, r3, r1, r6
 8008572:	5dc7      	ldrb	r7, [r0, r7]
 8008574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008578:	4637      	mov	r7, r6
 800857a:	42bb      	cmp	r3, r7
 800857c:	460e      	mov	r6, r1
 800857e:	d9f4      	bls.n	800856a <_printf_i+0x116>
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10b      	bne.n	800859c <_printf_i+0x148>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07de      	lsls	r6, r3, #31
 8008588:	d508      	bpl.n	800859c <_printf_i+0x148>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6861      	ldr	r1, [r4, #4]
 800858e:	4299      	cmp	r1, r3
 8008590:	bfde      	ittt	le
 8008592:	2330      	movle	r3, #48	; 0x30
 8008594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008598:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800859c:	1b52      	subs	r2, r2, r5
 800859e:	6122      	str	r2, [r4, #16]
 80085a0:	f8cd a000 	str.w	sl, [sp]
 80085a4:	464b      	mov	r3, r9
 80085a6:	aa03      	add	r2, sp, #12
 80085a8:	4621      	mov	r1, r4
 80085aa:	4640      	mov	r0, r8
 80085ac:	f7ff fee4 	bl	8008378 <_printf_common>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d14a      	bne.n	800864a <_printf_i+0x1f6>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b8:	b004      	add	sp, #16
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f043 0320 	orr.w	r3, r3, #32
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	4833      	ldr	r0, [pc, #204]	; (8008694 <_printf_i+0x240>)
 80085c8:	2778      	movs	r7, #120	; 0x78
 80085ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6829      	ldr	r1, [r5, #0]
 80085d2:	061f      	lsls	r7, r3, #24
 80085d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80085d8:	d402      	bmi.n	80085e0 <_printf_i+0x18c>
 80085da:	065f      	lsls	r7, r3, #25
 80085dc:	bf48      	it	mi
 80085de:	b2b6      	uxthmi	r6, r6
 80085e0:	07df      	lsls	r7, r3, #31
 80085e2:	bf48      	it	mi
 80085e4:	f043 0320 	orrmi.w	r3, r3, #32
 80085e8:	6029      	str	r1, [r5, #0]
 80085ea:	bf48      	it	mi
 80085ec:	6023      	strmi	r3, [r4, #0]
 80085ee:	b91e      	cbnz	r6, 80085f8 <_printf_i+0x1a4>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2310      	movs	r3, #16
 80085fa:	e7a7      	b.n	800854c <_printf_i+0xf8>
 80085fc:	4824      	ldr	r0, [pc, #144]	; (8008690 <_printf_i+0x23c>)
 80085fe:	e7e4      	b.n	80085ca <_printf_i+0x176>
 8008600:	4615      	mov	r5, r2
 8008602:	e7bd      	b.n	8008580 <_printf_i+0x12c>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	6826      	ldr	r6, [r4, #0]
 8008608:	6961      	ldr	r1, [r4, #20]
 800860a:	1d18      	adds	r0, r3, #4
 800860c:	6028      	str	r0, [r5, #0]
 800860e:	0635      	lsls	r5, r6, #24
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	d501      	bpl.n	8008618 <_printf_i+0x1c4>
 8008614:	6019      	str	r1, [r3, #0]
 8008616:	e002      	b.n	800861e <_printf_i+0x1ca>
 8008618:	0670      	lsls	r0, r6, #25
 800861a:	d5fb      	bpl.n	8008614 <_printf_i+0x1c0>
 800861c:	8019      	strh	r1, [r3, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	4615      	mov	r5, r2
 8008624:	e7bc      	b.n	80085a0 <_printf_i+0x14c>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	602a      	str	r2, [r5, #0]
 800862c:	681d      	ldr	r5, [r3, #0]
 800862e:	6862      	ldr	r2, [r4, #4]
 8008630:	2100      	movs	r1, #0
 8008632:	4628      	mov	r0, r5
 8008634:	f7f7 fdd4 	bl	80001e0 <memchr>
 8008638:	b108      	cbz	r0, 800863e <_printf_i+0x1ea>
 800863a:	1b40      	subs	r0, r0, r5
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	6123      	str	r3, [r4, #16]
 8008642:	2300      	movs	r3, #0
 8008644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008648:	e7aa      	b.n	80085a0 <_printf_i+0x14c>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	462a      	mov	r2, r5
 800864e:	4649      	mov	r1, r9
 8008650:	4640      	mov	r0, r8
 8008652:	47d0      	blx	sl
 8008654:	3001      	adds	r0, #1
 8008656:	d0ad      	beq.n	80085b4 <_printf_i+0x160>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	079b      	lsls	r3, r3, #30
 800865c:	d413      	bmi.n	8008686 <_printf_i+0x232>
 800865e:	68e0      	ldr	r0, [r4, #12]
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	4298      	cmp	r0, r3
 8008664:	bfb8      	it	lt
 8008666:	4618      	movlt	r0, r3
 8008668:	e7a6      	b.n	80085b8 <_printf_i+0x164>
 800866a:	2301      	movs	r3, #1
 800866c:	4632      	mov	r2, r6
 800866e:	4649      	mov	r1, r9
 8008670:	4640      	mov	r0, r8
 8008672:	47d0      	blx	sl
 8008674:	3001      	adds	r0, #1
 8008676:	d09d      	beq.n	80085b4 <_printf_i+0x160>
 8008678:	3501      	adds	r5, #1
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	9903      	ldr	r1, [sp, #12]
 800867e:	1a5b      	subs	r3, r3, r1
 8008680:	42ab      	cmp	r3, r5
 8008682:	dcf2      	bgt.n	800866a <_printf_i+0x216>
 8008684:	e7eb      	b.n	800865e <_printf_i+0x20a>
 8008686:	2500      	movs	r5, #0
 8008688:	f104 0619 	add.w	r6, r4, #25
 800868c:	e7f5      	b.n	800867a <_printf_i+0x226>
 800868e:	bf00      	nop
 8008690:	0800c246 	.word	0x0800c246
 8008694:	0800c257 	.word	0x0800c257

08008698 <std>:
 8008698:	2300      	movs	r3, #0
 800869a:	b510      	push	{r4, lr}
 800869c:	4604      	mov	r4, r0
 800869e:	e9c0 3300 	strd	r3, r3, [r0]
 80086a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086a6:	6083      	str	r3, [r0, #8]
 80086a8:	8181      	strh	r1, [r0, #12]
 80086aa:	6643      	str	r3, [r0, #100]	; 0x64
 80086ac:	81c2      	strh	r2, [r0, #14]
 80086ae:	6183      	str	r3, [r0, #24]
 80086b0:	4619      	mov	r1, r3
 80086b2:	2208      	movs	r2, #8
 80086b4:	305c      	adds	r0, #92	; 0x5c
 80086b6:	f000 f928 	bl	800890a <memset>
 80086ba:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <std+0x58>)
 80086bc:	6263      	str	r3, [r4, #36]	; 0x24
 80086be:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <std+0x5c>)
 80086c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086c2:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <std+0x60>)
 80086c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086c6:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <std+0x64>)
 80086c8:	6323      	str	r3, [r4, #48]	; 0x30
 80086ca:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <std+0x68>)
 80086cc:	6224      	str	r4, [r4, #32]
 80086ce:	429c      	cmp	r4, r3
 80086d0:	d006      	beq.n	80086e0 <std+0x48>
 80086d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80086d6:	4294      	cmp	r4, r2
 80086d8:	d002      	beq.n	80086e0 <std+0x48>
 80086da:	33d0      	adds	r3, #208	; 0xd0
 80086dc:	429c      	cmp	r4, r3
 80086de:	d105      	bne.n	80086ec <std+0x54>
 80086e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e8:	f000 b98c 	b.w	8008a04 <__retarget_lock_init_recursive>
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	bf00      	nop
 80086f0:	08008885 	.word	0x08008885
 80086f4:	080088a7 	.word	0x080088a7
 80086f8:	080088df 	.word	0x080088df
 80086fc:	08008903 	.word	0x08008903
 8008700:	20001ca8 	.word	0x20001ca8

08008704 <stdio_exit_handler>:
 8008704:	4a02      	ldr	r2, [pc, #8]	; (8008710 <stdio_exit_handler+0xc>)
 8008706:	4903      	ldr	r1, [pc, #12]	; (8008714 <stdio_exit_handler+0x10>)
 8008708:	4803      	ldr	r0, [pc, #12]	; (8008718 <stdio_exit_handler+0x14>)
 800870a:	f000 b869 	b.w	80087e0 <_fwalk_sglue>
 800870e:	bf00      	nop
 8008710:	20000048 	.word	0x20000048
 8008714:	0800a3d1 	.word	0x0800a3d1
 8008718:	20000054 	.word	0x20000054

0800871c <cleanup_stdio>:
 800871c:	6841      	ldr	r1, [r0, #4]
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <cleanup_stdio+0x34>)
 8008720:	4299      	cmp	r1, r3
 8008722:	b510      	push	{r4, lr}
 8008724:	4604      	mov	r4, r0
 8008726:	d001      	beq.n	800872c <cleanup_stdio+0x10>
 8008728:	f001 fe52 	bl	800a3d0 <_fflush_r>
 800872c:	68a1      	ldr	r1, [r4, #8]
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <cleanup_stdio+0x38>)
 8008730:	4299      	cmp	r1, r3
 8008732:	d002      	beq.n	800873a <cleanup_stdio+0x1e>
 8008734:	4620      	mov	r0, r4
 8008736:	f001 fe4b 	bl	800a3d0 <_fflush_r>
 800873a:	68e1      	ldr	r1, [r4, #12]
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <cleanup_stdio+0x3c>)
 800873e:	4299      	cmp	r1, r3
 8008740:	d004      	beq.n	800874c <cleanup_stdio+0x30>
 8008742:	4620      	mov	r0, r4
 8008744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008748:	f001 be42 	b.w	800a3d0 <_fflush_r>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	20001ca8 	.word	0x20001ca8
 8008754:	20001d10 	.word	0x20001d10
 8008758:	20001d78 	.word	0x20001d78

0800875c <global_stdio_init.part.0>:
 800875c:	b510      	push	{r4, lr}
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <global_stdio_init.part.0+0x30>)
 8008760:	4c0b      	ldr	r4, [pc, #44]	; (8008790 <global_stdio_init.part.0+0x34>)
 8008762:	4a0c      	ldr	r2, [pc, #48]	; (8008794 <global_stdio_init.part.0+0x38>)
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	4620      	mov	r0, r4
 8008768:	2200      	movs	r2, #0
 800876a:	2104      	movs	r1, #4
 800876c:	f7ff ff94 	bl	8008698 <std>
 8008770:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008774:	2201      	movs	r2, #1
 8008776:	2109      	movs	r1, #9
 8008778:	f7ff ff8e 	bl	8008698 <std>
 800877c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008780:	2202      	movs	r2, #2
 8008782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008786:	2112      	movs	r1, #18
 8008788:	f7ff bf86 	b.w	8008698 <std>
 800878c:	20001de0 	.word	0x20001de0
 8008790:	20001ca8 	.word	0x20001ca8
 8008794:	08008705 	.word	0x08008705

08008798 <__sfp_lock_acquire>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__sfp_lock_acquire+0x8>)
 800879a:	f000 b934 	b.w	8008a06 <__retarget_lock_acquire_recursive>
 800879e:	bf00      	nop
 80087a0:	20001de9 	.word	0x20001de9

080087a4 <__sfp_lock_release>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__sfp_lock_release+0x8>)
 80087a6:	f000 b92f 	b.w	8008a08 <__retarget_lock_release_recursive>
 80087aa:	bf00      	nop
 80087ac:	20001de9 	.word	0x20001de9

080087b0 <__sinit>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4604      	mov	r4, r0
 80087b4:	f7ff fff0 	bl	8008798 <__sfp_lock_acquire>
 80087b8:	6a23      	ldr	r3, [r4, #32]
 80087ba:	b11b      	cbz	r3, 80087c4 <__sinit+0x14>
 80087bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c0:	f7ff bff0 	b.w	80087a4 <__sfp_lock_release>
 80087c4:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <__sinit+0x28>)
 80087c6:	6223      	str	r3, [r4, #32]
 80087c8:	4b04      	ldr	r3, [pc, #16]	; (80087dc <__sinit+0x2c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f5      	bne.n	80087bc <__sinit+0xc>
 80087d0:	f7ff ffc4 	bl	800875c <global_stdio_init.part.0>
 80087d4:	e7f2      	b.n	80087bc <__sinit+0xc>
 80087d6:	bf00      	nop
 80087d8:	0800871d 	.word	0x0800871d
 80087dc:	20001de0 	.word	0x20001de0

080087e0 <_fwalk_sglue>:
 80087e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e4:	4607      	mov	r7, r0
 80087e6:	4688      	mov	r8, r1
 80087e8:	4614      	mov	r4, r2
 80087ea:	2600      	movs	r6, #0
 80087ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087f0:	f1b9 0901 	subs.w	r9, r9, #1
 80087f4:	d505      	bpl.n	8008802 <_fwalk_sglue+0x22>
 80087f6:	6824      	ldr	r4, [r4, #0]
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	d1f7      	bne.n	80087ec <_fwalk_sglue+0xc>
 80087fc:	4630      	mov	r0, r6
 80087fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d907      	bls.n	8008818 <_fwalk_sglue+0x38>
 8008808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800880c:	3301      	adds	r3, #1
 800880e:	d003      	beq.n	8008818 <_fwalk_sglue+0x38>
 8008810:	4629      	mov	r1, r5
 8008812:	4638      	mov	r0, r7
 8008814:	47c0      	blx	r8
 8008816:	4306      	orrs	r6, r0
 8008818:	3568      	adds	r5, #104	; 0x68
 800881a:	e7e9      	b.n	80087f0 <_fwalk_sglue+0x10>

0800881c <sniprintf>:
 800881c:	b40c      	push	{r2, r3}
 800881e:	b530      	push	{r4, r5, lr}
 8008820:	4b17      	ldr	r3, [pc, #92]	; (8008880 <sniprintf+0x64>)
 8008822:	1e0c      	subs	r4, r1, #0
 8008824:	681d      	ldr	r5, [r3, #0]
 8008826:	b09d      	sub	sp, #116	; 0x74
 8008828:	da08      	bge.n	800883c <sniprintf+0x20>
 800882a:	238b      	movs	r3, #139	; 0x8b
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008832:	b01d      	add	sp, #116	; 0x74
 8008834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008838:	b002      	add	sp, #8
 800883a:	4770      	bx	lr
 800883c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008840:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008844:	bf14      	ite	ne
 8008846:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800884a:	4623      	moveq	r3, r4
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008854:	9002      	str	r0, [sp, #8]
 8008856:	9006      	str	r0, [sp, #24]
 8008858:	f8ad 3016 	strh.w	r3, [sp, #22]
 800885c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800885e:	ab21      	add	r3, sp, #132	; 0x84
 8008860:	a902      	add	r1, sp, #8
 8008862:	4628      	mov	r0, r5
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	f001 fc2f 	bl	800a0c8 <_svfiprintf_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	bfbc      	itt	lt
 800886e:	238b      	movlt	r3, #139	; 0x8b
 8008870:	602b      	strlt	r3, [r5, #0]
 8008872:	2c00      	cmp	r4, #0
 8008874:	d0dd      	beq.n	8008832 <sniprintf+0x16>
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e7d9      	b.n	8008832 <sniprintf+0x16>
 800887e:	bf00      	nop
 8008880:	200000a0 	.word	0x200000a0

08008884 <__sread>:
 8008884:	b510      	push	{r4, lr}
 8008886:	460c      	mov	r4, r1
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	f000 f86c 	bl	8008968 <_read_r>
 8008890:	2800      	cmp	r0, #0
 8008892:	bfab      	itete	ge
 8008894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008896:	89a3      	ldrhlt	r3, [r4, #12]
 8008898:	181b      	addge	r3, r3, r0
 800889a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800889e:	bfac      	ite	ge
 80088a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088a2:	81a3      	strhlt	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__swrite>:
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	461f      	mov	r7, r3
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	4605      	mov	r5, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	4616      	mov	r6, r2
 80088b6:	d505      	bpl.n	80088c4 <__swrite+0x1e>
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	f000 f840 	bl	8008944 <_lseek_r>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	4632      	mov	r2, r6
 80088d2:	463b      	mov	r3, r7
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	f000 b857 	b.w	800898c <_write_r>

080088de <__sseek>:
 80088de:	b510      	push	{r4, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 f82d 	bl	8008944 <_lseek_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	bf15      	itete	ne
 80088f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strheq	r3, [r4, #12]
 80088fc:	bf18      	it	ne
 80088fe:	81a3      	strhne	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__sclose>:
 8008902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008906:	f000 b80d 	b.w	8008924 <_close_r>

0800890a <memset>:
 800890a:	4402      	add	r2, r0
 800890c:	4603      	mov	r3, r0
 800890e:	4293      	cmp	r3, r2
 8008910:	d100      	bne.n	8008914 <memset+0xa>
 8008912:	4770      	bx	lr
 8008914:	f803 1b01 	strb.w	r1, [r3], #1
 8008918:	e7f9      	b.n	800890e <memset+0x4>
	...

0800891c <_localeconv_r>:
 800891c:	4800      	ldr	r0, [pc, #0]	; (8008920 <_localeconv_r+0x4>)
 800891e:	4770      	bx	lr
 8008920:	20000194 	.word	0x20000194

08008924 <_close_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_close_r+0x1c>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7fb ff21 	bl	8004776 <_close>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_close_r+0x1a>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_close_r+0x1a>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20001de4 	.word	0x20001de4

08008944 <_lseek_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d07      	ldr	r5, [pc, #28]	; (8008964 <_lseek_r+0x20>)
 8008948:	4604      	mov	r4, r0
 800894a:	4608      	mov	r0, r1
 800894c:	4611      	mov	r1, r2
 800894e:	2200      	movs	r2, #0
 8008950:	602a      	str	r2, [r5, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	f7fb ff36 	bl	80047c4 <_lseek>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_lseek_r+0x1e>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	b103      	cbz	r3, 8008962 <_lseek_r+0x1e>
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	20001de4 	.word	0x20001de4

08008968 <_read_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	; (8008988 <_read_r+0x20>)
 800896c:	4604      	mov	r4, r0
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	2200      	movs	r2, #0
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7fb fec4 	bl	8004704 <_read>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_read_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_read_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20001de4 	.word	0x20001de4

0800898c <_write_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	; (80089ac <_write_r+0x20>)
 8008990:	4604      	mov	r4, r0
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	2200      	movs	r2, #0
 8008998:	602a      	str	r2, [r5, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f7fb fecf 	bl	800473e <_write>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_write_r+0x1e>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_write_r+0x1e>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20001de4 	.word	0x20001de4

080089b0 <__errno>:
 80089b0:	4b01      	ldr	r3, [pc, #4]	; (80089b8 <__errno+0x8>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	200000a0 	.word	0x200000a0

080089bc <__libc_init_array>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4d0d      	ldr	r5, [pc, #52]	; (80089f4 <__libc_init_array+0x38>)
 80089c0:	4c0d      	ldr	r4, [pc, #52]	; (80089f8 <__libc_init_array+0x3c>)
 80089c2:	1b64      	subs	r4, r4, r5
 80089c4:	10a4      	asrs	r4, r4, #2
 80089c6:	2600      	movs	r6, #0
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	d109      	bne.n	80089e0 <__libc_init_array+0x24>
 80089cc:	4d0b      	ldr	r5, [pc, #44]	; (80089fc <__libc_init_array+0x40>)
 80089ce:	4c0c      	ldr	r4, [pc, #48]	; (8008a00 <__libc_init_array+0x44>)
 80089d0:	f002 f894 	bl	800aafc <_init>
 80089d4:	1b64      	subs	r4, r4, r5
 80089d6:	10a4      	asrs	r4, r4, #2
 80089d8:	2600      	movs	r6, #0
 80089da:	42a6      	cmp	r6, r4
 80089dc:	d105      	bne.n	80089ea <__libc_init_array+0x2e>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e4:	4798      	blx	r3
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7ee      	b.n	80089c8 <__libc_init_array+0xc>
 80089ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ee:	4798      	blx	r3
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7f2      	b.n	80089da <__libc_init_array+0x1e>
 80089f4:	0800c5ac 	.word	0x0800c5ac
 80089f8:	0800c5ac 	.word	0x0800c5ac
 80089fc:	0800c5ac 	.word	0x0800c5ac
 8008a00:	0800c5b0 	.word	0x0800c5b0

08008a04 <__retarget_lock_init_recursive>:
 8008a04:	4770      	bx	lr

08008a06 <__retarget_lock_acquire_recursive>:
 8008a06:	4770      	bx	lr

08008a08 <__retarget_lock_release_recursive>:
 8008a08:	4770      	bx	lr

08008a0a <memcpy>:
 8008a0a:	440a      	add	r2, r1
 8008a0c:	4291      	cmp	r1, r2
 8008a0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a12:	d100      	bne.n	8008a16 <memcpy+0xc>
 8008a14:	4770      	bx	lr
 8008a16:	b510      	push	{r4, lr}
 8008a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a20:	4291      	cmp	r1, r2
 8008a22:	d1f9      	bne.n	8008a18 <memcpy+0xe>
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <quorem>:
 8008a26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	6903      	ldr	r3, [r0, #16]
 8008a2c:	690c      	ldr	r4, [r1, #16]
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	4607      	mov	r7, r0
 8008a32:	db7e      	blt.n	8008b32 <quorem+0x10c>
 8008a34:	3c01      	subs	r4, #1
 8008a36:	f101 0814 	add.w	r8, r1, #20
 8008a3a:	f100 0514 	add.w	r5, r0, #20
 8008a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a58:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a5c:	d331      	bcc.n	8008ac2 <quorem+0x9c>
 8008a5e:	f04f 0e00 	mov.w	lr, #0
 8008a62:	4640      	mov	r0, r8
 8008a64:	46ac      	mov	ip, r5
 8008a66:	46f2      	mov	sl, lr
 8008a68:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a6c:	b293      	uxth	r3, r2
 8008a6e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a76:	0c1a      	lsrs	r2, r3, #16
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	ebaa 0303 	sub.w	r3, sl, r3
 8008a7e:	f8dc a000 	ldr.w	sl, [ip]
 8008a82:	fa13 f38a 	uxtah	r3, r3, sl
 8008a86:	fb06 220e 	mla	r2, r6, lr, r2
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	9b00      	ldr	r3, [sp, #0]
 8008a8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a92:	b292      	uxth	r2, r2
 8008a94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008aa0:	4581      	cmp	r9, r0
 8008aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa6:	f84c 3b04 	str.w	r3, [ip], #4
 8008aaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aae:	d2db      	bcs.n	8008a68 <quorem+0x42>
 8008ab0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ab4:	b92b      	cbnz	r3, 8008ac2 <quorem+0x9c>
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	3b04      	subs	r3, #4
 8008aba:	429d      	cmp	r5, r3
 8008abc:	461a      	mov	r2, r3
 8008abe:	d32c      	bcc.n	8008b1a <quorem+0xf4>
 8008ac0:	613c      	str	r4, [r7, #16]
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	f001 f9a6 	bl	8009e14 <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	db22      	blt.n	8008b12 <quorem+0xec>
 8008acc:	3601      	adds	r6, #1
 8008ace:	4629      	mov	r1, r5
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ad6:	f8d1 c000 	ldr.w	ip, [r1]
 8008ada:	b293      	uxth	r3, r2
 8008adc:	1ac3      	subs	r3, r0, r3
 8008ade:	0c12      	lsrs	r2, r2, #16
 8008ae0:	fa13 f38c 	uxtah	r3, r3, ip
 8008ae4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008af2:	45c1      	cmp	r9, r8
 8008af4:	f841 3b04 	str.w	r3, [r1], #4
 8008af8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008afc:	d2e9      	bcs.n	8008ad2 <quorem+0xac>
 8008afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b06:	b922      	cbnz	r2, 8008b12 <quorem+0xec>
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	429d      	cmp	r5, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	d30a      	bcc.n	8008b26 <quorem+0x100>
 8008b10:	613c      	str	r4, [r7, #16]
 8008b12:	4630      	mov	r0, r6
 8008b14:	b003      	add	sp, #12
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d1ce      	bne.n	8008ac0 <quorem+0x9a>
 8008b22:	3c01      	subs	r4, #1
 8008b24:	e7c9      	b.n	8008aba <quorem+0x94>
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	d1f0      	bne.n	8008b10 <quorem+0xea>
 8008b2e:	3c01      	subs	r4, #1
 8008b30:	e7eb      	b.n	8008b0a <quorem+0xe4>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e7ee      	b.n	8008b14 <quorem+0xee>
	...

08008b38 <_dtoa_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ed2d 8b04 	vpush	{d8-d9}
 8008b40:	69c5      	ldr	r5, [r0, #28]
 8008b42:	b093      	sub	sp, #76	; 0x4c
 8008b44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b48:	ec57 6b10 	vmov	r6, r7, d0
 8008b4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b50:	9107      	str	r1, [sp, #28]
 8008b52:	4604      	mov	r4, r0
 8008b54:	920a      	str	r2, [sp, #40]	; 0x28
 8008b56:	930d      	str	r3, [sp, #52]	; 0x34
 8008b58:	b975      	cbnz	r5, 8008b78 <_dtoa_r+0x40>
 8008b5a:	2010      	movs	r0, #16
 8008b5c:	f000 fe2a 	bl	80097b4 <malloc>
 8008b60:	4602      	mov	r2, r0
 8008b62:	61e0      	str	r0, [r4, #28]
 8008b64:	b920      	cbnz	r0, 8008b70 <_dtoa_r+0x38>
 8008b66:	4bae      	ldr	r3, [pc, #696]	; (8008e20 <_dtoa_r+0x2e8>)
 8008b68:	21ef      	movs	r1, #239	; 0xef
 8008b6a:	48ae      	ldr	r0, [pc, #696]	; (8008e24 <_dtoa_r+0x2ec>)
 8008b6c:	f001 fc82 	bl	800a474 <__assert_func>
 8008b70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b74:	6005      	str	r5, [r0, #0]
 8008b76:	60c5      	str	r5, [r0, #12]
 8008b78:	69e3      	ldr	r3, [r4, #28]
 8008b7a:	6819      	ldr	r1, [r3, #0]
 8008b7c:	b151      	cbz	r1, 8008b94 <_dtoa_r+0x5c>
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	604a      	str	r2, [r1, #4]
 8008b82:	2301      	movs	r3, #1
 8008b84:	4093      	lsls	r3, r2
 8008b86:	608b      	str	r3, [r1, #8]
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 ff07 	bl	800999c <_Bfree>
 8008b8e:	69e3      	ldr	r3, [r4, #28]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	1e3b      	subs	r3, r7, #0
 8008b96:	bfbb      	ittet	lt
 8008b98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b9c:	9303      	strlt	r3, [sp, #12]
 8008b9e:	2300      	movge	r3, #0
 8008ba0:	2201      	movlt	r2, #1
 8008ba2:	bfac      	ite	ge
 8008ba4:	f8c8 3000 	strge.w	r3, [r8]
 8008ba8:	f8c8 2000 	strlt.w	r2, [r8]
 8008bac:	4b9e      	ldr	r3, [pc, #632]	; (8008e28 <_dtoa_r+0x2f0>)
 8008bae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008bb2:	ea33 0308 	bics.w	r3, r3, r8
 8008bb6:	d11b      	bne.n	8008bf0 <_dtoa_r+0xb8>
 8008bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bba:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008bc4:	4333      	orrs	r3, r6
 8008bc6:	f000 8593 	beq.w	80096f0 <_dtoa_r+0xbb8>
 8008bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bcc:	b963      	cbnz	r3, 8008be8 <_dtoa_r+0xb0>
 8008bce:	4b97      	ldr	r3, [pc, #604]	; (8008e2c <_dtoa_r+0x2f4>)
 8008bd0:	e027      	b.n	8008c22 <_dtoa_r+0xea>
 8008bd2:	4b97      	ldr	r3, [pc, #604]	; (8008e30 <_dtoa_r+0x2f8>)
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	9800      	ldr	r0, [sp, #0]
 8008bde:	b013      	add	sp, #76	; 0x4c
 8008be0:	ecbd 8b04 	vpop	{d8-d9}
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	4b90      	ldr	r3, [pc, #576]	; (8008e2c <_dtoa_r+0x2f4>)
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	3303      	adds	r3, #3
 8008bee:	e7f3      	b.n	8008bd8 <_dtoa_r+0xa0>
 8008bf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	ec51 0b17 	vmov	r0, r1, d7
 8008bfa:	eeb0 8a47 	vmov.f32	s16, s14
 8008bfe:	eef0 8a67 	vmov.f32	s17, s15
 8008c02:	2300      	movs	r3, #0
 8008c04:	f7f7 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c08:	4681      	mov	r9, r0
 8008c0a:	b160      	cbz	r0, 8008c26 <_dtoa_r+0xee>
 8008c0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c0e:	2301      	movs	r3, #1
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8568 	beq.w	80096ea <_dtoa_r+0xbb2>
 8008c1a:	4b86      	ldr	r3, [pc, #536]	; (8008e34 <_dtoa_r+0x2fc>)
 8008c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	e7da      	b.n	8008bdc <_dtoa_r+0xa4>
 8008c26:	aa10      	add	r2, sp, #64	; 0x40
 8008c28:	a911      	add	r1, sp, #68	; 0x44
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c30:	eef0 0a68 	vmov.f32	s1, s17
 8008c34:	f001 f994 	bl	8009f60 <__d2b>
 8008c38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c3c:	4682      	mov	sl, r0
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	d07f      	beq.n	8008d42 <_dtoa_r+0x20a>
 8008c42:	ee18 3a90 	vmov	r3, s17
 8008c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c4e:	ec51 0b18 	vmov	r0, r1, d8
 8008c52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c5e:	4619      	mov	r1, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b75      	ldr	r3, [pc, #468]	; (8008e38 <_dtoa_r+0x300>)
 8008c64:	f7f7 fb18 	bl	8000298 <__aeabi_dsub>
 8008c68:	a367      	add	r3, pc, #412	; (adr r3, 8008e08 <_dtoa_r+0x2d0>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fccb 	bl	8000608 <__aeabi_dmul>
 8008c72:	a367      	add	r3, pc, #412	; (adr r3, 8008e10 <_dtoa_r+0x2d8>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 fb10 	bl	800029c <__adddf3>
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	4628      	mov	r0, r5
 8008c80:	460f      	mov	r7, r1
 8008c82:	f7f7 fc57 	bl	8000534 <__aeabi_i2d>
 8008c86:	a364      	add	r3, pc, #400	; (adr r3, 8008e18 <_dtoa_r+0x2e0>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f7f7 fcbc 	bl	8000608 <__aeabi_dmul>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 fb00 	bl	800029c <__adddf3>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	f7f7 ff62 	bl	8000b68 <__aeabi_d2iz>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4683      	mov	fp, r0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4630      	mov	r0, r6
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 ff1d 	bl	8000aec <__aeabi_dcmplt>
 8008cb2:	b148      	cbz	r0, 8008cc8 <_dtoa_r+0x190>
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f7f7 fc3d 	bl	8000534 <__aeabi_i2d>
 8008cba:	4632      	mov	r2, r6
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	f7f7 ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cc2:	b908      	cbnz	r0, 8008cc8 <_dtoa_r+0x190>
 8008cc4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008cc8:	f1bb 0f16 	cmp.w	fp, #22
 8008ccc:	d857      	bhi.n	8008d7e <_dtoa_r+0x246>
 8008cce:	4b5b      	ldr	r3, [pc, #364]	; (8008e3c <_dtoa_r+0x304>)
 8008cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	ec51 0b18 	vmov	r0, r1, d8
 8008cdc:	f7f7 ff06 	bl	8000aec <__aeabi_dcmplt>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d04e      	beq.n	8008d82 <_dtoa_r+0x24a>
 8008ce4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930c      	str	r3, [sp, #48]	; 0x30
 8008cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cee:	1b5b      	subs	r3, r3, r5
 8008cf0:	1e5a      	subs	r2, r3, #1
 8008cf2:	bf45      	ittet	mi
 8008cf4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008cf8:	9305      	strmi	r3, [sp, #20]
 8008cfa:	2300      	movpl	r3, #0
 8008cfc:	2300      	movmi	r3, #0
 8008cfe:	9206      	str	r2, [sp, #24]
 8008d00:	bf54      	ite	pl
 8008d02:	9305      	strpl	r3, [sp, #20]
 8008d04:	9306      	strmi	r3, [sp, #24]
 8008d06:	f1bb 0f00 	cmp.w	fp, #0
 8008d0a:	db3c      	blt.n	8008d86 <_dtoa_r+0x24e>
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d12:	445b      	add	r3, fp
 8008d14:	9306      	str	r3, [sp, #24]
 8008d16:	2300      	movs	r3, #0
 8008d18:	9308      	str	r3, [sp, #32]
 8008d1a:	9b07      	ldr	r3, [sp, #28]
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d868      	bhi.n	8008df2 <_dtoa_r+0x2ba>
 8008d20:	2b05      	cmp	r3, #5
 8008d22:	bfc4      	itt	gt
 8008d24:	3b04      	subgt	r3, #4
 8008d26:	9307      	strgt	r3, [sp, #28]
 8008d28:	9b07      	ldr	r3, [sp, #28]
 8008d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d2e:	bfcc      	ite	gt
 8008d30:	2500      	movgt	r5, #0
 8008d32:	2501      	movle	r5, #1
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	f200 8085 	bhi.w	8008e44 <_dtoa_r+0x30c>
 8008d3a:	e8df f003 	tbb	[pc, r3]
 8008d3e:	3b2e      	.short	0x3b2e
 8008d40:	5839      	.short	0x5839
 8008d42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d46:	441d      	add	r5, r3
 8008d48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d4c:	2b20      	cmp	r3, #32
 8008d4e:	bfc1      	itttt	gt
 8008d50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d54:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d60:	bfd6      	itet	le
 8008d62:	f1c3 0320 	rsble	r3, r3, #32
 8008d66:	ea48 0003 	orrgt.w	r0, r8, r3
 8008d6a:	fa06 f003 	lslle.w	r0, r6, r3
 8008d6e:	f7f7 fbd1 	bl	8000514 <__aeabi_ui2d>
 8008d72:	2201      	movs	r2, #1
 8008d74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d78:	3d01      	subs	r5, #1
 8008d7a:	920e      	str	r2, [sp, #56]	; 0x38
 8008d7c:	e76f      	b.n	8008c5e <_dtoa_r+0x126>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e7b3      	b.n	8008cea <_dtoa_r+0x1b2>
 8008d82:	900c      	str	r0, [sp, #48]	; 0x30
 8008d84:	e7b2      	b.n	8008cec <_dtoa_r+0x1b4>
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	eba3 030b 	sub.w	r3, r3, fp
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	f1cb 0300 	rsb	r3, fp, #0
 8008d92:	9308      	str	r3, [sp, #32]
 8008d94:	2300      	movs	r3, #0
 8008d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d98:	e7bf      	b.n	8008d1a <_dtoa_r+0x1e2>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dc52      	bgt.n	8008e4a <_dtoa_r+0x312>
 8008da4:	2301      	movs	r3, #1
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	461a      	mov	r2, r3
 8008dac:	920a      	str	r2, [sp, #40]	; 0x28
 8008dae:	e00b      	b.n	8008dc8 <_dtoa_r+0x290>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7f3      	b.n	8008d9c <_dtoa_r+0x264>
 8008db4:	2300      	movs	r3, #0
 8008db6:	9309      	str	r3, [sp, #36]	; 0x24
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	445b      	add	r3, fp
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	bfb8      	it	lt
 8008dc6:	2301      	movlt	r3, #1
 8008dc8:	69e0      	ldr	r0, [r4, #28]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	2204      	movs	r2, #4
 8008dce:	f102 0614 	add.w	r6, r2, #20
 8008dd2:	429e      	cmp	r6, r3
 8008dd4:	d93d      	bls.n	8008e52 <_dtoa_r+0x31a>
 8008dd6:	6041      	str	r1, [r0, #4]
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 fd9f 	bl	800991c <_Balloc>
 8008dde:	9000      	str	r0, [sp, #0]
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d139      	bne.n	8008e58 <_dtoa_r+0x320>
 8008de4:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <_dtoa_r+0x308>)
 8008de6:	4602      	mov	r2, r0
 8008de8:	f240 11af 	movw	r1, #431	; 0x1af
 8008dec:	e6bd      	b.n	8008b6a <_dtoa_r+0x32>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e7e1      	b.n	8008db6 <_dtoa_r+0x27e>
 8008df2:	2501      	movs	r5, #1
 8008df4:	2300      	movs	r3, #0
 8008df6:	9307      	str	r3, [sp, #28]
 8008df8:	9509      	str	r5, [sp, #36]	; 0x24
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	2200      	movs	r2, #0
 8008e04:	2312      	movs	r3, #18
 8008e06:	e7d1      	b.n	8008dac <_dtoa_r+0x274>
 8008e08:	636f4361 	.word	0x636f4361
 8008e0c:	3fd287a7 	.word	0x3fd287a7
 8008e10:	8b60c8b3 	.word	0x8b60c8b3
 8008e14:	3fc68a28 	.word	0x3fc68a28
 8008e18:	509f79fb 	.word	0x509f79fb
 8008e1c:	3fd34413 	.word	0x3fd34413
 8008e20:	0800c275 	.word	0x0800c275
 8008e24:	0800c28c 	.word	0x0800c28c
 8008e28:	7ff00000 	.word	0x7ff00000
 8008e2c:	0800c271 	.word	0x0800c271
 8008e30:	0800c268 	.word	0x0800c268
 8008e34:	0800c245 	.word	0x0800c245
 8008e38:	3ff80000 	.word	0x3ff80000
 8008e3c:	0800c378 	.word	0x0800c378
 8008e40:	0800c2e4 	.word	0x0800c2e4
 8008e44:	2301      	movs	r3, #1
 8008e46:	9309      	str	r3, [sp, #36]	; 0x24
 8008e48:	e7d7      	b.n	8008dfa <_dtoa_r+0x2c2>
 8008e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	e7ba      	b.n	8008dc8 <_dtoa_r+0x290>
 8008e52:	3101      	adds	r1, #1
 8008e54:	0052      	lsls	r2, r2, #1
 8008e56:	e7ba      	b.n	8008dce <_dtoa_r+0x296>
 8008e58:	69e3      	ldr	r3, [r4, #28]
 8008e5a:	9a00      	ldr	r2, [sp, #0]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	9b04      	ldr	r3, [sp, #16]
 8008e60:	2b0e      	cmp	r3, #14
 8008e62:	f200 80a8 	bhi.w	8008fb6 <_dtoa_r+0x47e>
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	f000 80a5 	beq.w	8008fb6 <_dtoa_r+0x47e>
 8008e6c:	f1bb 0f00 	cmp.w	fp, #0
 8008e70:	dd38      	ble.n	8008ee4 <_dtoa_r+0x3ac>
 8008e72:	4bc0      	ldr	r3, [pc, #768]	; (8009174 <_dtoa_r+0x63c>)
 8008e74:	f00b 020f 	and.w	r2, fp, #15
 8008e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008e88:	d019      	beq.n	8008ebe <_dtoa_r+0x386>
 8008e8a:	4bbb      	ldr	r3, [pc, #748]	; (8009178 <_dtoa_r+0x640>)
 8008e8c:	ec51 0b18 	vmov	r0, r1, d8
 8008e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e94:	f7f7 fce2 	bl	800085c <__aeabi_ddiv>
 8008e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9c:	f008 080f 	and.w	r8, r8, #15
 8008ea0:	2503      	movs	r5, #3
 8008ea2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009178 <_dtoa_r+0x640>
 8008ea6:	f1b8 0f00 	cmp.w	r8, #0
 8008eaa:	d10a      	bne.n	8008ec2 <_dtoa_r+0x38a>
 8008eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb0:	4632      	mov	r2, r6
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	f7f7 fcd2 	bl	800085c <__aeabi_ddiv>
 8008eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ebc:	e02b      	b.n	8008f16 <_dtoa_r+0x3de>
 8008ebe:	2502      	movs	r5, #2
 8008ec0:	e7ef      	b.n	8008ea2 <_dtoa_r+0x36a>
 8008ec2:	f018 0f01 	tst.w	r8, #1
 8008ec6:	d008      	beq.n	8008eda <_dtoa_r+0x3a2>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ed0:	f7f7 fb9a 	bl	8000608 <__aeabi_dmul>
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ede:	f109 0908 	add.w	r9, r9, #8
 8008ee2:	e7e0      	b.n	8008ea6 <_dtoa_r+0x36e>
 8008ee4:	f000 809f 	beq.w	8009026 <_dtoa_r+0x4ee>
 8008ee8:	f1cb 0600 	rsb	r6, fp, #0
 8008eec:	4ba1      	ldr	r3, [pc, #644]	; (8009174 <_dtoa_r+0x63c>)
 8008eee:	4fa2      	ldr	r7, [pc, #648]	; (8009178 <_dtoa_r+0x640>)
 8008ef0:	f006 020f 	and.w	r2, r6, #15
 8008ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	ec51 0b18 	vmov	r0, r1, d8
 8008f00:	f7f7 fb82 	bl	8000608 <__aeabi_dmul>
 8008f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f08:	1136      	asrs	r6, r6, #4
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2502      	movs	r5, #2
 8008f0e:	2e00      	cmp	r6, #0
 8008f10:	d17e      	bne.n	8009010 <_dtoa_r+0x4d8>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1d0      	bne.n	8008eb8 <_dtoa_r+0x380>
 8008f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 8084 	beq.w	800902a <_dtoa_r+0x4f2>
 8008f22:	4b96      	ldr	r3, [pc, #600]	; (800917c <_dtoa_r+0x644>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	f7f7 fddf 	bl	8000aec <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d07b      	beq.n	800902a <_dtoa_r+0x4f2>
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d078      	beq.n	800902a <_dtoa_r+0x4f2>
 8008f38:	9b01      	ldr	r3, [sp, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dd39      	ble.n	8008fb2 <_dtoa_r+0x47a>
 8008f3e:	4b90      	ldr	r3, [pc, #576]	; (8009180 <_dtoa_r+0x648>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 fb5f 	bl	8000608 <__aeabi_dmul>
 8008f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f4e:	9e01      	ldr	r6, [sp, #4]
 8008f50:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008f54:	3501      	adds	r5, #1
 8008f56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7f7 faea 	bl	8000534 <__aeabi_i2d>
 8008f60:	4642      	mov	r2, r8
 8008f62:	464b      	mov	r3, r9
 8008f64:	f7f7 fb50 	bl	8000608 <__aeabi_dmul>
 8008f68:	4b86      	ldr	r3, [pc, #536]	; (8009184 <_dtoa_r+0x64c>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f7f7 f996 	bl	800029c <__adddf3>
 8008f70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d158      	bne.n	8009030 <_dtoa_r+0x4f8>
 8008f7e:	4b82      	ldr	r3, [pc, #520]	; (8009188 <_dtoa_r+0x650>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 f987 	bl	8000298 <__aeabi_dsub>
 8008f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f8e:	4680      	mov	r8, r0
 8008f90:	4689      	mov	r9, r1
 8008f92:	f7f7 fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f040 8296 	bne.w	80094c8 <_dtoa_r+0x990>
 8008f9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	f7f7 fda0 	bl	8000aec <__aeabi_dcmplt>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f040 8289 	bne.w	80094c4 <_dtoa_r+0x98c>
 8008fb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f2c0 814e 	blt.w	800925a <_dtoa_r+0x722>
 8008fbe:	f1bb 0f0e 	cmp.w	fp, #14
 8008fc2:	f300 814a 	bgt.w	800925a <_dtoa_r+0x722>
 8008fc6:	4b6b      	ldr	r3, [pc, #428]	; (8009174 <_dtoa_r+0x63c>)
 8008fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f280 80dc 	bge.w	8009190 <_dtoa_r+0x658>
 8008fd8:	9b04      	ldr	r3, [sp, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f300 80d8 	bgt.w	8009190 <_dtoa_r+0x658>
 8008fe0:	f040 826f 	bne.w	80094c2 <_dtoa_r+0x98a>
 8008fe4:	4b68      	ldr	r3, [pc, #416]	; (8009188 <_dtoa_r+0x650>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 fb0c 	bl	8000608 <__aeabi_dmul>
 8008ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff4:	f7f7 fd8e 	bl	8000b14 <__aeabi_dcmpge>
 8008ff8:	9e04      	ldr	r6, [sp, #16]
 8008ffa:	4637      	mov	r7, r6
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 8245 	bne.w	800948c <_dtoa_r+0x954>
 8009002:	9d00      	ldr	r5, [sp, #0]
 8009004:	2331      	movs	r3, #49	; 0x31
 8009006:	f805 3b01 	strb.w	r3, [r5], #1
 800900a:	f10b 0b01 	add.w	fp, fp, #1
 800900e:	e241      	b.n	8009494 <_dtoa_r+0x95c>
 8009010:	07f2      	lsls	r2, r6, #31
 8009012:	d505      	bpl.n	8009020 <_dtoa_r+0x4e8>
 8009014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009018:	f7f7 faf6 	bl	8000608 <__aeabi_dmul>
 800901c:	3501      	adds	r5, #1
 800901e:	2301      	movs	r3, #1
 8009020:	1076      	asrs	r6, r6, #1
 8009022:	3708      	adds	r7, #8
 8009024:	e773      	b.n	8008f0e <_dtoa_r+0x3d6>
 8009026:	2502      	movs	r5, #2
 8009028:	e775      	b.n	8008f16 <_dtoa_r+0x3de>
 800902a:	9e04      	ldr	r6, [sp, #16]
 800902c:	465f      	mov	r7, fp
 800902e:	e792      	b.n	8008f56 <_dtoa_r+0x41e>
 8009030:	9900      	ldr	r1, [sp, #0]
 8009032:	4b50      	ldr	r3, [pc, #320]	; (8009174 <_dtoa_r+0x63c>)
 8009034:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009038:	4431      	add	r1, r6
 800903a:	9102      	str	r1, [sp, #8]
 800903c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800903e:	eeb0 9a47 	vmov.f32	s18, s14
 8009042:	eef0 9a67 	vmov.f32	s19, s15
 8009046:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800904a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800904e:	2900      	cmp	r1, #0
 8009050:	d044      	beq.n	80090dc <_dtoa_r+0x5a4>
 8009052:	494e      	ldr	r1, [pc, #312]	; (800918c <_dtoa_r+0x654>)
 8009054:	2000      	movs	r0, #0
 8009056:	f7f7 fc01 	bl	800085c <__aeabi_ddiv>
 800905a:	ec53 2b19 	vmov	r2, r3, d9
 800905e:	f7f7 f91b 	bl	8000298 <__aeabi_dsub>
 8009062:	9d00      	ldr	r5, [sp, #0]
 8009064:	ec41 0b19 	vmov	d9, r0, r1
 8009068:	4649      	mov	r1, r9
 800906a:	4640      	mov	r0, r8
 800906c:	f7f7 fd7c 	bl	8000b68 <__aeabi_d2iz>
 8009070:	4606      	mov	r6, r0
 8009072:	f7f7 fa5f 	bl	8000534 <__aeabi_i2d>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 f90b 	bl	8000298 <__aeabi_dsub>
 8009082:	3630      	adds	r6, #48	; 0x30
 8009084:	f805 6b01 	strb.w	r6, [r5], #1
 8009088:	ec53 2b19 	vmov	r2, r3, d9
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	f7f7 fd2c 	bl	8000aec <__aeabi_dcmplt>
 8009094:	2800      	cmp	r0, #0
 8009096:	d164      	bne.n	8009162 <_dtoa_r+0x62a>
 8009098:	4642      	mov	r2, r8
 800909a:	464b      	mov	r3, r9
 800909c:	4937      	ldr	r1, [pc, #220]	; (800917c <_dtoa_r+0x644>)
 800909e:	2000      	movs	r0, #0
 80090a0:	f7f7 f8fa 	bl	8000298 <__aeabi_dsub>
 80090a4:	ec53 2b19 	vmov	r2, r3, d9
 80090a8:	f7f7 fd20 	bl	8000aec <__aeabi_dcmplt>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f040 80b6 	bne.w	800921e <_dtoa_r+0x6e6>
 80090b2:	9b02      	ldr	r3, [sp, #8]
 80090b4:	429d      	cmp	r5, r3
 80090b6:	f43f af7c 	beq.w	8008fb2 <_dtoa_r+0x47a>
 80090ba:	4b31      	ldr	r3, [pc, #196]	; (8009180 <_dtoa_r+0x648>)
 80090bc:	ec51 0b19 	vmov	r0, r1, d9
 80090c0:	2200      	movs	r2, #0
 80090c2:	f7f7 faa1 	bl	8000608 <__aeabi_dmul>
 80090c6:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <_dtoa_r+0x648>)
 80090c8:	ec41 0b19 	vmov	d9, r0, r1
 80090cc:	2200      	movs	r2, #0
 80090ce:	4640      	mov	r0, r8
 80090d0:	4649      	mov	r1, r9
 80090d2:	f7f7 fa99 	bl	8000608 <__aeabi_dmul>
 80090d6:	4680      	mov	r8, r0
 80090d8:	4689      	mov	r9, r1
 80090da:	e7c5      	b.n	8009068 <_dtoa_r+0x530>
 80090dc:	ec51 0b17 	vmov	r0, r1, d7
 80090e0:	f7f7 fa92 	bl	8000608 <__aeabi_dmul>
 80090e4:	9b02      	ldr	r3, [sp, #8]
 80090e6:	9d00      	ldr	r5, [sp, #0]
 80090e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ea:	ec41 0b19 	vmov	d9, r0, r1
 80090ee:	4649      	mov	r1, r9
 80090f0:	4640      	mov	r0, r8
 80090f2:	f7f7 fd39 	bl	8000b68 <__aeabi_d2iz>
 80090f6:	4606      	mov	r6, r0
 80090f8:	f7f7 fa1c 	bl	8000534 <__aeabi_i2d>
 80090fc:	3630      	adds	r6, #48	; 0x30
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4640      	mov	r0, r8
 8009104:	4649      	mov	r1, r9
 8009106:	f7f7 f8c7 	bl	8000298 <__aeabi_dsub>
 800910a:	f805 6b01 	strb.w	r6, [r5], #1
 800910e:	9b02      	ldr	r3, [sp, #8]
 8009110:	429d      	cmp	r5, r3
 8009112:	4680      	mov	r8, r0
 8009114:	4689      	mov	r9, r1
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	d124      	bne.n	8009166 <_dtoa_r+0x62e>
 800911c:	4b1b      	ldr	r3, [pc, #108]	; (800918c <_dtoa_r+0x654>)
 800911e:	ec51 0b19 	vmov	r0, r1, d9
 8009122:	f7f7 f8bb 	bl	800029c <__adddf3>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 fcfb 	bl	8000b28 <__aeabi_dcmpgt>
 8009132:	2800      	cmp	r0, #0
 8009134:	d173      	bne.n	800921e <_dtoa_r+0x6e6>
 8009136:	ec53 2b19 	vmov	r2, r3, d9
 800913a:	4914      	ldr	r1, [pc, #80]	; (800918c <_dtoa_r+0x654>)
 800913c:	2000      	movs	r0, #0
 800913e:	f7f7 f8ab 	bl	8000298 <__aeabi_dsub>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 fccf 	bl	8000aec <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f af2f 	beq.w	8008fb2 <_dtoa_r+0x47a>
 8009154:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009156:	1e6b      	subs	r3, r5, #1
 8009158:	930f      	str	r3, [sp, #60]	; 0x3c
 800915a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800915e:	2b30      	cmp	r3, #48	; 0x30
 8009160:	d0f8      	beq.n	8009154 <_dtoa_r+0x61c>
 8009162:	46bb      	mov	fp, r7
 8009164:	e04a      	b.n	80091fc <_dtoa_r+0x6c4>
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <_dtoa_r+0x648>)
 8009168:	f7f7 fa4e 	bl	8000608 <__aeabi_dmul>
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	e7bd      	b.n	80090ee <_dtoa_r+0x5b6>
 8009172:	bf00      	nop
 8009174:	0800c378 	.word	0x0800c378
 8009178:	0800c350 	.word	0x0800c350
 800917c:	3ff00000 	.word	0x3ff00000
 8009180:	40240000 	.word	0x40240000
 8009184:	401c0000 	.word	0x401c0000
 8009188:	40140000 	.word	0x40140000
 800918c:	3fe00000 	.word	0x3fe00000
 8009190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009194:	9d00      	ldr	r5, [sp, #0]
 8009196:	4642      	mov	r2, r8
 8009198:	464b      	mov	r3, r9
 800919a:	4630      	mov	r0, r6
 800919c:	4639      	mov	r1, r7
 800919e:	f7f7 fb5d 	bl	800085c <__aeabi_ddiv>
 80091a2:	f7f7 fce1 	bl	8000b68 <__aeabi_d2iz>
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	f7f7 f9c4 	bl	8000534 <__aeabi_i2d>
 80091ac:	4642      	mov	r2, r8
 80091ae:	464b      	mov	r3, r9
 80091b0:	f7f7 fa2a 	bl	8000608 <__aeabi_dmul>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4630      	mov	r0, r6
 80091ba:	4639      	mov	r1, r7
 80091bc:	f7f7 f86c 	bl	8000298 <__aeabi_dsub>
 80091c0:	9e01      	ldr	r6, [sp, #4]
 80091c2:	9f04      	ldr	r7, [sp, #16]
 80091c4:	3630      	adds	r6, #48	; 0x30
 80091c6:	f805 6b01 	strb.w	r6, [r5], #1
 80091ca:	9e00      	ldr	r6, [sp, #0]
 80091cc:	1bae      	subs	r6, r5, r6
 80091ce:	42b7      	cmp	r7, r6
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	d134      	bne.n	8009240 <_dtoa_r+0x708>
 80091d6:	f7f7 f861 	bl	800029c <__adddf3>
 80091da:	4642      	mov	r2, r8
 80091dc:	464b      	mov	r3, r9
 80091de:	4606      	mov	r6, r0
 80091e0:	460f      	mov	r7, r1
 80091e2:	f7f7 fca1 	bl	8000b28 <__aeabi_dcmpgt>
 80091e6:	b9c8      	cbnz	r0, 800921c <_dtoa_r+0x6e4>
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	4630      	mov	r0, r6
 80091ee:	4639      	mov	r1, r7
 80091f0:	f7f7 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80091f4:	b110      	cbz	r0, 80091fc <_dtoa_r+0x6c4>
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	07db      	lsls	r3, r3, #31
 80091fa:	d40f      	bmi.n	800921c <_dtoa_r+0x6e4>
 80091fc:	4651      	mov	r1, sl
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 fbcc 	bl	800999c <_Bfree>
 8009204:	2300      	movs	r3, #0
 8009206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009208:	702b      	strb	r3, [r5, #0]
 800920a:	f10b 0301 	add.w	r3, fp, #1
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009212:	2b00      	cmp	r3, #0
 8009214:	f43f ace2 	beq.w	8008bdc <_dtoa_r+0xa4>
 8009218:	601d      	str	r5, [r3, #0]
 800921a:	e4df      	b.n	8008bdc <_dtoa_r+0xa4>
 800921c:	465f      	mov	r7, fp
 800921e:	462b      	mov	r3, r5
 8009220:	461d      	mov	r5, r3
 8009222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009226:	2a39      	cmp	r2, #57	; 0x39
 8009228:	d106      	bne.n	8009238 <_dtoa_r+0x700>
 800922a:	9a00      	ldr	r2, [sp, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d1f7      	bne.n	8009220 <_dtoa_r+0x6e8>
 8009230:	9900      	ldr	r1, [sp, #0]
 8009232:	2230      	movs	r2, #48	; 0x30
 8009234:	3701      	adds	r7, #1
 8009236:	700a      	strb	r2, [r1, #0]
 8009238:	781a      	ldrb	r2, [r3, #0]
 800923a:	3201      	adds	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e790      	b.n	8009162 <_dtoa_r+0x62a>
 8009240:	4ba3      	ldr	r3, [pc, #652]	; (80094d0 <_dtoa_r+0x998>)
 8009242:	2200      	movs	r2, #0
 8009244:	f7f7 f9e0 	bl	8000608 <__aeabi_dmul>
 8009248:	2200      	movs	r2, #0
 800924a:	2300      	movs	r3, #0
 800924c:	4606      	mov	r6, r0
 800924e:	460f      	mov	r7, r1
 8009250:	f7f7 fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 8009254:	2800      	cmp	r0, #0
 8009256:	d09e      	beq.n	8009196 <_dtoa_r+0x65e>
 8009258:	e7d0      	b.n	80091fc <_dtoa_r+0x6c4>
 800925a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800925c:	2a00      	cmp	r2, #0
 800925e:	f000 80ca 	beq.w	80093f6 <_dtoa_r+0x8be>
 8009262:	9a07      	ldr	r2, [sp, #28]
 8009264:	2a01      	cmp	r2, #1
 8009266:	f300 80ad 	bgt.w	80093c4 <_dtoa_r+0x88c>
 800926a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800926c:	2a00      	cmp	r2, #0
 800926e:	f000 80a5 	beq.w	80093bc <_dtoa_r+0x884>
 8009272:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009276:	9e08      	ldr	r6, [sp, #32]
 8009278:	9d05      	ldr	r5, [sp, #20]
 800927a:	9a05      	ldr	r2, [sp, #20]
 800927c:	441a      	add	r2, r3
 800927e:	9205      	str	r2, [sp, #20]
 8009280:	9a06      	ldr	r2, [sp, #24]
 8009282:	2101      	movs	r1, #1
 8009284:	441a      	add	r2, r3
 8009286:	4620      	mov	r0, r4
 8009288:	9206      	str	r2, [sp, #24]
 800928a:	f000 fc3d 	bl	8009b08 <__i2b>
 800928e:	4607      	mov	r7, r0
 8009290:	b165      	cbz	r5, 80092ac <_dtoa_r+0x774>
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	dd09      	ble.n	80092ac <_dtoa_r+0x774>
 8009298:	42ab      	cmp	r3, r5
 800929a:	9a05      	ldr	r2, [sp, #20]
 800929c:	bfa8      	it	ge
 800929e:	462b      	movge	r3, r5
 80092a0:	1ad2      	subs	r2, r2, r3
 80092a2:	9205      	str	r2, [sp, #20]
 80092a4:	9a06      	ldr	r2, [sp, #24]
 80092a6:	1aed      	subs	r5, r5, r3
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	9306      	str	r3, [sp, #24]
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	b1f3      	cbz	r3, 80092ee <_dtoa_r+0x7b6>
 80092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 80a3 	beq.w	80093fe <_dtoa_r+0x8c6>
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	dd10      	ble.n	80092de <_dtoa_r+0x7a6>
 80092bc:	4639      	mov	r1, r7
 80092be:	4632      	mov	r2, r6
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fce1 	bl	8009c88 <__pow5mult>
 80092c6:	4652      	mov	r2, sl
 80092c8:	4601      	mov	r1, r0
 80092ca:	4607      	mov	r7, r0
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fc31 	bl	8009b34 <__multiply>
 80092d2:	4651      	mov	r1, sl
 80092d4:	4680      	mov	r8, r0
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 fb60 	bl	800999c <_Bfree>
 80092dc:	46c2      	mov	sl, r8
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	1b9a      	subs	r2, r3, r6
 80092e2:	d004      	beq.n	80092ee <_dtoa_r+0x7b6>
 80092e4:	4651      	mov	r1, sl
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fcce 	bl	8009c88 <__pow5mult>
 80092ec:	4682      	mov	sl, r0
 80092ee:	2101      	movs	r1, #1
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fc09 	bl	8009b08 <__i2b>
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	f340 8081 	ble.w	8009402 <_dtoa_r+0x8ca>
 8009300:	461a      	mov	r2, r3
 8009302:	4601      	mov	r1, r0
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fcbf 	bl	8009c88 <__pow5mult>
 800930a:	9b07      	ldr	r3, [sp, #28]
 800930c:	2b01      	cmp	r3, #1
 800930e:	4606      	mov	r6, r0
 8009310:	dd7a      	ble.n	8009408 <_dtoa_r+0x8d0>
 8009312:	f04f 0800 	mov.w	r8, #0
 8009316:	6933      	ldr	r3, [r6, #16]
 8009318:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800931c:	6918      	ldr	r0, [r3, #16]
 800931e:	f000 fba5 	bl	8009a6c <__hi0bits>
 8009322:	f1c0 0020 	rsb	r0, r0, #32
 8009326:	9b06      	ldr	r3, [sp, #24]
 8009328:	4418      	add	r0, r3
 800932a:	f010 001f 	ands.w	r0, r0, #31
 800932e:	f000 8094 	beq.w	800945a <_dtoa_r+0x922>
 8009332:	f1c0 0320 	rsb	r3, r0, #32
 8009336:	2b04      	cmp	r3, #4
 8009338:	f340 8085 	ble.w	8009446 <_dtoa_r+0x90e>
 800933c:	9b05      	ldr	r3, [sp, #20]
 800933e:	f1c0 001c 	rsb	r0, r0, #28
 8009342:	4403      	add	r3, r0
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	4403      	add	r3, r0
 800934a:	4405      	add	r5, r0
 800934c:	9306      	str	r3, [sp, #24]
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	dd05      	ble.n	8009360 <_dtoa_r+0x828>
 8009354:	4651      	mov	r1, sl
 8009356:	461a      	mov	r2, r3
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fcef 	bl	8009d3c <__lshift>
 800935e:	4682      	mov	sl, r0
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	dd05      	ble.n	8009372 <_dtoa_r+0x83a>
 8009366:	4631      	mov	r1, r6
 8009368:	461a      	mov	r2, r3
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fce6 	bl	8009d3c <__lshift>
 8009370:	4606      	mov	r6, r0
 8009372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009374:	2b00      	cmp	r3, #0
 8009376:	d072      	beq.n	800945e <_dtoa_r+0x926>
 8009378:	4631      	mov	r1, r6
 800937a:	4650      	mov	r0, sl
 800937c:	f000 fd4a 	bl	8009e14 <__mcmp>
 8009380:	2800      	cmp	r0, #0
 8009382:	da6c      	bge.n	800945e <_dtoa_r+0x926>
 8009384:	2300      	movs	r3, #0
 8009386:	4651      	mov	r1, sl
 8009388:	220a      	movs	r2, #10
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fb28 	bl	80099e0 <__multadd>
 8009390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009392:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009396:	4682      	mov	sl, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 81b0 	beq.w	80096fe <_dtoa_r+0xbc6>
 800939e:	2300      	movs	r3, #0
 80093a0:	4639      	mov	r1, r7
 80093a2:	220a      	movs	r2, #10
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 fb1b 	bl	80099e0 <__multadd>
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	4607      	mov	r7, r0
 80093b0:	f300 8096 	bgt.w	80094e0 <_dtoa_r+0x9a8>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	dc59      	bgt.n	800946e <_dtoa_r+0x936>
 80093ba:	e091      	b.n	80094e0 <_dtoa_r+0x9a8>
 80093bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093c2:	e758      	b.n	8009276 <_dtoa_r+0x73e>
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	1e5e      	subs	r6, r3, #1
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	42b3      	cmp	r3, r6
 80093cc:	bfbf      	itttt	lt
 80093ce:	9b08      	ldrlt	r3, [sp, #32]
 80093d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80093d2:	9608      	strlt	r6, [sp, #32]
 80093d4:	1af3      	sublt	r3, r6, r3
 80093d6:	bfb4      	ite	lt
 80093d8:	18d2      	addlt	r2, r2, r3
 80093da:	1b9e      	subge	r6, r3, r6
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	bfbc      	itt	lt
 80093e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80093e2:	2600      	movlt	r6, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfb7      	itett	lt
 80093e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80093ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80093f0:	1a9d      	sublt	r5, r3, r2
 80093f2:	2300      	movlt	r3, #0
 80093f4:	e741      	b.n	800927a <_dtoa_r+0x742>
 80093f6:	9e08      	ldr	r6, [sp, #32]
 80093f8:	9d05      	ldr	r5, [sp, #20]
 80093fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093fc:	e748      	b.n	8009290 <_dtoa_r+0x758>
 80093fe:	9a08      	ldr	r2, [sp, #32]
 8009400:	e770      	b.n	80092e4 <_dtoa_r+0x7ac>
 8009402:	9b07      	ldr	r3, [sp, #28]
 8009404:	2b01      	cmp	r3, #1
 8009406:	dc19      	bgt.n	800943c <_dtoa_r+0x904>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	b9bb      	cbnz	r3, 800943c <_dtoa_r+0x904>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009412:	b99b      	cbnz	r3, 800943c <_dtoa_r+0x904>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800941a:	0d1b      	lsrs	r3, r3, #20
 800941c:	051b      	lsls	r3, r3, #20
 800941e:	b183      	cbz	r3, 8009442 <_dtoa_r+0x90a>
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	3301      	adds	r3, #1
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	3301      	adds	r3, #1
 800942a:	9306      	str	r3, [sp, #24]
 800942c:	f04f 0801 	mov.w	r8, #1
 8009430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009432:	2b00      	cmp	r3, #0
 8009434:	f47f af6f 	bne.w	8009316 <_dtoa_r+0x7de>
 8009438:	2001      	movs	r0, #1
 800943a:	e774      	b.n	8009326 <_dtoa_r+0x7ee>
 800943c:	f04f 0800 	mov.w	r8, #0
 8009440:	e7f6      	b.n	8009430 <_dtoa_r+0x8f8>
 8009442:	4698      	mov	r8, r3
 8009444:	e7f4      	b.n	8009430 <_dtoa_r+0x8f8>
 8009446:	d082      	beq.n	800934e <_dtoa_r+0x816>
 8009448:	9a05      	ldr	r2, [sp, #20]
 800944a:	331c      	adds	r3, #28
 800944c:	441a      	add	r2, r3
 800944e:	9205      	str	r2, [sp, #20]
 8009450:	9a06      	ldr	r2, [sp, #24]
 8009452:	441a      	add	r2, r3
 8009454:	441d      	add	r5, r3
 8009456:	9206      	str	r2, [sp, #24]
 8009458:	e779      	b.n	800934e <_dtoa_r+0x816>
 800945a:	4603      	mov	r3, r0
 800945c:	e7f4      	b.n	8009448 <_dtoa_r+0x910>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	dc37      	bgt.n	80094d4 <_dtoa_r+0x99c>
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	2b02      	cmp	r3, #2
 8009468:	dd34      	ble.n	80094d4 <_dtoa_r+0x99c>
 800946a:	9b04      	ldr	r3, [sp, #16]
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	b963      	cbnz	r3, 800948c <_dtoa_r+0x954>
 8009472:	4631      	mov	r1, r6
 8009474:	2205      	movs	r2, #5
 8009476:	4620      	mov	r0, r4
 8009478:	f000 fab2 	bl	80099e0 <__multadd>
 800947c:	4601      	mov	r1, r0
 800947e:	4606      	mov	r6, r0
 8009480:	4650      	mov	r0, sl
 8009482:	f000 fcc7 	bl	8009e14 <__mcmp>
 8009486:	2800      	cmp	r0, #0
 8009488:	f73f adbb 	bgt.w	8009002 <_dtoa_r+0x4ca>
 800948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948e:	9d00      	ldr	r5, [sp, #0]
 8009490:	ea6f 0b03 	mvn.w	fp, r3
 8009494:	f04f 0800 	mov.w	r8, #0
 8009498:	4631      	mov	r1, r6
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fa7e 	bl	800999c <_Bfree>
 80094a0:	2f00      	cmp	r7, #0
 80094a2:	f43f aeab 	beq.w	80091fc <_dtoa_r+0x6c4>
 80094a6:	f1b8 0f00 	cmp.w	r8, #0
 80094aa:	d005      	beq.n	80094b8 <_dtoa_r+0x980>
 80094ac:	45b8      	cmp	r8, r7
 80094ae:	d003      	beq.n	80094b8 <_dtoa_r+0x980>
 80094b0:	4641      	mov	r1, r8
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 fa72 	bl	800999c <_Bfree>
 80094b8:	4639      	mov	r1, r7
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fa6e 	bl	800999c <_Bfree>
 80094c0:	e69c      	b.n	80091fc <_dtoa_r+0x6c4>
 80094c2:	2600      	movs	r6, #0
 80094c4:	4637      	mov	r7, r6
 80094c6:	e7e1      	b.n	800948c <_dtoa_r+0x954>
 80094c8:	46bb      	mov	fp, r7
 80094ca:	4637      	mov	r7, r6
 80094cc:	e599      	b.n	8009002 <_dtoa_r+0x4ca>
 80094ce:	bf00      	nop
 80094d0:	40240000 	.word	0x40240000
 80094d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80c8 	beq.w	800966c <_dtoa_r+0xb34>
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	dd05      	ble.n	80094f0 <_dtoa_r+0x9b8>
 80094e4:	4639      	mov	r1, r7
 80094e6:	462a      	mov	r2, r5
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 fc27 	bl	8009d3c <__lshift>
 80094ee:	4607      	mov	r7, r0
 80094f0:	f1b8 0f00 	cmp.w	r8, #0
 80094f4:	d05b      	beq.n	80095ae <_dtoa_r+0xa76>
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fa0f 	bl	800991c <_Balloc>
 80094fe:	4605      	mov	r5, r0
 8009500:	b928      	cbnz	r0, 800950e <_dtoa_r+0x9d6>
 8009502:	4b83      	ldr	r3, [pc, #524]	; (8009710 <_dtoa_r+0xbd8>)
 8009504:	4602      	mov	r2, r0
 8009506:	f240 21ef 	movw	r1, #751	; 0x2ef
 800950a:	f7ff bb2e 	b.w	8008b6a <_dtoa_r+0x32>
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	3202      	adds	r2, #2
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	f107 010c 	add.w	r1, r7, #12
 8009518:	300c      	adds	r0, #12
 800951a:	f7ff fa76 	bl	8008a0a <memcpy>
 800951e:	2201      	movs	r2, #1
 8009520:	4629      	mov	r1, r5
 8009522:	4620      	mov	r0, r4
 8009524:	f000 fc0a 	bl	8009d3c <__lshift>
 8009528:	9b00      	ldr	r3, [sp, #0]
 800952a:	3301      	adds	r3, #1
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009532:	4413      	add	r3, r2
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	9b02      	ldr	r3, [sp, #8]
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	46b8      	mov	r8, r7
 800953e:	9306      	str	r3, [sp, #24]
 8009540:	4607      	mov	r7, r0
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	4631      	mov	r1, r6
 8009546:	3b01      	subs	r3, #1
 8009548:	4650      	mov	r0, sl
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	f7ff fa6b 	bl	8008a26 <quorem>
 8009550:	4641      	mov	r1, r8
 8009552:	9002      	str	r0, [sp, #8]
 8009554:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009558:	4650      	mov	r0, sl
 800955a:	f000 fc5b 	bl	8009e14 <__mcmp>
 800955e:	463a      	mov	r2, r7
 8009560:	9005      	str	r0, [sp, #20]
 8009562:	4631      	mov	r1, r6
 8009564:	4620      	mov	r0, r4
 8009566:	f000 fc71 	bl	8009e4c <__mdiff>
 800956a:	68c2      	ldr	r2, [r0, #12]
 800956c:	4605      	mov	r5, r0
 800956e:	bb02      	cbnz	r2, 80095b2 <_dtoa_r+0xa7a>
 8009570:	4601      	mov	r1, r0
 8009572:	4650      	mov	r0, sl
 8009574:	f000 fc4e 	bl	8009e14 <__mcmp>
 8009578:	4602      	mov	r2, r0
 800957a:	4629      	mov	r1, r5
 800957c:	4620      	mov	r0, r4
 800957e:	9209      	str	r2, [sp, #36]	; 0x24
 8009580:	f000 fa0c 	bl	800999c <_Bfree>
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009588:	9d04      	ldr	r5, [sp, #16]
 800958a:	ea43 0102 	orr.w	r1, r3, r2
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	4319      	orrs	r1, r3
 8009592:	d110      	bne.n	80095b6 <_dtoa_r+0xa7e>
 8009594:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009598:	d029      	beq.n	80095ee <_dtoa_r+0xab6>
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd02      	ble.n	80095a6 <_dtoa_r+0xa6e>
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	f883 9000 	strb.w	r9, [r3]
 80095ac:	e774      	b.n	8009498 <_dtoa_r+0x960>
 80095ae:	4638      	mov	r0, r7
 80095b0:	e7ba      	b.n	8009528 <_dtoa_r+0x9f0>
 80095b2:	2201      	movs	r2, #1
 80095b4:	e7e1      	b.n	800957a <_dtoa_r+0xa42>
 80095b6:	9b05      	ldr	r3, [sp, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	db04      	blt.n	80095c6 <_dtoa_r+0xa8e>
 80095bc:	9907      	ldr	r1, [sp, #28]
 80095be:	430b      	orrs	r3, r1
 80095c0:	9906      	ldr	r1, [sp, #24]
 80095c2:	430b      	orrs	r3, r1
 80095c4:	d120      	bne.n	8009608 <_dtoa_r+0xad0>
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	dded      	ble.n	80095a6 <_dtoa_r+0xa6e>
 80095ca:	4651      	mov	r1, sl
 80095cc:	2201      	movs	r2, #1
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fbb4 	bl	8009d3c <__lshift>
 80095d4:	4631      	mov	r1, r6
 80095d6:	4682      	mov	sl, r0
 80095d8:	f000 fc1c 	bl	8009e14 <__mcmp>
 80095dc:	2800      	cmp	r0, #0
 80095de:	dc03      	bgt.n	80095e8 <_dtoa_r+0xab0>
 80095e0:	d1e1      	bne.n	80095a6 <_dtoa_r+0xa6e>
 80095e2:	f019 0f01 	tst.w	r9, #1
 80095e6:	d0de      	beq.n	80095a6 <_dtoa_r+0xa6e>
 80095e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095ec:	d1d8      	bne.n	80095a0 <_dtoa_r+0xa68>
 80095ee:	9a01      	ldr	r2, [sp, #4]
 80095f0:	2339      	movs	r3, #57	; 0x39
 80095f2:	7013      	strb	r3, [r2, #0]
 80095f4:	462b      	mov	r3, r5
 80095f6:	461d      	mov	r5, r3
 80095f8:	3b01      	subs	r3, #1
 80095fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095fe:	2a39      	cmp	r2, #57	; 0x39
 8009600:	d06c      	beq.n	80096dc <_dtoa_r+0xba4>
 8009602:	3201      	adds	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	e747      	b.n	8009498 <_dtoa_r+0x960>
 8009608:	2a00      	cmp	r2, #0
 800960a:	dd07      	ble.n	800961c <_dtoa_r+0xae4>
 800960c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009610:	d0ed      	beq.n	80095ee <_dtoa_r+0xab6>
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	f109 0301 	add.w	r3, r9, #1
 8009618:	7013      	strb	r3, [r2, #0]
 800961a:	e73d      	b.n	8009498 <_dtoa_r+0x960>
 800961c:	9b04      	ldr	r3, [sp, #16]
 800961e:	9a08      	ldr	r2, [sp, #32]
 8009620:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009624:	4293      	cmp	r3, r2
 8009626:	d043      	beq.n	80096b0 <_dtoa_r+0xb78>
 8009628:	4651      	mov	r1, sl
 800962a:	2300      	movs	r3, #0
 800962c:	220a      	movs	r2, #10
 800962e:	4620      	mov	r0, r4
 8009630:	f000 f9d6 	bl	80099e0 <__multadd>
 8009634:	45b8      	cmp	r8, r7
 8009636:	4682      	mov	sl, r0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	f04f 020a 	mov.w	r2, #10
 8009640:	4641      	mov	r1, r8
 8009642:	4620      	mov	r0, r4
 8009644:	d107      	bne.n	8009656 <_dtoa_r+0xb1e>
 8009646:	f000 f9cb 	bl	80099e0 <__multadd>
 800964a:	4680      	mov	r8, r0
 800964c:	4607      	mov	r7, r0
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	3301      	adds	r3, #1
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	e775      	b.n	8009542 <_dtoa_r+0xa0a>
 8009656:	f000 f9c3 	bl	80099e0 <__multadd>
 800965a:	4639      	mov	r1, r7
 800965c:	4680      	mov	r8, r0
 800965e:	2300      	movs	r3, #0
 8009660:	220a      	movs	r2, #10
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f9bc 	bl	80099e0 <__multadd>
 8009668:	4607      	mov	r7, r0
 800966a:	e7f0      	b.n	800964e <_dtoa_r+0xb16>
 800966c:	9b04      	ldr	r3, [sp, #16]
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	9d00      	ldr	r5, [sp, #0]
 8009672:	4631      	mov	r1, r6
 8009674:	4650      	mov	r0, sl
 8009676:	f7ff f9d6 	bl	8008a26 <quorem>
 800967a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800967e:	9b00      	ldr	r3, [sp, #0]
 8009680:	f805 9b01 	strb.w	r9, [r5], #1
 8009684:	1aea      	subs	r2, r5, r3
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	4293      	cmp	r3, r2
 800968a:	dd07      	ble.n	800969c <_dtoa_r+0xb64>
 800968c:	4651      	mov	r1, sl
 800968e:	2300      	movs	r3, #0
 8009690:	220a      	movs	r2, #10
 8009692:	4620      	mov	r0, r4
 8009694:	f000 f9a4 	bl	80099e0 <__multadd>
 8009698:	4682      	mov	sl, r0
 800969a:	e7ea      	b.n	8009672 <_dtoa_r+0xb3a>
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfc8      	it	gt
 80096a2:	461d      	movgt	r5, r3
 80096a4:	9b00      	ldr	r3, [sp, #0]
 80096a6:	bfd8      	it	le
 80096a8:	2501      	movle	r5, #1
 80096aa:	441d      	add	r5, r3
 80096ac:	f04f 0800 	mov.w	r8, #0
 80096b0:	4651      	mov	r1, sl
 80096b2:	2201      	movs	r2, #1
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fb41 	bl	8009d3c <__lshift>
 80096ba:	4631      	mov	r1, r6
 80096bc:	4682      	mov	sl, r0
 80096be:	f000 fba9 	bl	8009e14 <__mcmp>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	dc96      	bgt.n	80095f4 <_dtoa_r+0xabc>
 80096c6:	d102      	bne.n	80096ce <_dtoa_r+0xb96>
 80096c8:	f019 0f01 	tst.w	r9, #1
 80096cc:	d192      	bne.n	80095f4 <_dtoa_r+0xabc>
 80096ce:	462b      	mov	r3, r5
 80096d0:	461d      	mov	r5, r3
 80096d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096d6:	2a30      	cmp	r2, #48	; 0x30
 80096d8:	d0fa      	beq.n	80096d0 <_dtoa_r+0xb98>
 80096da:	e6dd      	b.n	8009498 <_dtoa_r+0x960>
 80096dc:	9a00      	ldr	r2, [sp, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d189      	bne.n	80095f6 <_dtoa_r+0xabe>
 80096e2:	f10b 0b01 	add.w	fp, fp, #1
 80096e6:	2331      	movs	r3, #49	; 0x31
 80096e8:	e796      	b.n	8009618 <_dtoa_r+0xae0>
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <_dtoa_r+0xbdc>)
 80096ec:	f7ff ba99 	b.w	8008c22 <_dtoa_r+0xea>
 80096f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f47f aa6d 	bne.w	8008bd2 <_dtoa_r+0x9a>
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <_dtoa_r+0xbe0>)
 80096fa:	f7ff ba92 	b.w	8008c22 <_dtoa_r+0xea>
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	dcb5      	bgt.n	8009670 <_dtoa_r+0xb38>
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	2b02      	cmp	r3, #2
 8009708:	f73f aeb1 	bgt.w	800946e <_dtoa_r+0x936>
 800970c:	e7b0      	b.n	8009670 <_dtoa_r+0xb38>
 800970e:	bf00      	nop
 8009710:	0800c2e4 	.word	0x0800c2e4
 8009714:	0800c244 	.word	0x0800c244
 8009718:	0800c268 	.word	0x0800c268

0800971c <_free_r>:
 800971c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800971e:	2900      	cmp	r1, #0
 8009720:	d044      	beq.n	80097ac <_free_r+0x90>
 8009722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009726:	9001      	str	r0, [sp, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f1a1 0404 	sub.w	r4, r1, #4
 800972e:	bfb8      	it	lt
 8009730:	18e4      	addlt	r4, r4, r3
 8009732:	f000 f8e7 	bl	8009904 <__malloc_lock>
 8009736:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <_free_r+0x94>)
 8009738:	9801      	ldr	r0, [sp, #4]
 800973a:	6813      	ldr	r3, [r2, #0]
 800973c:	b933      	cbnz	r3, 800974c <_free_r+0x30>
 800973e:	6063      	str	r3, [r4, #4]
 8009740:	6014      	str	r4, [r2, #0]
 8009742:	b003      	add	sp, #12
 8009744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009748:	f000 b8e2 	b.w	8009910 <__malloc_unlock>
 800974c:	42a3      	cmp	r3, r4
 800974e:	d908      	bls.n	8009762 <_free_r+0x46>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	1961      	adds	r1, r4, r5
 8009754:	428b      	cmp	r3, r1
 8009756:	bf01      	itttt	eq
 8009758:	6819      	ldreq	r1, [r3, #0]
 800975a:	685b      	ldreq	r3, [r3, #4]
 800975c:	1949      	addeq	r1, r1, r5
 800975e:	6021      	streq	r1, [r4, #0]
 8009760:	e7ed      	b.n	800973e <_free_r+0x22>
 8009762:	461a      	mov	r2, r3
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b10b      	cbz	r3, 800976c <_free_r+0x50>
 8009768:	42a3      	cmp	r3, r4
 800976a:	d9fa      	bls.n	8009762 <_free_r+0x46>
 800976c:	6811      	ldr	r1, [r2, #0]
 800976e:	1855      	adds	r5, r2, r1
 8009770:	42a5      	cmp	r5, r4
 8009772:	d10b      	bne.n	800978c <_free_r+0x70>
 8009774:	6824      	ldr	r4, [r4, #0]
 8009776:	4421      	add	r1, r4
 8009778:	1854      	adds	r4, r2, r1
 800977a:	42a3      	cmp	r3, r4
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	d1e0      	bne.n	8009742 <_free_r+0x26>
 8009780:	681c      	ldr	r4, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	6053      	str	r3, [r2, #4]
 8009786:	440c      	add	r4, r1
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	e7da      	b.n	8009742 <_free_r+0x26>
 800978c:	d902      	bls.n	8009794 <_free_r+0x78>
 800978e:	230c      	movs	r3, #12
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	e7d6      	b.n	8009742 <_free_r+0x26>
 8009794:	6825      	ldr	r5, [r4, #0]
 8009796:	1961      	adds	r1, r4, r5
 8009798:	428b      	cmp	r3, r1
 800979a:	bf04      	itt	eq
 800979c:	6819      	ldreq	r1, [r3, #0]
 800979e:	685b      	ldreq	r3, [r3, #4]
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	bf04      	itt	eq
 80097a4:	1949      	addeq	r1, r1, r5
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	6054      	str	r4, [r2, #4]
 80097aa:	e7ca      	b.n	8009742 <_free_r+0x26>
 80097ac:	b003      	add	sp, #12
 80097ae:	bd30      	pop	{r4, r5, pc}
 80097b0:	20001dec 	.word	0x20001dec

080097b4 <malloc>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <malloc+0xc>)
 80097b6:	4601      	mov	r1, r0
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	f000 b823 	b.w	8009804 <_malloc_r>
 80097be:	bf00      	nop
 80097c0:	200000a0 	.word	0x200000a0

080097c4 <sbrk_aligned>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	4e0e      	ldr	r6, [pc, #56]	; (8009800 <sbrk_aligned+0x3c>)
 80097c8:	460c      	mov	r4, r1
 80097ca:	6831      	ldr	r1, [r6, #0]
 80097cc:	4605      	mov	r5, r0
 80097ce:	b911      	cbnz	r1, 80097d6 <sbrk_aligned+0x12>
 80097d0:	f000 fe40 	bl	800a454 <_sbrk_r>
 80097d4:	6030      	str	r0, [r6, #0]
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 fe3b 	bl	800a454 <_sbrk_r>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d00a      	beq.n	80097f8 <sbrk_aligned+0x34>
 80097e2:	1cc4      	adds	r4, r0, #3
 80097e4:	f024 0403 	bic.w	r4, r4, #3
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d007      	beq.n	80097fc <sbrk_aligned+0x38>
 80097ec:	1a21      	subs	r1, r4, r0
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 fe30 	bl	800a454 <_sbrk_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d101      	bne.n	80097fc <sbrk_aligned+0x38>
 80097f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80097fc:	4620      	mov	r0, r4
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	20001df0 	.word	0x20001df0

08009804 <_malloc_r>:
 8009804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009808:	1ccd      	adds	r5, r1, #3
 800980a:	f025 0503 	bic.w	r5, r5, #3
 800980e:	3508      	adds	r5, #8
 8009810:	2d0c      	cmp	r5, #12
 8009812:	bf38      	it	cc
 8009814:	250c      	movcc	r5, #12
 8009816:	2d00      	cmp	r5, #0
 8009818:	4607      	mov	r7, r0
 800981a:	db01      	blt.n	8009820 <_malloc_r+0x1c>
 800981c:	42a9      	cmp	r1, r5
 800981e:	d905      	bls.n	800982c <_malloc_r+0x28>
 8009820:	230c      	movs	r3, #12
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	2600      	movs	r6, #0
 8009826:	4630      	mov	r0, r6
 8009828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009900 <_malloc_r+0xfc>
 8009830:	f000 f868 	bl	8009904 <__malloc_lock>
 8009834:	f8d8 3000 	ldr.w	r3, [r8]
 8009838:	461c      	mov	r4, r3
 800983a:	bb5c      	cbnz	r4, 8009894 <_malloc_r+0x90>
 800983c:	4629      	mov	r1, r5
 800983e:	4638      	mov	r0, r7
 8009840:	f7ff ffc0 	bl	80097c4 <sbrk_aligned>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	4604      	mov	r4, r0
 8009848:	d155      	bne.n	80098f6 <_malloc_r+0xf2>
 800984a:	f8d8 4000 	ldr.w	r4, [r8]
 800984e:	4626      	mov	r6, r4
 8009850:	2e00      	cmp	r6, #0
 8009852:	d145      	bne.n	80098e0 <_malloc_r+0xdc>
 8009854:	2c00      	cmp	r4, #0
 8009856:	d048      	beq.n	80098ea <_malloc_r+0xe6>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	4631      	mov	r1, r6
 800985c:	4638      	mov	r0, r7
 800985e:	eb04 0903 	add.w	r9, r4, r3
 8009862:	f000 fdf7 	bl	800a454 <_sbrk_r>
 8009866:	4581      	cmp	r9, r0
 8009868:	d13f      	bne.n	80098ea <_malloc_r+0xe6>
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	1a6d      	subs	r5, r5, r1
 800986e:	4629      	mov	r1, r5
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff ffa7 	bl	80097c4 <sbrk_aligned>
 8009876:	3001      	adds	r0, #1
 8009878:	d037      	beq.n	80098ea <_malloc_r+0xe6>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	442b      	add	r3, r5
 800987e:	6023      	str	r3, [r4, #0]
 8009880:	f8d8 3000 	ldr.w	r3, [r8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d038      	beq.n	80098fa <_malloc_r+0xf6>
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	42a2      	cmp	r2, r4
 800988c:	d12b      	bne.n	80098e6 <_malloc_r+0xe2>
 800988e:	2200      	movs	r2, #0
 8009890:	605a      	str	r2, [r3, #4]
 8009892:	e00f      	b.n	80098b4 <_malloc_r+0xb0>
 8009894:	6822      	ldr	r2, [r4, #0]
 8009896:	1b52      	subs	r2, r2, r5
 8009898:	d41f      	bmi.n	80098da <_malloc_r+0xd6>
 800989a:	2a0b      	cmp	r2, #11
 800989c:	d917      	bls.n	80098ce <_malloc_r+0xca>
 800989e:	1961      	adds	r1, r4, r5
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	6025      	str	r5, [r4, #0]
 80098a4:	bf18      	it	ne
 80098a6:	6059      	strne	r1, [r3, #4]
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	bf08      	it	eq
 80098ac:	f8c8 1000 	streq.w	r1, [r8]
 80098b0:	5162      	str	r2, [r4, r5]
 80098b2:	604b      	str	r3, [r1, #4]
 80098b4:	4638      	mov	r0, r7
 80098b6:	f104 060b 	add.w	r6, r4, #11
 80098ba:	f000 f829 	bl	8009910 <__malloc_unlock>
 80098be:	f026 0607 	bic.w	r6, r6, #7
 80098c2:	1d23      	adds	r3, r4, #4
 80098c4:	1af2      	subs	r2, r6, r3
 80098c6:	d0ae      	beq.n	8009826 <_malloc_r+0x22>
 80098c8:	1b9b      	subs	r3, r3, r6
 80098ca:	50a3      	str	r3, [r4, r2]
 80098cc:	e7ab      	b.n	8009826 <_malloc_r+0x22>
 80098ce:	42a3      	cmp	r3, r4
 80098d0:	6862      	ldr	r2, [r4, #4]
 80098d2:	d1dd      	bne.n	8009890 <_malloc_r+0x8c>
 80098d4:	f8c8 2000 	str.w	r2, [r8]
 80098d8:	e7ec      	b.n	80098b4 <_malloc_r+0xb0>
 80098da:	4623      	mov	r3, r4
 80098dc:	6864      	ldr	r4, [r4, #4]
 80098de:	e7ac      	b.n	800983a <_malloc_r+0x36>
 80098e0:	4634      	mov	r4, r6
 80098e2:	6876      	ldr	r6, [r6, #4]
 80098e4:	e7b4      	b.n	8009850 <_malloc_r+0x4c>
 80098e6:	4613      	mov	r3, r2
 80098e8:	e7cc      	b.n	8009884 <_malloc_r+0x80>
 80098ea:	230c      	movs	r3, #12
 80098ec:	603b      	str	r3, [r7, #0]
 80098ee:	4638      	mov	r0, r7
 80098f0:	f000 f80e 	bl	8009910 <__malloc_unlock>
 80098f4:	e797      	b.n	8009826 <_malloc_r+0x22>
 80098f6:	6025      	str	r5, [r4, #0]
 80098f8:	e7dc      	b.n	80098b4 <_malloc_r+0xb0>
 80098fa:	605b      	str	r3, [r3, #4]
 80098fc:	deff      	udf	#255	; 0xff
 80098fe:	bf00      	nop
 8009900:	20001dec 	.word	0x20001dec

08009904 <__malloc_lock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_lock+0x8>)
 8009906:	f7ff b87e 	b.w	8008a06 <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	20001de8 	.word	0x20001de8

08009910 <__malloc_unlock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_unlock+0x8>)
 8009912:	f7ff b879 	b.w	8008a08 <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	20001de8 	.word	0x20001de8

0800991c <_Balloc>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	69c6      	ldr	r6, [r0, #28]
 8009920:	4604      	mov	r4, r0
 8009922:	460d      	mov	r5, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Balloc+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7ff ff44 	bl	80097b4 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	61e0      	str	r0, [r4, #28]
 8009930:	b920      	cbnz	r0, 800993c <_Balloc+0x20>
 8009932:	4b18      	ldr	r3, [pc, #96]	; (8009994 <_Balloc+0x78>)
 8009934:	4818      	ldr	r0, [pc, #96]	; (8009998 <_Balloc+0x7c>)
 8009936:	216b      	movs	r1, #107	; 0x6b
 8009938:	f000 fd9c 	bl	800a474 <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	69e6      	ldr	r6, [r4, #28]
 8009946:	68f3      	ldr	r3, [r6, #12]
 8009948:	b183      	cbz	r3, 800996c <_Balloc+0x50>
 800994a:	69e3      	ldr	r3, [r4, #28]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009952:	b9b8      	cbnz	r0, 8009984 <_Balloc+0x68>
 8009954:	2101      	movs	r1, #1
 8009956:	fa01 f605 	lsl.w	r6, r1, r5
 800995a:	1d72      	adds	r2, r6, #5
 800995c:	0092      	lsls	r2, r2, #2
 800995e:	4620      	mov	r0, r4
 8009960:	f000 fda6 	bl	800a4b0 <_calloc_r>
 8009964:	b160      	cbz	r0, 8009980 <_Balloc+0x64>
 8009966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800996a:	e00e      	b.n	800998a <_Balloc+0x6e>
 800996c:	2221      	movs	r2, #33	; 0x21
 800996e:	2104      	movs	r1, #4
 8009970:	4620      	mov	r0, r4
 8009972:	f000 fd9d 	bl	800a4b0 <_calloc_r>
 8009976:	69e3      	ldr	r3, [r4, #28]
 8009978:	60f0      	str	r0, [r6, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e4      	bne.n	800994a <_Balloc+0x2e>
 8009980:	2000      	movs	r0, #0
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	6802      	ldr	r2, [r0, #0]
 8009986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800998a:	2300      	movs	r3, #0
 800998c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009990:	e7f7      	b.n	8009982 <_Balloc+0x66>
 8009992:	bf00      	nop
 8009994:	0800c275 	.word	0x0800c275
 8009998:	0800c2f5 	.word	0x0800c2f5

0800999c <_Bfree>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	69c6      	ldr	r6, [r0, #28]
 80099a0:	4605      	mov	r5, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	b976      	cbnz	r6, 80099c4 <_Bfree+0x28>
 80099a6:	2010      	movs	r0, #16
 80099a8:	f7ff ff04 	bl	80097b4 <malloc>
 80099ac:	4602      	mov	r2, r0
 80099ae:	61e8      	str	r0, [r5, #28]
 80099b0:	b920      	cbnz	r0, 80099bc <_Bfree+0x20>
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <_Bfree+0x3c>)
 80099b4:	4809      	ldr	r0, [pc, #36]	; (80099dc <_Bfree+0x40>)
 80099b6:	218f      	movs	r1, #143	; 0x8f
 80099b8:	f000 fd5c 	bl	800a474 <__assert_func>
 80099bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099c0:	6006      	str	r6, [r0, #0]
 80099c2:	60c6      	str	r6, [r0, #12]
 80099c4:	b13c      	cbz	r4, 80099d6 <_Bfree+0x3a>
 80099c6:	69eb      	ldr	r3, [r5, #28]
 80099c8:	6862      	ldr	r2, [r4, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099d0:	6021      	str	r1, [r4, #0]
 80099d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	0800c275 	.word	0x0800c275
 80099dc:	0800c2f5 	.word	0x0800c2f5

080099e0 <__multadd>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	690d      	ldr	r5, [r1, #16]
 80099e6:	4607      	mov	r7, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	461e      	mov	r6, r3
 80099ec:	f101 0c14 	add.w	ip, r1, #20
 80099f0:	2000      	movs	r0, #0
 80099f2:	f8dc 3000 	ldr.w	r3, [ip]
 80099f6:	b299      	uxth	r1, r3
 80099f8:	fb02 6101 	mla	r1, r2, r1, r6
 80099fc:	0c1e      	lsrs	r6, r3, #16
 80099fe:	0c0b      	lsrs	r3, r1, #16
 8009a00:	fb02 3306 	mla	r3, r2, r6, r3
 8009a04:	b289      	uxth	r1, r1
 8009a06:	3001      	adds	r0, #1
 8009a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a0c:	4285      	cmp	r5, r0
 8009a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a16:	dcec      	bgt.n	80099f2 <__multadd+0x12>
 8009a18:	b30e      	cbz	r6, 8009a5e <__multadd+0x7e>
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	dc19      	bgt.n	8009a54 <__multadd+0x74>
 8009a20:	6861      	ldr	r1, [r4, #4]
 8009a22:	4638      	mov	r0, r7
 8009a24:	3101      	adds	r1, #1
 8009a26:	f7ff ff79 	bl	800991c <_Balloc>
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <__multadd+0x5a>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <__multadd+0x84>)
 8009a32:	480d      	ldr	r0, [pc, #52]	; (8009a68 <__multadd+0x88>)
 8009a34:	21ba      	movs	r1, #186	; 0xba
 8009a36:	f000 fd1d 	bl	800a474 <__assert_func>
 8009a3a:	6922      	ldr	r2, [r4, #16]
 8009a3c:	3202      	adds	r2, #2
 8009a3e:	f104 010c 	add.w	r1, r4, #12
 8009a42:	0092      	lsls	r2, r2, #2
 8009a44:	300c      	adds	r0, #12
 8009a46:	f7fe ffe0 	bl	8008a0a <memcpy>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ffa5 	bl	800999c <_Bfree>
 8009a52:	4644      	mov	r4, r8
 8009a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a58:	3501      	adds	r5, #1
 8009a5a:	615e      	str	r6, [r3, #20]
 8009a5c:	6125      	str	r5, [r4, #16]
 8009a5e:	4620      	mov	r0, r4
 8009a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a64:	0800c2e4 	.word	0x0800c2e4
 8009a68:	0800c2f5 	.word	0x0800c2f5

08009a6c <__hi0bits>:
 8009a6c:	0c03      	lsrs	r3, r0, #16
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	b9d3      	cbnz	r3, 8009aa8 <__hi0bits+0x3c>
 8009a72:	0400      	lsls	r0, r0, #16
 8009a74:	2310      	movs	r3, #16
 8009a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a7a:	bf04      	itt	eq
 8009a7c:	0200      	lsleq	r0, r0, #8
 8009a7e:	3308      	addeq	r3, #8
 8009a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a84:	bf04      	itt	eq
 8009a86:	0100      	lsleq	r0, r0, #4
 8009a88:	3304      	addeq	r3, #4
 8009a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a8e:	bf04      	itt	eq
 8009a90:	0080      	lsleq	r0, r0, #2
 8009a92:	3302      	addeq	r3, #2
 8009a94:	2800      	cmp	r0, #0
 8009a96:	db05      	blt.n	8009aa4 <__hi0bits+0x38>
 8009a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a9c:	f103 0301 	add.w	r3, r3, #1
 8009aa0:	bf08      	it	eq
 8009aa2:	2320      	moveq	r3, #32
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	4770      	bx	lr
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e7e4      	b.n	8009a76 <__hi0bits+0xa>

08009aac <__lo0bits>:
 8009aac:	6803      	ldr	r3, [r0, #0]
 8009aae:	f013 0207 	ands.w	r2, r3, #7
 8009ab2:	d00c      	beq.n	8009ace <__lo0bits+0x22>
 8009ab4:	07d9      	lsls	r1, r3, #31
 8009ab6:	d422      	bmi.n	8009afe <__lo0bits+0x52>
 8009ab8:	079a      	lsls	r2, r3, #30
 8009aba:	bf49      	itett	mi
 8009abc:	085b      	lsrmi	r3, r3, #1
 8009abe:	089b      	lsrpl	r3, r3, #2
 8009ac0:	6003      	strmi	r3, [r0, #0]
 8009ac2:	2201      	movmi	r2, #1
 8009ac4:	bf5c      	itt	pl
 8009ac6:	6003      	strpl	r3, [r0, #0]
 8009ac8:	2202      	movpl	r2, #2
 8009aca:	4610      	mov	r0, r2
 8009acc:	4770      	bx	lr
 8009ace:	b299      	uxth	r1, r3
 8009ad0:	b909      	cbnz	r1, 8009ad6 <__lo0bits+0x2a>
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	2210      	movs	r2, #16
 8009ad6:	b2d9      	uxtb	r1, r3
 8009ad8:	b909      	cbnz	r1, 8009ade <__lo0bits+0x32>
 8009ada:	3208      	adds	r2, #8
 8009adc:	0a1b      	lsrs	r3, r3, #8
 8009ade:	0719      	lsls	r1, r3, #28
 8009ae0:	bf04      	itt	eq
 8009ae2:	091b      	lsreq	r3, r3, #4
 8009ae4:	3204      	addeq	r2, #4
 8009ae6:	0799      	lsls	r1, r3, #30
 8009ae8:	bf04      	itt	eq
 8009aea:	089b      	lsreq	r3, r3, #2
 8009aec:	3202      	addeq	r2, #2
 8009aee:	07d9      	lsls	r1, r3, #31
 8009af0:	d403      	bmi.n	8009afa <__lo0bits+0x4e>
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	f102 0201 	add.w	r2, r2, #1
 8009af8:	d003      	beq.n	8009b02 <__lo0bits+0x56>
 8009afa:	6003      	str	r3, [r0, #0]
 8009afc:	e7e5      	b.n	8009aca <__lo0bits+0x1e>
 8009afe:	2200      	movs	r2, #0
 8009b00:	e7e3      	b.n	8009aca <__lo0bits+0x1e>
 8009b02:	2220      	movs	r2, #32
 8009b04:	e7e1      	b.n	8009aca <__lo0bits+0x1e>
	...

08009b08 <__i2b>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	f7ff ff05 	bl	800991c <_Balloc>
 8009b12:	4602      	mov	r2, r0
 8009b14:	b928      	cbnz	r0, 8009b22 <__i2b+0x1a>
 8009b16:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <__i2b+0x24>)
 8009b18:	4805      	ldr	r0, [pc, #20]	; (8009b30 <__i2b+0x28>)
 8009b1a:	f240 1145 	movw	r1, #325	; 0x145
 8009b1e:	f000 fca9 	bl	800a474 <__assert_func>
 8009b22:	2301      	movs	r3, #1
 8009b24:	6144      	str	r4, [r0, #20]
 8009b26:	6103      	str	r3, [r0, #16]
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop
 8009b2c:	0800c2e4 	.word	0x0800c2e4
 8009b30:	0800c2f5 	.word	0x0800c2f5

08009b34 <__multiply>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	4691      	mov	r9, r2
 8009b3a:	690a      	ldr	r2, [r1, #16]
 8009b3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	bfb8      	it	lt
 8009b44:	460b      	movlt	r3, r1
 8009b46:	460c      	mov	r4, r1
 8009b48:	bfbc      	itt	lt
 8009b4a:	464c      	movlt	r4, r9
 8009b4c:	4699      	movlt	r9, r3
 8009b4e:	6927      	ldr	r7, [r4, #16]
 8009b50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b54:	68a3      	ldr	r3, [r4, #8]
 8009b56:	6861      	ldr	r1, [r4, #4]
 8009b58:	eb07 060a 	add.w	r6, r7, sl
 8009b5c:	42b3      	cmp	r3, r6
 8009b5e:	b085      	sub	sp, #20
 8009b60:	bfb8      	it	lt
 8009b62:	3101      	addlt	r1, #1
 8009b64:	f7ff feda 	bl	800991c <_Balloc>
 8009b68:	b930      	cbnz	r0, 8009b78 <__multiply+0x44>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	4b44      	ldr	r3, [pc, #272]	; (8009c80 <__multiply+0x14c>)
 8009b6e:	4845      	ldr	r0, [pc, #276]	; (8009c84 <__multiply+0x150>)
 8009b70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b74:	f000 fc7e 	bl	800a474 <__assert_func>
 8009b78:	f100 0514 	add.w	r5, r0, #20
 8009b7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b80:	462b      	mov	r3, r5
 8009b82:	2200      	movs	r2, #0
 8009b84:	4543      	cmp	r3, r8
 8009b86:	d321      	bcc.n	8009bcc <__multiply+0x98>
 8009b88:	f104 0314 	add.w	r3, r4, #20
 8009b8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b90:	f109 0314 	add.w	r3, r9, #20
 8009b94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b98:	9202      	str	r2, [sp, #8]
 8009b9a:	1b3a      	subs	r2, r7, r4
 8009b9c:	3a15      	subs	r2, #21
 8009b9e:	f022 0203 	bic.w	r2, r2, #3
 8009ba2:	3204      	adds	r2, #4
 8009ba4:	f104 0115 	add.w	r1, r4, #21
 8009ba8:	428f      	cmp	r7, r1
 8009baa:	bf38      	it	cc
 8009bac:	2204      	movcc	r2, #4
 8009bae:	9201      	str	r2, [sp, #4]
 8009bb0:	9a02      	ldr	r2, [sp, #8]
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d80c      	bhi.n	8009bd2 <__multiply+0x9e>
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	dd03      	ble.n	8009bc4 <__multiply+0x90>
 8009bbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d05b      	beq.n	8009c7c <__multiply+0x148>
 8009bc4:	6106      	str	r6, [r0, #16]
 8009bc6:	b005      	add	sp, #20
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	f843 2b04 	str.w	r2, [r3], #4
 8009bd0:	e7d8      	b.n	8009b84 <__multiply+0x50>
 8009bd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bd6:	f1ba 0f00 	cmp.w	sl, #0
 8009bda:	d024      	beq.n	8009c26 <__multiply+0xf2>
 8009bdc:	f104 0e14 	add.w	lr, r4, #20
 8009be0:	46a9      	mov	r9, r5
 8009be2:	f04f 0c00 	mov.w	ip, #0
 8009be6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bea:	f8d9 1000 	ldr.w	r1, [r9]
 8009bee:	fa1f fb82 	uxth.w	fp, r2
 8009bf2:	b289      	uxth	r1, r1
 8009bf4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8009c00:	4461      	add	r1, ip
 8009c02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c06:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c0e:	b289      	uxth	r1, r1
 8009c10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c14:	4577      	cmp	r7, lr
 8009c16:	f849 1b04 	str.w	r1, [r9], #4
 8009c1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c1e:	d8e2      	bhi.n	8009be6 <__multiply+0xb2>
 8009c20:	9a01      	ldr	r2, [sp, #4]
 8009c22:	f845 c002 	str.w	ip, [r5, r2]
 8009c26:	9a03      	ldr	r2, [sp, #12]
 8009c28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	f1b9 0f00 	cmp.w	r9, #0
 8009c32:	d021      	beq.n	8009c78 <__multiply+0x144>
 8009c34:	6829      	ldr	r1, [r5, #0]
 8009c36:	f104 0c14 	add.w	ip, r4, #20
 8009c3a:	46ae      	mov	lr, r5
 8009c3c:	f04f 0a00 	mov.w	sl, #0
 8009c40:	f8bc b000 	ldrh.w	fp, [ip]
 8009c44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c48:	fb09 220b 	mla	r2, r9, fp, r2
 8009c4c:	4452      	add	r2, sl
 8009c4e:	b289      	uxth	r1, r1
 8009c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c54:	f84e 1b04 	str.w	r1, [lr], #4
 8009c58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c60:	f8be 1000 	ldrh.w	r1, [lr]
 8009c64:	fb09 110a 	mla	r1, r9, sl, r1
 8009c68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c6c:	4567      	cmp	r7, ip
 8009c6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c72:	d8e5      	bhi.n	8009c40 <__multiply+0x10c>
 8009c74:	9a01      	ldr	r2, [sp, #4]
 8009c76:	50a9      	str	r1, [r5, r2]
 8009c78:	3504      	adds	r5, #4
 8009c7a:	e799      	b.n	8009bb0 <__multiply+0x7c>
 8009c7c:	3e01      	subs	r6, #1
 8009c7e:	e79b      	b.n	8009bb8 <__multiply+0x84>
 8009c80:	0800c2e4 	.word	0x0800c2e4
 8009c84:	0800c2f5 	.word	0x0800c2f5

08009c88 <__pow5mult>:
 8009c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c8c:	4615      	mov	r5, r2
 8009c8e:	f012 0203 	ands.w	r2, r2, #3
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	d007      	beq.n	8009ca8 <__pow5mult+0x20>
 8009c98:	4c25      	ldr	r4, [pc, #148]	; (8009d30 <__pow5mult+0xa8>)
 8009c9a:	3a01      	subs	r2, #1
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ca2:	f7ff fe9d 	bl	80099e0 <__multadd>
 8009ca6:	4607      	mov	r7, r0
 8009ca8:	10ad      	asrs	r5, r5, #2
 8009caa:	d03d      	beq.n	8009d28 <__pow5mult+0xa0>
 8009cac:	69f4      	ldr	r4, [r6, #28]
 8009cae:	b97c      	cbnz	r4, 8009cd0 <__pow5mult+0x48>
 8009cb0:	2010      	movs	r0, #16
 8009cb2:	f7ff fd7f 	bl	80097b4 <malloc>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	61f0      	str	r0, [r6, #28]
 8009cba:	b928      	cbnz	r0, 8009cc8 <__pow5mult+0x40>
 8009cbc:	4b1d      	ldr	r3, [pc, #116]	; (8009d34 <__pow5mult+0xac>)
 8009cbe:	481e      	ldr	r0, [pc, #120]	; (8009d38 <__pow5mult+0xb0>)
 8009cc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009cc4:	f000 fbd6 	bl	800a474 <__assert_func>
 8009cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ccc:	6004      	str	r4, [r0, #0]
 8009cce:	60c4      	str	r4, [r0, #12]
 8009cd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cd8:	b94c      	cbnz	r4, 8009cee <__pow5mult+0x66>
 8009cda:	f240 2171 	movw	r1, #625	; 0x271
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ff12 	bl	8009b08 <__i2b>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cea:	4604      	mov	r4, r0
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	f04f 0900 	mov.w	r9, #0
 8009cf2:	07eb      	lsls	r3, r5, #31
 8009cf4:	d50a      	bpl.n	8009d0c <__pow5mult+0x84>
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7ff ff1a 	bl	8009b34 <__multiply>
 8009d00:	4639      	mov	r1, r7
 8009d02:	4680      	mov	r8, r0
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff fe49 	bl	800999c <_Bfree>
 8009d0a:	4647      	mov	r7, r8
 8009d0c:	106d      	asrs	r5, r5, #1
 8009d0e:	d00b      	beq.n	8009d28 <__pow5mult+0xa0>
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	b938      	cbnz	r0, 8009d24 <__pow5mult+0x9c>
 8009d14:	4622      	mov	r2, r4
 8009d16:	4621      	mov	r1, r4
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff ff0b 	bl	8009b34 <__multiply>
 8009d1e:	6020      	str	r0, [r4, #0]
 8009d20:	f8c0 9000 	str.w	r9, [r0]
 8009d24:	4604      	mov	r4, r0
 8009d26:	e7e4      	b.n	8009cf2 <__pow5mult+0x6a>
 8009d28:	4638      	mov	r0, r7
 8009d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	bf00      	nop
 8009d30:	0800c440 	.word	0x0800c440
 8009d34:	0800c275 	.word	0x0800c275
 8009d38:	0800c2f5 	.word	0x0800c2f5

08009d3c <__lshift>:
 8009d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	6849      	ldr	r1, [r1, #4]
 8009d44:	6923      	ldr	r3, [r4, #16]
 8009d46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	4691      	mov	r9, r2
 8009d50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d54:	f108 0601 	add.w	r6, r8, #1
 8009d58:	42b3      	cmp	r3, r6
 8009d5a:	db0b      	blt.n	8009d74 <__lshift+0x38>
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f7ff fddd 	bl	800991c <_Balloc>
 8009d62:	4605      	mov	r5, r0
 8009d64:	b948      	cbnz	r0, 8009d7a <__lshift+0x3e>
 8009d66:	4602      	mov	r2, r0
 8009d68:	4b28      	ldr	r3, [pc, #160]	; (8009e0c <__lshift+0xd0>)
 8009d6a:	4829      	ldr	r0, [pc, #164]	; (8009e10 <__lshift+0xd4>)
 8009d6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d70:	f000 fb80 	bl	800a474 <__assert_func>
 8009d74:	3101      	adds	r1, #1
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	e7ee      	b.n	8009d58 <__lshift+0x1c>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f100 0114 	add.w	r1, r0, #20
 8009d80:	f100 0210 	add.w	r2, r0, #16
 8009d84:	4618      	mov	r0, r3
 8009d86:	4553      	cmp	r3, sl
 8009d88:	db33      	blt.n	8009df2 <__lshift+0xb6>
 8009d8a:	6920      	ldr	r0, [r4, #16]
 8009d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d90:	f104 0314 	add.w	r3, r4, #20
 8009d94:	f019 091f 	ands.w	r9, r9, #31
 8009d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009da0:	d02b      	beq.n	8009dfa <__lshift+0xbe>
 8009da2:	f1c9 0e20 	rsb	lr, r9, #32
 8009da6:	468a      	mov	sl, r1
 8009da8:	2200      	movs	r2, #0
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	fa00 f009 	lsl.w	r0, r0, r9
 8009db0:	4310      	orrs	r0, r2
 8009db2:	f84a 0b04 	str.w	r0, [sl], #4
 8009db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dba:	459c      	cmp	ip, r3
 8009dbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dc0:	d8f3      	bhi.n	8009daa <__lshift+0x6e>
 8009dc2:	ebac 0304 	sub.w	r3, ip, r4
 8009dc6:	3b15      	subs	r3, #21
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	3304      	adds	r3, #4
 8009dce:	f104 0015 	add.w	r0, r4, #21
 8009dd2:	4584      	cmp	ip, r0
 8009dd4:	bf38      	it	cc
 8009dd6:	2304      	movcc	r3, #4
 8009dd8:	50ca      	str	r2, [r1, r3]
 8009dda:	b10a      	cbz	r2, 8009de0 <__lshift+0xa4>
 8009ddc:	f108 0602 	add.w	r6, r8, #2
 8009de0:	3e01      	subs	r6, #1
 8009de2:	4638      	mov	r0, r7
 8009de4:	612e      	str	r6, [r5, #16]
 8009de6:	4621      	mov	r1, r4
 8009de8:	f7ff fdd8 	bl	800999c <_Bfree>
 8009dec:	4628      	mov	r0, r5
 8009dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009df6:	3301      	adds	r3, #1
 8009df8:	e7c5      	b.n	8009d86 <__lshift+0x4a>
 8009dfa:	3904      	subs	r1, #4
 8009dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e00:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e04:	459c      	cmp	ip, r3
 8009e06:	d8f9      	bhi.n	8009dfc <__lshift+0xc0>
 8009e08:	e7ea      	b.n	8009de0 <__lshift+0xa4>
 8009e0a:	bf00      	nop
 8009e0c:	0800c2e4 	.word	0x0800c2e4
 8009e10:	0800c2f5 	.word	0x0800c2f5

08009e14 <__mcmp>:
 8009e14:	b530      	push	{r4, r5, lr}
 8009e16:	6902      	ldr	r2, [r0, #16]
 8009e18:	690c      	ldr	r4, [r1, #16]
 8009e1a:	1b12      	subs	r2, r2, r4
 8009e1c:	d10e      	bne.n	8009e3c <__mcmp+0x28>
 8009e1e:	f100 0314 	add.w	r3, r0, #20
 8009e22:	3114      	adds	r1, #20
 8009e24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e34:	42a5      	cmp	r5, r4
 8009e36:	d003      	beq.n	8009e40 <__mcmp+0x2c>
 8009e38:	d305      	bcc.n	8009e46 <__mcmp+0x32>
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	bd30      	pop	{r4, r5, pc}
 8009e40:	4283      	cmp	r3, r0
 8009e42:	d3f3      	bcc.n	8009e2c <__mcmp+0x18>
 8009e44:	e7fa      	b.n	8009e3c <__mcmp+0x28>
 8009e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e4a:	e7f7      	b.n	8009e3c <__mcmp+0x28>

08009e4c <__mdiff>:
 8009e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	460c      	mov	r4, r1
 8009e52:	4606      	mov	r6, r0
 8009e54:	4611      	mov	r1, r2
 8009e56:	4620      	mov	r0, r4
 8009e58:	4690      	mov	r8, r2
 8009e5a:	f7ff ffdb 	bl	8009e14 <__mcmp>
 8009e5e:	1e05      	subs	r5, r0, #0
 8009e60:	d110      	bne.n	8009e84 <__mdiff+0x38>
 8009e62:	4629      	mov	r1, r5
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7ff fd59 	bl	800991c <_Balloc>
 8009e6a:	b930      	cbnz	r0, 8009e7a <__mdiff+0x2e>
 8009e6c:	4b3a      	ldr	r3, [pc, #232]	; (8009f58 <__mdiff+0x10c>)
 8009e6e:	4602      	mov	r2, r0
 8009e70:	f240 2137 	movw	r1, #567	; 0x237
 8009e74:	4839      	ldr	r0, [pc, #228]	; (8009f5c <__mdiff+0x110>)
 8009e76:	f000 fafd 	bl	800a474 <__assert_func>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	bfa4      	itt	ge
 8009e86:	4643      	movge	r3, r8
 8009e88:	46a0      	movge	r8, r4
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e90:	bfa6      	itte	ge
 8009e92:	461c      	movge	r4, r3
 8009e94:	2500      	movge	r5, #0
 8009e96:	2501      	movlt	r5, #1
 8009e98:	f7ff fd40 	bl	800991c <_Balloc>
 8009e9c:	b920      	cbnz	r0, 8009ea8 <__mdiff+0x5c>
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	; (8009f58 <__mdiff+0x10c>)
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	f240 2145 	movw	r1, #581	; 0x245
 8009ea6:	e7e5      	b.n	8009e74 <__mdiff+0x28>
 8009ea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009eac:	6926      	ldr	r6, [r4, #16]
 8009eae:	60c5      	str	r5, [r0, #12]
 8009eb0:	f104 0914 	add.w	r9, r4, #20
 8009eb4:	f108 0514 	add.w	r5, r8, #20
 8009eb8:	f100 0e14 	add.w	lr, r0, #20
 8009ebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ec4:	f108 0210 	add.w	r2, r8, #16
 8009ec8:	46f2      	mov	sl, lr
 8009eca:	2100      	movs	r1, #0
 8009ecc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ed4:	fa11 f88b 	uxtah	r8, r1, fp
 8009ed8:	b299      	uxth	r1, r3
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	eba8 0801 	sub.w	r8, r8, r1
 8009ee0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ee4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ee8:	fa1f f888 	uxth.w	r8, r8
 8009eec:	1419      	asrs	r1, r3, #16
 8009eee:	454e      	cmp	r6, r9
 8009ef0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ef4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ef8:	d8e8      	bhi.n	8009ecc <__mdiff+0x80>
 8009efa:	1b33      	subs	r3, r6, r4
 8009efc:	3b15      	subs	r3, #21
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	3304      	adds	r3, #4
 8009f04:	3415      	adds	r4, #21
 8009f06:	42a6      	cmp	r6, r4
 8009f08:	bf38      	it	cc
 8009f0a:	2304      	movcc	r3, #4
 8009f0c:	441d      	add	r5, r3
 8009f0e:	4473      	add	r3, lr
 8009f10:	469e      	mov	lr, r3
 8009f12:	462e      	mov	r6, r5
 8009f14:	4566      	cmp	r6, ip
 8009f16:	d30e      	bcc.n	8009f36 <__mdiff+0xea>
 8009f18:	f10c 0203 	add.w	r2, ip, #3
 8009f1c:	1b52      	subs	r2, r2, r5
 8009f1e:	f022 0203 	bic.w	r2, r2, #3
 8009f22:	3d03      	subs	r5, #3
 8009f24:	45ac      	cmp	ip, r5
 8009f26:	bf38      	it	cc
 8009f28:	2200      	movcc	r2, #0
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f30:	b17a      	cbz	r2, 8009f52 <__mdiff+0x106>
 8009f32:	6107      	str	r7, [r0, #16]
 8009f34:	e7a4      	b.n	8009e80 <__mdiff+0x34>
 8009f36:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f3a:	fa11 f288 	uxtah	r2, r1, r8
 8009f3e:	1414      	asrs	r4, r2, #16
 8009f40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f44:	b292      	uxth	r2, r2
 8009f46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f4a:	f84e 2b04 	str.w	r2, [lr], #4
 8009f4e:	1421      	asrs	r1, r4, #16
 8009f50:	e7e0      	b.n	8009f14 <__mdiff+0xc8>
 8009f52:	3f01      	subs	r7, #1
 8009f54:	e7ea      	b.n	8009f2c <__mdiff+0xe0>
 8009f56:	bf00      	nop
 8009f58:	0800c2e4 	.word	0x0800c2e4
 8009f5c:	0800c2f5 	.word	0x0800c2f5

08009f60 <__d2b>:
 8009f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	460f      	mov	r7, r1
 8009f66:	2101      	movs	r1, #1
 8009f68:	ec59 8b10 	vmov	r8, r9, d0
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	f7ff fcd5 	bl	800991c <_Balloc>
 8009f72:	4604      	mov	r4, r0
 8009f74:	b930      	cbnz	r0, 8009f84 <__d2b+0x24>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b24      	ldr	r3, [pc, #144]	; (800a00c <__d2b+0xac>)
 8009f7a:	4825      	ldr	r0, [pc, #148]	; (800a010 <__d2b+0xb0>)
 8009f7c:	f240 310f 	movw	r1, #783	; 0x30f
 8009f80:	f000 fa78 	bl	800a474 <__assert_func>
 8009f84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f8c:	bb2d      	cbnz	r5, 8009fda <__d2b+0x7a>
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	f1b8 0300 	subs.w	r3, r8, #0
 8009f94:	d026      	beq.n	8009fe4 <__d2b+0x84>
 8009f96:	4668      	mov	r0, sp
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	f7ff fd87 	bl	8009aac <__lo0bits>
 8009f9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fa2:	b1e8      	cbz	r0, 8009fe0 <__d2b+0x80>
 8009fa4:	f1c0 0320 	rsb	r3, r0, #32
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	430b      	orrs	r3, r1
 8009fae:	40c2      	lsrs	r2, r0
 8009fb0:	6163      	str	r3, [r4, #20]
 8009fb2:	9201      	str	r2, [sp, #4]
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	61a3      	str	r3, [r4, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	bf14      	ite	ne
 8009fbc:	2202      	movne	r2, #2
 8009fbe:	2201      	moveq	r2, #1
 8009fc0:	6122      	str	r2, [r4, #16]
 8009fc2:	b1bd      	cbz	r5, 8009ff4 <__d2b+0x94>
 8009fc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fc8:	4405      	add	r5, r0
 8009fca:	603d      	str	r5, [r7, #0]
 8009fcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fd0:	6030      	str	r0, [r6, #0]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	b003      	add	sp, #12
 8009fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fde:	e7d6      	b.n	8009f8e <__d2b+0x2e>
 8009fe0:	6161      	str	r1, [r4, #20]
 8009fe2:	e7e7      	b.n	8009fb4 <__d2b+0x54>
 8009fe4:	a801      	add	r0, sp, #4
 8009fe6:	f7ff fd61 	bl	8009aac <__lo0bits>
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	6163      	str	r3, [r4, #20]
 8009fee:	3020      	adds	r0, #32
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	e7e5      	b.n	8009fc0 <__d2b+0x60>
 8009ff4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ff8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ffc:	6038      	str	r0, [r7, #0]
 8009ffe:	6918      	ldr	r0, [r3, #16]
 800a000:	f7ff fd34 	bl	8009a6c <__hi0bits>
 800a004:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a008:	e7e2      	b.n	8009fd0 <__d2b+0x70>
 800a00a:	bf00      	nop
 800a00c:	0800c2e4 	.word	0x0800c2e4
 800a010:	0800c2f5 	.word	0x0800c2f5

0800a014 <__ssputs_r>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	688e      	ldr	r6, [r1, #8]
 800a01a:	461f      	mov	r7, r3
 800a01c:	42be      	cmp	r6, r7
 800a01e:	680b      	ldr	r3, [r1, #0]
 800a020:	4682      	mov	sl, r0
 800a022:	460c      	mov	r4, r1
 800a024:	4690      	mov	r8, r2
 800a026:	d82c      	bhi.n	800a082 <__ssputs_r+0x6e>
 800a028:	898a      	ldrh	r2, [r1, #12]
 800a02a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a02e:	d026      	beq.n	800a07e <__ssputs_r+0x6a>
 800a030:	6965      	ldr	r5, [r4, #20]
 800a032:	6909      	ldr	r1, [r1, #16]
 800a034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a038:	eba3 0901 	sub.w	r9, r3, r1
 800a03c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a040:	1c7b      	adds	r3, r7, #1
 800a042:	444b      	add	r3, r9
 800a044:	106d      	asrs	r5, r5, #1
 800a046:	429d      	cmp	r5, r3
 800a048:	bf38      	it	cc
 800a04a:	461d      	movcc	r5, r3
 800a04c:	0553      	lsls	r3, r2, #21
 800a04e:	d527      	bpl.n	800a0a0 <__ssputs_r+0x8c>
 800a050:	4629      	mov	r1, r5
 800a052:	f7ff fbd7 	bl	8009804 <_malloc_r>
 800a056:	4606      	mov	r6, r0
 800a058:	b360      	cbz	r0, 800a0b4 <__ssputs_r+0xa0>
 800a05a:	6921      	ldr	r1, [r4, #16]
 800a05c:	464a      	mov	r2, r9
 800a05e:	f7fe fcd4 	bl	8008a0a <memcpy>
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	6126      	str	r6, [r4, #16]
 800a070:	6165      	str	r5, [r4, #20]
 800a072:	444e      	add	r6, r9
 800a074:	eba5 0509 	sub.w	r5, r5, r9
 800a078:	6026      	str	r6, [r4, #0]
 800a07a:	60a5      	str	r5, [r4, #8]
 800a07c:	463e      	mov	r6, r7
 800a07e:	42be      	cmp	r6, r7
 800a080:	d900      	bls.n	800a084 <__ssputs_r+0x70>
 800a082:	463e      	mov	r6, r7
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	4632      	mov	r2, r6
 800a088:	4641      	mov	r1, r8
 800a08a:	f000 f9c9 	bl	800a420 <memmove>
 800a08e:	68a3      	ldr	r3, [r4, #8]
 800a090:	1b9b      	subs	r3, r3, r6
 800a092:	60a3      	str	r3, [r4, #8]
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	4433      	add	r3, r6
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	2000      	movs	r0, #0
 800a09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a0:	462a      	mov	r2, r5
 800a0a2:	f000 fa2d 	bl	800a500 <_realloc_r>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d1e0      	bne.n	800a06e <__ssputs_r+0x5a>
 800a0ac:	6921      	ldr	r1, [r4, #16]
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	f7ff fb34 	bl	800971c <_free_r>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	f8ca 3000 	str.w	r3, [sl]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c6:	e7e9      	b.n	800a09c <__ssputs_r+0x88>

0800a0c8 <_svfiprintf_r>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	898b      	ldrh	r3, [r1, #12]
 800a0d0:	061b      	lsls	r3, r3, #24
 800a0d2:	b09d      	sub	sp, #116	; 0x74
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	4614      	mov	r4, r2
 800a0da:	d50e      	bpl.n	800a0fa <_svfiprintf_r+0x32>
 800a0dc:	690b      	ldr	r3, [r1, #16]
 800a0de:	b963      	cbnz	r3, 800a0fa <_svfiprintf_r+0x32>
 800a0e0:	2140      	movs	r1, #64	; 0x40
 800a0e2:	f7ff fb8f 	bl	8009804 <_malloc_r>
 800a0e6:	6028      	str	r0, [r5, #0]
 800a0e8:	6128      	str	r0, [r5, #16]
 800a0ea:	b920      	cbnz	r0, 800a0f6 <_svfiprintf_r+0x2e>
 800a0ec:	230c      	movs	r3, #12
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f4:	e0d0      	b.n	800a298 <_svfiprintf_r+0x1d0>
 800a0f6:	2340      	movs	r3, #64	; 0x40
 800a0f8:	616b      	str	r3, [r5, #20]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0fe:	2320      	movs	r3, #32
 800a100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a104:	f8cd 800c 	str.w	r8, [sp, #12]
 800a108:	2330      	movs	r3, #48	; 0x30
 800a10a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a2b0 <_svfiprintf_r+0x1e8>
 800a10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a112:	f04f 0901 	mov.w	r9, #1
 800a116:	4623      	mov	r3, r4
 800a118:	469a      	mov	sl, r3
 800a11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a11e:	b10a      	cbz	r2, 800a124 <_svfiprintf_r+0x5c>
 800a120:	2a25      	cmp	r2, #37	; 0x25
 800a122:	d1f9      	bne.n	800a118 <_svfiprintf_r+0x50>
 800a124:	ebba 0b04 	subs.w	fp, sl, r4
 800a128:	d00b      	beq.n	800a142 <_svfiprintf_r+0x7a>
 800a12a:	465b      	mov	r3, fp
 800a12c:	4622      	mov	r2, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	4638      	mov	r0, r7
 800a132:	f7ff ff6f 	bl	800a014 <__ssputs_r>
 800a136:	3001      	adds	r0, #1
 800a138:	f000 80a9 	beq.w	800a28e <_svfiprintf_r+0x1c6>
 800a13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a13e:	445a      	add	r2, fp
 800a140:	9209      	str	r2, [sp, #36]	; 0x24
 800a142:	f89a 3000 	ldrb.w	r3, [sl]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 80a1 	beq.w	800a28e <_svfiprintf_r+0x1c6>
 800a14c:	2300      	movs	r3, #0
 800a14e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a156:	f10a 0a01 	add.w	sl, sl, #1
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	9307      	str	r3, [sp, #28]
 800a15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a162:	931a      	str	r3, [sp, #104]	; 0x68
 800a164:	4654      	mov	r4, sl
 800a166:	2205      	movs	r2, #5
 800a168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16c:	4850      	ldr	r0, [pc, #320]	; (800a2b0 <_svfiprintf_r+0x1e8>)
 800a16e:	f7f6 f837 	bl	80001e0 <memchr>
 800a172:	9a04      	ldr	r2, [sp, #16]
 800a174:	b9d8      	cbnz	r0, 800a1ae <_svfiprintf_r+0xe6>
 800a176:	06d0      	lsls	r0, r2, #27
 800a178:	bf44      	itt	mi
 800a17a:	2320      	movmi	r3, #32
 800a17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a180:	0711      	lsls	r1, r2, #28
 800a182:	bf44      	itt	mi
 800a184:	232b      	movmi	r3, #43	; 0x2b
 800a186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a18a:	f89a 3000 	ldrb.w	r3, [sl]
 800a18e:	2b2a      	cmp	r3, #42	; 0x2a
 800a190:	d015      	beq.n	800a1be <_svfiprintf_r+0xf6>
 800a192:	9a07      	ldr	r2, [sp, #28]
 800a194:	4654      	mov	r4, sl
 800a196:	2000      	movs	r0, #0
 800a198:	f04f 0c0a 	mov.w	ip, #10
 800a19c:	4621      	mov	r1, r4
 800a19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a2:	3b30      	subs	r3, #48	; 0x30
 800a1a4:	2b09      	cmp	r3, #9
 800a1a6:	d94d      	bls.n	800a244 <_svfiprintf_r+0x17c>
 800a1a8:	b1b0      	cbz	r0, 800a1d8 <_svfiprintf_r+0x110>
 800a1aa:	9207      	str	r2, [sp, #28]
 800a1ac:	e014      	b.n	800a1d8 <_svfiprintf_r+0x110>
 800a1ae:	eba0 0308 	sub.w	r3, r0, r8
 800a1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	46a2      	mov	sl, r4
 800a1bc:	e7d2      	b.n	800a164 <_svfiprintf_r+0x9c>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	1d19      	adds	r1, r3, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	9103      	str	r1, [sp, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfbb      	ittet	lt
 800a1ca:	425b      	neglt	r3, r3
 800a1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d0:	9307      	strge	r3, [sp, #28]
 800a1d2:	9307      	strlt	r3, [sp, #28]
 800a1d4:	bfb8      	it	lt
 800a1d6:	9204      	strlt	r2, [sp, #16]
 800a1d8:	7823      	ldrb	r3, [r4, #0]
 800a1da:	2b2e      	cmp	r3, #46	; 0x2e
 800a1dc:	d10c      	bne.n	800a1f8 <_svfiprintf_r+0x130>
 800a1de:	7863      	ldrb	r3, [r4, #1]
 800a1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e2:	d134      	bne.n	800a24e <_svfiprintf_r+0x186>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	1d1a      	adds	r2, r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	9203      	str	r2, [sp, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bfb8      	it	lt
 800a1f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1f4:	3402      	adds	r4, #2
 800a1f6:	9305      	str	r3, [sp, #20]
 800a1f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a2c0 <_svfiprintf_r+0x1f8>
 800a1fc:	7821      	ldrb	r1, [r4, #0]
 800a1fe:	2203      	movs	r2, #3
 800a200:	4650      	mov	r0, sl
 800a202:	f7f5 ffed 	bl	80001e0 <memchr>
 800a206:	b138      	cbz	r0, 800a218 <_svfiprintf_r+0x150>
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	eba0 000a 	sub.w	r0, r0, sl
 800a20e:	2240      	movs	r2, #64	; 0x40
 800a210:	4082      	lsls	r2, r0
 800a212:	4313      	orrs	r3, r2
 800a214:	3401      	adds	r4, #1
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21c:	4825      	ldr	r0, [pc, #148]	; (800a2b4 <_svfiprintf_r+0x1ec>)
 800a21e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a222:	2206      	movs	r2, #6
 800a224:	f7f5 ffdc 	bl	80001e0 <memchr>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d038      	beq.n	800a29e <_svfiprintf_r+0x1d6>
 800a22c:	4b22      	ldr	r3, [pc, #136]	; (800a2b8 <_svfiprintf_r+0x1f0>)
 800a22e:	bb1b      	cbnz	r3, 800a278 <_svfiprintf_r+0x1b0>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	3307      	adds	r3, #7
 800a234:	f023 0307 	bic.w	r3, r3, #7
 800a238:	3308      	adds	r3, #8
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23e:	4433      	add	r3, r6
 800a240:	9309      	str	r3, [sp, #36]	; 0x24
 800a242:	e768      	b.n	800a116 <_svfiprintf_r+0x4e>
 800a244:	fb0c 3202 	mla	r2, ip, r2, r3
 800a248:	460c      	mov	r4, r1
 800a24a:	2001      	movs	r0, #1
 800a24c:	e7a6      	b.n	800a19c <_svfiprintf_r+0xd4>
 800a24e:	2300      	movs	r3, #0
 800a250:	3401      	adds	r4, #1
 800a252:	9305      	str	r3, [sp, #20]
 800a254:	4619      	mov	r1, r3
 800a256:	f04f 0c0a 	mov.w	ip, #10
 800a25a:	4620      	mov	r0, r4
 800a25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a260:	3a30      	subs	r2, #48	; 0x30
 800a262:	2a09      	cmp	r2, #9
 800a264:	d903      	bls.n	800a26e <_svfiprintf_r+0x1a6>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0c6      	beq.n	800a1f8 <_svfiprintf_r+0x130>
 800a26a:	9105      	str	r1, [sp, #20]
 800a26c:	e7c4      	b.n	800a1f8 <_svfiprintf_r+0x130>
 800a26e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a272:	4604      	mov	r4, r0
 800a274:	2301      	movs	r3, #1
 800a276:	e7f0      	b.n	800a25a <_svfiprintf_r+0x192>
 800a278:	ab03      	add	r3, sp, #12
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	462a      	mov	r2, r5
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <_svfiprintf_r+0x1f4>)
 800a280:	a904      	add	r1, sp, #16
 800a282:	4638      	mov	r0, r7
 800a284:	f7fd fe42 	bl	8007f0c <_printf_float>
 800a288:	1c42      	adds	r2, r0, #1
 800a28a:	4606      	mov	r6, r0
 800a28c:	d1d6      	bne.n	800a23c <_svfiprintf_r+0x174>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	065b      	lsls	r3, r3, #25
 800a292:	f53f af2d 	bmi.w	800a0f0 <_svfiprintf_r+0x28>
 800a296:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a298:	b01d      	add	sp, #116	; 0x74
 800a29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <_svfiprintf_r+0x1f4>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7fe f8d3 	bl	8008454 <_printf_i>
 800a2ae:	e7eb      	b.n	800a288 <_svfiprintf_r+0x1c0>
 800a2b0:	0800c44c 	.word	0x0800c44c
 800a2b4:	0800c456 	.word	0x0800c456
 800a2b8:	08007f0d 	.word	0x08007f0d
 800a2bc:	0800a015 	.word	0x0800a015
 800a2c0:	0800c452 	.word	0x0800c452

0800a2c4 <__sflush_r>:
 800a2c4:	898a      	ldrh	r2, [r1, #12]
 800a2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	0710      	lsls	r0, r2, #28
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	d458      	bmi.n	800a384 <__sflush_r+0xc0>
 800a2d2:	684b      	ldr	r3, [r1, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc05      	bgt.n	800a2e4 <__sflush_r+0x20>
 800a2d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dc02      	bgt.n	800a2e4 <__sflush_r+0x20>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	d0f9      	beq.n	800a2de <__sflush_r+0x1a>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2f0:	682f      	ldr	r7, [r5, #0]
 800a2f2:	6a21      	ldr	r1, [r4, #32]
 800a2f4:	602b      	str	r3, [r5, #0]
 800a2f6:	d032      	beq.n	800a35e <__sflush_r+0x9a>
 800a2f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	075a      	lsls	r2, r3, #29
 800a2fe:	d505      	bpl.n	800a30c <__sflush_r+0x48>
 800a300:	6863      	ldr	r3, [r4, #4]
 800a302:	1ac0      	subs	r0, r0, r3
 800a304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a306:	b10b      	cbz	r3, 800a30c <__sflush_r+0x48>
 800a308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a30a:	1ac0      	subs	r0, r0, r3
 800a30c:	2300      	movs	r3, #0
 800a30e:	4602      	mov	r2, r0
 800a310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a312:	6a21      	ldr	r1, [r4, #32]
 800a314:	4628      	mov	r0, r5
 800a316:	47b0      	blx	r6
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	d106      	bne.n	800a32c <__sflush_r+0x68>
 800a31e:	6829      	ldr	r1, [r5, #0]
 800a320:	291d      	cmp	r1, #29
 800a322:	d82b      	bhi.n	800a37c <__sflush_r+0xb8>
 800a324:	4a29      	ldr	r2, [pc, #164]	; (800a3cc <__sflush_r+0x108>)
 800a326:	410a      	asrs	r2, r1
 800a328:	07d6      	lsls	r6, r2, #31
 800a32a:	d427      	bmi.n	800a37c <__sflush_r+0xb8>
 800a32c:	2200      	movs	r2, #0
 800a32e:	6062      	str	r2, [r4, #4]
 800a330:	04d9      	lsls	r1, r3, #19
 800a332:	6922      	ldr	r2, [r4, #16]
 800a334:	6022      	str	r2, [r4, #0]
 800a336:	d504      	bpl.n	800a342 <__sflush_r+0x7e>
 800a338:	1c42      	adds	r2, r0, #1
 800a33a:	d101      	bne.n	800a340 <__sflush_r+0x7c>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	b903      	cbnz	r3, 800a342 <__sflush_r+0x7e>
 800a340:	6560      	str	r0, [r4, #84]	; 0x54
 800a342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a344:	602f      	str	r7, [r5, #0]
 800a346:	2900      	cmp	r1, #0
 800a348:	d0c9      	beq.n	800a2de <__sflush_r+0x1a>
 800a34a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a34e:	4299      	cmp	r1, r3
 800a350:	d002      	beq.n	800a358 <__sflush_r+0x94>
 800a352:	4628      	mov	r0, r5
 800a354:	f7ff f9e2 	bl	800971c <_free_r>
 800a358:	2000      	movs	r0, #0
 800a35a:	6360      	str	r0, [r4, #52]	; 0x34
 800a35c:	e7c0      	b.n	800a2e0 <__sflush_r+0x1c>
 800a35e:	2301      	movs	r3, #1
 800a360:	4628      	mov	r0, r5
 800a362:	47b0      	blx	r6
 800a364:	1c41      	adds	r1, r0, #1
 800a366:	d1c8      	bne.n	800a2fa <__sflush_r+0x36>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0c5      	beq.n	800a2fa <__sflush_r+0x36>
 800a36e:	2b1d      	cmp	r3, #29
 800a370:	d001      	beq.n	800a376 <__sflush_r+0xb2>
 800a372:	2b16      	cmp	r3, #22
 800a374:	d101      	bne.n	800a37a <__sflush_r+0xb6>
 800a376:	602f      	str	r7, [r5, #0]
 800a378:	e7b1      	b.n	800a2de <__sflush_r+0x1a>
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	e7ad      	b.n	800a2e0 <__sflush_r+0x1c>
 800a384:	690f      	ldr	r7, [r1, #16]
 800a386:	2f00      	cmp	r7, #0
 800a388:	d0a9      	beq.n	800a2de <__sflush_r+0x1a>
 800a38a:	0793      	lsls	r3, r2, #30
 800a38c:	680e      	ldr	r6, [r1, #0]
 800a38e:	bf08      	it	eq
 800a390:	694b      	ldreq	r3, [r1, #20]
 800a392:	600f      	str	r7, [r1, #0]
 800a394:	bf18      	it	ne
 800a396:	2300      	movne	r3, #0
 800a398:	eba6 0807 	sub.w	r8, r6, r7
 800a39c:	608b      	str	r3, [r1, #8]
 800a39e:	f1b8 0f00 	cmp.w	r8, #0
 800a3a2:	dd9c      	ble.n	800a2de <__sflush_r+0x1a>
 800a3a4:	6a21      	ldr	r1, [r4, #32]
 800a3a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3a8:	4643      	mov	r3, r8
 800a3aa:	463a      	mov	r2, r7
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b0      	blx	r6
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	dc06      	bgt.n	800a3c2 <__sflush_r+0xfe>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3c0:	e78e      	b.n	800a2e0 <__sflush_r+0x1c>
 800a3c2:	4407      	add	r7, r0
 800a3c4:	eba8 0800 	sub.w	r8, r8, r0
 800a3c8:	e7e9      	b.n	800a39e <__sflush_r+0xda>
 800a3ca:	bf00      	nop
 800a3cc:	dfbffffe 	.word	0xdfbffffe

0800a3d0 <_fflush_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	690b      	ldr	r3, [r1, #16]
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	b913      	cbnz	r3, 800a3e0 <_fflush_r+0x10>
 800a3da:	2500      	movs	r5, #0
 800a3dc:	4628      	mov	r0, r5
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	b118      	cbz	r0, 800a3ea <_fflush_r+0x1a>
 800a3e2:	6a03      	ldr	r3, [r0, #32]
 800a3e4:	b90b      	cbnz	r3, 800a3ea <_fflush_r+0x1a>
 800a3e6:	f7fe f9e3 	bl	80087b0 <__sinit>
 800a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0f3      	beq.n	800a3da <_fflush_r+0xa>
 800a3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3f4:	07d0      	lsls	r0, r2, #31
 800a3f6:	d404      	bmi.n	800a402 <_fflush_r+0x32>
 800a3f8:	0599      	lsls	r1, r3, #22
 800a3fa:	d402      	bmi.n	800a402 <_fflush_r+0x32>
 800a3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fe:	f7fe fb02 	bl	8008a06 <__retarget_lock_acquire_recursive>
 800a402:	4628      	mov	r0, r5
 800a404:	4621      	mov	r1, r4
 800a406:	f7ff ff5d 	bl	800a2c4 <__sflush_r>
 800a40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a40c:	07da      	lsls	r2, r3, #31
 800a40e:	4605      	mov	r5, r0
 800a410:	d4e4      	bmi.n	800a3dc <_fflush_r+0xc>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	059b      	lsls	r3, r3, #22
 800a416:	d4e1      	bmi.n	800a3dc <_fflush_r+0xc>
 800a418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a41a:	f7fe faf5 	bl	8008a08 <__retarget_lock_release_recursive>
 800a41e:	e7dd      	b.n	800a3dc <_fflush_r+0xc>

0800a420 <memmove>:
 800a420:	4288      	cmp	r0, r1
 800a422:	b510      	push	{r4, lr}
 800a424:	eb01 0402 	add.w	r4, r1, r2
 800a428:	d902      	bls.n	800a430 <memmove+0x10>
 800a42a:	4284      	cmp	r4, r0
 800a42c:	4623      	mov	r3, r4
 800a42e:	d807      	bhi.n	800a440 <memmove+0x20>
 800a430:	1e43      	subs	r3, r0, #1
 800a432:	42a1      	cmp	r1, r4
 800a434:	d008      	beq.n	800a448 <memmove+0x28>
 800a436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a43a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a43e:	e7f8      	b.n	800a432 <memmove+0x12>
 800a440:	4402      	add	r2, r0
 800a442:	4601      	mov	r1, r0
 800a444:	428a      	cmp	r2, r1
 800a446:	d100      	bne.n	800a44a <memmove+0x2a>
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a44e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a452:	e7f7      	b.n	800a444 <memmove+0x24>

0800a454 <_sbrk_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d06      	ldr	r5, [pc, #24]	; (800a470 <_sbrk_r+0x1c>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7fa f9be 	bl	80047e0 <_sbrk>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_sbrk_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_sbrk_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20001de4 	.word	0x20001de4

0800a474 <__assert_func>:
 800a474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a476:	4614      	mov	r4, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <__assert_func+0x2c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4605      	mov	r5, r0
 800a480:	68d8      	ldr	r0, [r3, #12]
 800a482:	b14c      	cbz	r4, 800a498 <__assert_func+0x24>
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <__assert_func+0x30>)
 800a486:	9100      	str	r1, [sp, #0]
 800a488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a48c:	4906      	ldr	r1, [pc, #24]	; (800a4a8 <__assert_func+0x34>)
 800a48e:	462b      	mov	r3, r5
 800a490:	f000 f872 	bl	800a578 <fiprintf>
 800a494:	f000 f882 	bl	800a59c <abort>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__assert_func+0x38>)
 800a49a:	461c      	mov	r4, r3
 800a49c:	e7f3      	b.n	800a486 <__assert_func+0x12>
 800a49e:	bf00      	nop
 800a4a0:	200000a0 	.word	0x200000a0
 800a4a4:	0800c467 	.word	0x0800c467
 800a4a8:	0800c474 	.word	0x0800c474
 800a4ac:	0800c4a2 	.word	0x0800c4a2

0800a4b0 <_calloc_r>:
 800a4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4b2:	fba1 2402 	umull	r2, r4, r1, r2
 800a4b6:	b94c      	cbnz	r4, 800a4cc <_calloc_r+0x1c>
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	9201      	str	r2, [sp, #4]
 800a4bc:	f7ff f9a2 	bl	8009804 <_malloc_r>
 800a4c0:	9a01      	ldr	r2, [sp, #4]
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	b930      	cbnz	r0, 800a4d4 <_calloc_r+0x24>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	b003      	add	sp, #12
 800a4ca:	bd30      	pop	{r4, r5, pc}
 800a4cc:	220c      	movs	r2, #12
 800a4ce:	6002      	str	r2, [r0, #0]
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	e7f8      	b.n	800a4c6 <_calloc_r+0x16>
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	f7fe fa18 	bl	800890a <memset>
 800a4da:	e7f4      	b.n	800a4c6 <_calloc_r+0x16>

0800a4dc <__ascii_mbtowc>:
 800a4dc:	b082      	sub	sp, #8
 800a4de:	b901      	cbnz	r1, 800a4e2 <__ascii_mbtowc+0x6>
 800a4e0:	a901      	add	r1, sp, #4
 800a4e2:	b142      	cbz	r2, 800a4f6 <__ascii_mbtowc+0x1a>
 800a4e4:	b14b      	cbz	r3, 800a4fa <__ascii_mbtowc+0x1e>
 800a4e6:	7813      	ldrb	r3, [r2, #0]
 800a4e8:	600b      	str	r3, [r1, #0]
 800a4ea:	7812      	ldrb	r2, [r2, #0]
 800a4ec:	1e10      	subs	r0, r2, #0
 800a4ee:	bf18      	it	ne
 800a4f0:	2001      	movne	r0, #1
 800a4f2:	b002      	add	sp, #8
 800a4f4:	4770      	bx	lr
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	e7fb      	b.n	800a4f2 <__ascii_mbtowc+0x16>
 800a4fa:	f06f 0001 	mvn.w	r0, #1
 800a4fe:	e7f8      	b.n	800a4f2 <__ascii_mbtowc+0x16>

0800a500 <_realloc_r>:
 800a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	4680      	mov	r8, r0
 800a506:	4614      	mov	r4, r2
 800a508:	460e      	mov	r6, r1
 800a50a:	b921      	cbnz	r1, 800a516 <_realloc_r+0x16>
 800a50c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	4611      	mov	r1, r2
 800a512:	f7ff b977 	b.w	8009804 <_malloc_r>
 800a516:	b92a      	cbnz	r2, 800a524 <_realloc_r+0x24>
 800a518:	f7ff f900 	bl	800971c <_free_r>
 800a51c:	4625      	mov	r5, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a524:	f000 f841 	bl	800a5aa <_malloc_usable_size_r>
 800a528:	4284      	cmp	r4, r0
 800a52a:	4607      	mov	r7, r0
 800a52c:	d802      	bhi.n	800a534 <_realloc_r+0x34>
 800a52e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a532:	d812      	bhi.n	800a55a <_realloc_r+0x5a>
 800a534:	4621      	mov	r1, r4
 800a536:	4640      	mov	r0, r8
 800a538:	f7ff f964 	bl	8009804 <_malloc_r>
 800a53c:	4605      	mov	r5, r0
 800a53e:	2800      	cmp	r0, #0
 800a540:	d0ed      	beq.n	800a51e <_realloc_r+0x1e>
 800a542:	42bc      	cmp	r4, r7
 800a544:	4622      	mov	r2, r4
 800a546:	4631      	mov	r1, r6
 800a548:	bf28      	it	cs
 800a54a:	463a      	movcs	r2, r7
 800a54c:	f7fe fa5d 	bl	8008a0a <memcpy>
 800a550:	4631      	mov	r1, r6
 800a552:	4640      	mov	r0, r8
 800a554:	f7ff f8e2 	bl	800971c <_free_r>
 800a558:	e7e1      	b.n	800a51e <_realloc_r+0x1e>
 800a55a:	4635      	mov	r5, r6
 800a55c:	e7df      	b.n	800a51e <_realloc_r+0x1e>

0800a55e <__ascii_wctomb>:
 800a55e:	b149      	cbz	r1, 800a574 <__ascii_wctomb+0x16>
 800a560:	2aff      	cmp	r2, #255	; 0xff
 800a562:	bf85      	ittet	hi
 800a564:	238a      	movhi	r3, #138	; 0x8a
 800a566:	6003      	strhi	r3, [r0, #0]
 800a568:	700a      	strbls	r2, [r1, #0]
 800a56a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a56e:	bf98      	it	ls
 800a570:	2001      	movls	r0, #1
 800a572:	4770      	bx	lr
 800a574:	4608      	mov	r0, r1
 800a576:	4770      	bx	lr

0800a578 <fiprintf>:
 800a578:	b40e      	push	{r1, r2, r3}
 800a57a:	b503      	push	{r0, r1, lr}
 800a57c:	4601      	mov	r1, r0
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	4805      	ldr	r0, [pc, #20]	; (800a598 <fiprintf+0x20>)
 800a582:	f853 2b04 	ldr.w	r2, [r3], #4
 800a586:	6800      	ldr	r0, [r0, #0]
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	f000 f83f 	bl	800a60c <_vfiprintf_r>
 800a58e:	b002      	add	sp, #8
 800a590:	f85d eb04 	ldr.w	lr, [sp], #4
 800a594:	b003      	add	sp, #12
 800a596:	4770      	bx	lr
 800a598:	200000a0 	.word	0x200000a0

0800a59c <abort>:
 800a59c:	b508      	push	{r3, lr}
 800a59e:	2006      	movs	r0, #6
 800a5a0:	f000 fa0c 	bl	800a9bc <raise>
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f7fa f8a3 	bl	80046f0 <_exit>

0800a5aa <_malloc_usable_size_r>:
 800a5aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ae:	1f18      	subs	r0, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bfbc      	itt	lt
 800a5b4:	580b      	ldrlt	r3, [r1, r0]
 800a5b6:	18c0      	addlt	r0, r0, r3
 800a5b8:	4770      	bx	lr

0800a5ba <__sfputc_r>:
 800a5ba:	6893      	ldr	r3, [r2, #8]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	b410      	push	{r4}
 800a5c2:	6093      	str	r3, [r2, #8]
 800a5c4:	da08      	bge.n	800a5d8 <__sfputc_r+0x1e>
 800a5c6:	6994      	ldr	r4, [r2, #24]
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	db01      	blt.n	800a5d0 <__sfputc_r+0x16>
 800a5cc:	290a      	cmp	r1, #10
 800a5ce:	d103      	bne.n	800a5d8 <__sfputc_r+0x1e>
 800a5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5d4:	f000 b934 	b.w	800a840 <__swbuf_r>
 800a5d8:	6813      	ldr	r3, [r2, #0]
 800a5da:	1c58      	adds	r0, r3, #1
 800a5dc:	6010      	str	r0, [r2, #0]
 800a5de:	7019      	strb	r1, [r3, #0]
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <__sfputs_r>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460f      	mov	r7, r1
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	18d5      	adds	r5, r2, r3
 800a5f2:	42ac      	cmp	r4, r5
 800a5f4:	d101      	bne.n	800a5fa <__sfputs_r+0x12>
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	e007      	b.n	800a60a <__sfputs_r+0x22>
 800a5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fe:	463a      	mov	r2, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ffda 	bl	800a5ba <__sfputc_r>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d1f3      	bne.n	800a5f2 <__sfputs_r+0xa>
 800a60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a60c <_vfiprintf_r>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	460d      	mov	r5, r1
 800a612:	b09d      	sub	sp, #116	; 0x74
 800a614:	4614      	mov	r4, r2
 800a616:	4698      	mov	r8, r3
 800a618:	4606      	mov	r6, r0
 800a61a:	b118      	cbz	r0, 800a624 <_vfiprintf_r+0x18>
 800a61c:	6a03      	ldr	r3, [r0, #32]
 800a61e:	b90b      	cbnz	r3, 800a624 <_vfiprintf_r+0x18>
 800a620:	f7fe f8c6 	bl	80087b0 <__sinit>
 800a624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a626:	07d9      	lsls	r1, r3, #31
 800a628:	d405      	bmi.n	800a636 <_vfiprintf_r+0x2a>
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d402      	bmi.n	800a636 <_vfiprintf_r+0x2a>
 800a630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a632:	f7fe f9e8 	bl	8008a06 <__retarget_lock_acquire_recursive>
 800a636:	89ab      	ldrh	r3, [r5, #12]
 800a638:	071b      	lsls	r3, r3, #28
 800a63a:	d501      	bpl.n	800a640 <_vfiprintf_r+0x34>
 800a63c:	692b      	ldr	r3, [r5, #16]
 800a63e:	b99b      	cbnz	r3, 800a668 <_vfiprintf_r+0x5c>
 800a640:	4629      	mov	r1, r5
 800a642:	4630      	mov	r0, r6
 800a644:	f000 f93a 	bl	800a8bc <__swsetup_r>
 800a648:	b170      	cbz	r0, 800a668 <_vfiprintf_r+0x5c>
 800a64a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a64c:	07dc      	lsls	r4, r3, #31
 800a64e:	d504      	bpl.n	800a65a <_vfiprintf_r+0x4e>
 800a650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a654:	b01d      	add	sp, #116	; 0x74
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	0598      	lsls	r0, r3, #22
 800a65e:	d4f7      	bmi.n	800a650 <_vfiprintf_r+0x44>
 800a660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a662:	f7fe f9d1 	bl	8008a08 <__retarget_lock_release_recursive>
 800a666:	e7f3      	b.n	800a650 <_vfiprintf_r+0x44>
 800a668:	2300      	movs	r3, #0
 800a66a:	9309      	str	r3, [sp, #36]	; 0x24
 800a66c:	2320      	movs	r3, #32
 800a66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a672:	f8cd 800c 	str.w	r8, [sp, #12]
 800a676:	2330      	movs	r3, #48	; 0x30
 800a678:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a82c <_vfiprintf_r+0x220>
 800a67c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a680:	f04f 0901 	mov.w	r9, #1
 800a684:	4623      	mov	r3, r4
 800a686:	469a      	mov	sl, r3
 800a688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a68c:	b10a      	cbz	r2, 800a692 <_vfiprintf_r+0x86>
 800a68e:	2a25      	cmp	r2, #37	; 0x25
 800a690:	d1f9      	bne.n	800a686 <_vfiprintf_r+0x7a>
 800a692:	ebba 0b04 	subs.w	fp, sl, r4
 800a696:	d00b      	beq.n	800a6b0 <_vfiprintf_r+0xa4>
 800a698:	465b      	mov	r3, fp
 800a69a:	4622      	mov	r2, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff ffa2 	bl	800a5e8 <__sfputs_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f000 80a9 	beq.w	800a7fc <_vfiprintf_r+0x1f0>
 800a6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ac:	445a      	add	r2, fp
 800a6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80a1 	beq.w	800a7fc <_vfiprintf_r+0x1f0>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c4:	f10a 0a01 	add.w	sl, sl, #1
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	2205      	movs	r2, #5
 800a6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6da:	4854      	ldr	r0, [pc, #336]	; (800a82c <_vfiprintf_r+0x220>)
 800a6dc:	f7f5 fd80 	bl	80001e0 <memchr>
 800a6e0:	9a04      	ldr	r2, [sp, #16]
 800a6e2:	b9d8      	cbnz	r0, 800a71c <_vfiprintf_r+0x110>
 800a6e4:	06d1      	lsls	r1, r2, #27
 800a6e6:	bf44      	itt	mi
 800a6e8:	2320      	movmi	r3, #32
 800a6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ee:	0713      	lsls	r3, r2, #28
 800a6f0:	bf44      	itt	mi
 800a6f2:	232b      	movmi	r3, #43	; 0x2b
 800a6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6fe:	d015      	beq.n	800a72c <_vfiprintf_r+0x120>
 800a700:	9a07      	ldr	r2, [sp, #28]
 800a702:	4654      	mov	r4, sl
 800a704:	2000      	movs	r0, #0
 800a706:	f04f 0c0a 	mov.w	ip, #10
 800a70a:	4621      	mov	r1, r4
 800a70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a710:	3b30      	subs	r3, #48	; 0x30
 800a712:	2b09      	cmp	r3, #9
 800a714:	d94d      	bls.n	800a7b2 <_vfiprintf_r+0x1a6>
 800a716:	b1b0      	cbz	r0, 800a746 <_vfiprintf_r+0x13a>
 800a718:	9207      	str	r2, [sp, #28]
 800a71a:	e014      	b.n	800a746 <_vfiprintf_r+0x13a>
 800a71c:	eba0 0308 	sub.w	r3, r0, r8
 800a720:	fa09 f303 	lsl.w	r3, r9, r3
 800a724:	4313      	orrs	r3, r2
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	46a2      	mov	sl, r4
 800a72a:	e7d2      	b.n	800a6d2 <_vfiprintf_r+0xc6>
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	1d19      	adds	r1, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	9103      	str	r1, [sp, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	bfbb      	ittet	lt
 800a738:	425b      	neglt	r3, r3
 800a73a:	f042 0202 	orrlt.w	r2, r2, #2
 800a73e:	9307      	strge	r3, [sp, #28]
 800a740:	9307      	strlt	r3, [sp, #28]
 800a742:	bfb8      	it	lt
 800a744:	9204      	strlt	r2, [sp, #16]
 800a746:	7823      	ldrb	r3, [r4, #0]
 800a748:	2b2e      	cmp	r3, #46	; 0x2e
 800a74a:	d10c      	bne.n	800a766 <_vfiprintf_r+0x15a>
 800a74c:	7863      	ldrb	r3, [r4, #1]
 800a74e:	2b2a      	cmp	r3, #42	; 0x2a
 800a750:	d134      	bne.n	800a7bc <_vfiprintf_r+0x1b0>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	1d1a      	adds	r2, r3, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	9203      	str	r2, [sp, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfb8      	it	lt
 800a75e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a762:	3402      	adds	r4, #2
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a83c <_vfiprintf_r+0x230>
 800a76a:	7821      	ldrb	r1, [r4, #0]
 800a76c:	2203      	movs	r2, #3
 800a76e:	4650      	mov	r0, sl
 800a770:	f7f5 fd36 	bl	80001e0 <memchr>
 800a774:	b138      	cbz	r0, 800a786 <_vfiprintf_r+0x17a>
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	eba0 000a 	sub.w	r0, r0, sl
 800a77c:	2240      	movs	r2, #64	; 0x40
 800a77e:	4082      	lsls	r2, r0
 800a780:	4313      	orrs	r3, r2
 800a782:	3401      	adds	r4, #1
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78a:	4829      	ldr	r0, [pc, #164]	; (800a830 <_vfiprintf_r+0x224>)
 800a78c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a790:	2206      	movs	r2, #6
 800a792:	f7f5 fd25 	bl	80001e0 <memchr>
 800a796:	2800      	cmp	r0, #0
 800a798:	d03f      	beq.n	800a81a <_vfiprintf_r+0x20e>
 800a79a:	4b26      	ldr	r3, [pc, #152]	; (800a834 <_vfiprintf_r+0x228>)
 800a79c:	bb1b      	cbnz	r3, 800a7e6 <_vfiprintf_r+0x1da>
 800a79e:	9b03      	ldr	r3, [sp, #12]
 800a7a0:	3307      	adds	r3, #7
 800a7a2:	f023 0307 	bic.w	r3, r3, #7
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	9303      	str	r3, [sp, #12]
 800a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ac:	443b      	add	r3, r7
 800a7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b0:	e768      	b.n	800a684 <_vfiprintf_r+0x78>
 800a7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	e7a6      	b.n	800a70a <_vfiprintf_r+0xfe>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9305      	str	r3, [sp, #20]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f04f 0c0a 	mov.w	ip, #10
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ce:	3a30      	subs	r2, #48	; 0x30
 800a7d0:	2a09      	cmp	r2, #9
 800a7d2:	d903      	bls.n	800a7dc <_vfiprintf_r+0x1d0>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0c6      	beq.n	800a766 <_vfiprintf_r+0x15a>
 800a7d8:	9105      	str	r1, [sp, #20]
 800a7da:	e7c4      	b.n	800a766 <_vfiprintf_r+0x15a>
 800a7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e7f0      	b.n	800a7c8 <_vfiprintf_r+0x1bc>
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4b12      	ldr	r3, [pc, #72]	; (800a838 <_vfiprintf_r+0x22c>)
 800a7ee:	a904      	add	r1, sp, #16
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7fd fb8b 	bl	8007f0c <_printf_float>
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	1c78      	adds	r0, r7, #1
 800a7fa:	d1d6      	bne.n	800a7aa <_vfiprintf_r+0x19e>
 800a7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7fe:	07d9      	lsls	r1, r3, #31
 800a800:	d405      	bmi.n	800a80e <_vfiprintf_r+0x202>
 800a802:	89ab      	ldrh	r3, [r5, #12]
 800a804:	059a      	lsls	r2, r3, #22
 800a806:	d402      	bmi.n	800a80e <_vfiprintf_r+0x202>
 800a808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a80a:	f7fe f8fd 	bl	8008a08 <__retarget_lock_release_recursive>
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	065b      	lsls	r3, r3, #25
 800a812:	f53f af1d 	bmi.w	800a650 <_vfiprintf_r+0x44>
 800a816:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a818:	e71c      	b.n	800a654 <_vfiprintf_r+0x48>
 800a81a:	ab03      	add	r3, sp, #12
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	462a      	mov	r2, r5
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <_vfiprintf_r+0x22c>)
 800a822:	a904      	add	r1, sp, #16
 800a824:	4630      	mov	r0, r6
 800a826:	f7fd fe15 	bl	8008454 <_printf_i>
 800a82a:	e7e4      	b.n	800a7f6 <_vfiprintf_r+0x1ea>
 800a82c:	0800c44c 	.word	0x0800c44c
 800a830:	0800c456 	.word	0x0800c456
 800a834:	08007f0d 	.word	0x08007f0d
 800a838:	0800a5e9 	.word	0x0800a5e9
 800a83c:	0800c452 	.word	0x0800c452

0800a840 <__swbuf_r>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	460e      	mov	r6, r1
 800a844:	4614      	mov	r4, r2
 800a846:	4605      	mov	r5, r0
 800a848:	b118      	cbz	r0, 800a852 <__swbuf_r+0x12>
 800a84a:	6a03      	ldr	r3, [r0, #32]
 800a84c:	b90b      	cbnz	r3, 800a852 <__swbuf_r+0x12>
 800a84e:	f7fd ffaf 	bl	80087b0 <__sinit>
 800a852:	69a3      	ldr	r3, [r4, #24]
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	071a      	lsls	r2, r3, #28
 800a85a:	d525      	bpl.n	800a8a8 <__swbuf_r+0x68>
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	b31b      	cbz	r3, 800a8a8 <__swbuf_r+0x68>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	6922      	ldr	r2, [r4, #16]
 800a864:	1a98      	subs	r0, r3, r2
 800a866:	6963      	ldr	r3, [r4, #20]
 800a868:	b2f6      	uxtb	r6, r6
 800a86a:	4283      	cmp	r3, r0
 800a86c:	4637      	mov	r7, r6
 800a86e:	dc04      	bgt.n	800a87a <__swbuf_r+0x3a>
 800a870:	4621      	mov	r1, r4
 800a872:	4628      	mov	r0, r5
 800a874:	f7ff fdac 	bl	800a3d0 <_fflush_r>
 800a878:	b9e0      	cbnz	r0, 800a8b4 <__swbuf_r+0x74>
 800a87a:	68a3      	ldr	r3, [r4, #8]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	6022      	str	r2, [r4, #0]
 800a886:	701e      	strb	r6, [r3, #0]
 800a888:	6962      	ldr	r2, [r4, #20]
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d004      	beq.n	800a89a <__swbuf_r+0x5a>
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	07db      	lsls	r3, r3, #31
 800a894:	d506      	bpl.n	800a8a4 <__swbuf_r+0x64>
 800a896:	2e0a      	cmp	r6, #10
 800a898:	d104      	bne.n	800a8a4 <__swbuf_r+0x64>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4628      	mov	r0, r5
 800a89e:	f7ff fd97 	bl	800a3d0 <_fflush_r>
 800a8a2:	b938      	cbnz	r0, 800a8b4 <__swbuf_r+0x74>
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 f806 	bl	800a8bc <__swsetup_r>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d0d5      	beq.n	800a860 <__swbuf_r+0x20>
 800a8b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a8b8:	e7f4      	b.n	800a8a4 <__swbuf_r+0x64>
	...

0800a8bc <__swsetup_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <__swsetup_r+0xac>)
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	b118      	cbz	r0, 800a8d0 <__swsetup_r+0x14>
 800a8c8:	6a03      	ldr	r3, [r0, #32]
 800a8ca:	b90b      	cbnz	r3, 800a8d0 <__swsetup_r+0x14>
 800a8cc:	f7fd ff70 	bl	80087b0 <__sinit>
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8d6:	0718      	lsls	r0, r3, #28
 800a8d8:	d422      	bmi.n	800a920 <__swsetup_r+0x64>
 800a8da:	06d9      	lsls	r1, r3, #27
 800a8dc:	d407      	bmi.n	800a8ee <__swsetup_r+0x32>
 800a8de:	2309      	movs	r3, #9
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ec:	e034      	b.n	800a958 <__swsetup_r+0x9c>
 800a8ee:	0758      	lsls	r0, r3, #29
 800a8f0:	d512      	bpl.n	800a918 <__swsetup_r+0x5c>
 800a8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8f4:	b141      	cbz	r1, 800a908 <__swsetup_r+0x4c>
 800a8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	d002      	beq.n	800a904 <__swsetup_r+0x48>
 800a8fe:	4628      	mov	r0, r5
 800a900:	f7fe ff0c 	bl	800971c <_free_r>
 800a904:	2300      	movs	r3, #0
 800a906:	6363      	str	r3, [r4, #52]	; 0x34
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	2300      	movs	r3, #0
 800a912:	6063      	str	r3, [r4, #4]
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	6023      	str	r3, [r4, #0]
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	f043 0308 	orr.w	r3, r3, #8
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	b94b      	cbnz	r3, 800a938 <__swsetup_r+0x7c>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92e:	d003      	beq.n	800a938 <__swsetup_r+0x7c>
 800a930:	4621      	mov	r1, r4
 800a932:	4628      	mov	r0, r5
 800a934:	f000 f884 	bl	800aa40 <__smakebuf_r>
 800a938:	89a0      	ldrh	r0, [r4, #12]
 800a93a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a93e:	f010 0301 	ands.w	r3, r0, #1
 800a942:	d00a      	beq.n	800a95a <__swsetup_r+0x9e>
 800a944:	2300      	movs	r3, #0
 800a946:	60a3      	str	r3, [r4, #8]
 800a948:	6963      	ldr	r3, [r4, #20]
 800a94a:	425b      	negs	r3, r3
 800a94c:	61a3      	str	r3, [r4, #24]
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	b943      	cbnz	r3, 800a964 <__swsetup_r+0xa8>
 800a952:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a956:	d1c4      	bne.n	800a8e2 <__swsetup_r+0x26>
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	0781      	lsls	r1, r0, #30
 800a95c:	bf58      	it	pl
 800a95e:	6963      	ldrpl	r3, [r4, #20]
 800a960:	60a3      	str	r3, [r4, #8]
 800a962:	e7f4      	b.n	800a94e <__swsetup_r+0x92>
 800a964:	2000      	movs	r0, #0
 800a966:	e7f7      	b.n	800a958 <__swsetup_r+0x9c>
 800a968:	200000a0 	.word	0x200000a0

0800a96c <_raise_r>:
 800a96c:	291f      	cmp	r1, #31
 800a96e:	b538      	push	{r3, r4, r5, lr}
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	d904      	bls.n	800a980 <_raise_r+0x14>
 800a976:	2316      	movs	r3, #22
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a982:	b112      	cbz	r2, 800a98a <_raise_r+0x1e>
 800a984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a988:	b94b      	cbnz	r3, 800a99e <_raise_r+0x32>
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 f830 	bl	800a9f0 <_getpid_r>
 800a990:	462a      	mov	r2, r5
 800a992:	4601      	mov	r1, r0
 800a994:	4620      	mov	r0, r4
 800a996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a99a:	f000 b817 	b.w	800a9cc <_kill_r>
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d00a      	beq.n	800a9b8 <_raise_r+0x4c>
 800a9a2:	1c59      	adds	r1, r3, #1
 800a9a4:	d103      	bne.n	800a9ae <_raise_r+0x42>
 800a9a6:	2316      	movs	r3, #22
 800a9a8:	6003      	str	r3, [r0, #0]
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	e7e7      	b.n	800a97e <_raise_r+0x12>
 800a9ae:	2400      	movs	r4, #0
 800a9b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	4798      	blx	r3
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e7e0      	b.n	800a97e <_raise_r+0x12>

0800a9bc <raise>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <raise+0xc>)
 800a9be:	4601      	mov	r1, r0
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f7ff bfd3 	b.w	800a96c <_raise_r>
 800a9c6:	bf00      	nop
 800a9c8:	200000a0 	.word	0x200000a0

0800a9cc <_kill_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d07      	ldr	r5, [pc, #28]	; (800a9ec <_kill_r+0x20>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	f7f9 fe79 	bl	80046d0 <_kill>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	d102      	bne.n	800a9e8 <_kill_r+0x1c>
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	b103      	cbz	r3, 800a9e8 <_kill_r+0x1c>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20001de4 	.word	0x20001de4

0800a9f0 <_getpid_r>:
 800a9f0:	f7f9 be66 	b.w	80046c0 <_getpid>

0800a9f4 <__swhatbuf_r>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	b096      	sub	sp, #88	; 0x58
 800aa00:	4615      	mov	r5, r2
 800aa02:	461e      	mov	r6, r3
 800aa04:	da0d      	bge.n	800aa22 <__swhatbuf_r+0x2e>
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa0c:	f04f 0100 	mov.w	r1, #0
 800aa10:	bf0c      	ite	eq
 800aa12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa16:	2340      	movne	r3, #64	; 0x40
 800aa18:	2000      	movs	r0, #0
 800aa1a:	6031      	str	r1, [r6, #0]
 800aa1c:	602b      	str	r3, [r5, #0]
 800aa1e:	b016      	add	sp, #88	; 0x58
 800aa20:	bd70      	pop	{r4, r5, r6, pc}
 800aa22:	466a      	mov	r2, sp
 800aa24:	f000 f848 	bl	800aab8 <_fstat_r>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	dbec      	blt.n	800aa06 <__swhatbuf_r+0x12>
 800aa2c:	9901      	ldr	r1, [sp, #4]
 800aa2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa36:	4259      	negs	r1, r3
 800aa38:	4159      	adcs	r1, r3
 800aa3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa3e:	e7eb      	b.n	800aa18 <__swhatbuf_r+0x24>

0800aa40 <__smakebuf_r>:
 800aa40:	898b      	ldrh	r3, [r1, #12]
 800aa42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa44:	079d      	lsls	r5, r3, #30
 800aa46:	4606      	mov	r6, r0
 800aa48:	460c      	mov	r4, r1
 800aa4a:	d507      	bpl.n	800aa5c <__smakebuf_r+0x1c>
 800aa4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	6123      	str	r3, [r4, #16]
 800aa54:	2301      	movs	r3, #1
 800aa56:	6163      	str	r3, [r4, #20]
 800aa58:	b002      	add	sp, #8
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	ab01      	add	r3, sp, #4
 800aa5e:	466a      	mov	r2, sp
 800aa60:	f7ff ffc8 	bl	800a9f4 <__swhatbuf_r>
 800aa64:	9900      	ldr	r1, [sp, #0]
 800aa66:	4605      	mov	r5, r0
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7fe fecb 	bl	8009804 <_malloc_r>
 800aa6e:	b948      	cbnz	r0, 800aa84 <__smakebuf_r+0x44>
 800aa70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa74:	059a      	lsls	r2, r3, #22
 800aa76:	d4ef      	bmi.n	800aa58 <__smakebuf_r+0x18>
 800aa78:	f023 0303 	bic.w	r3, r3, #3
 800aa7c:	f043 0302 	orr.w	r3, r3, #2
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	e7e3      	b.n	800aa4c <__smakebuf_r+0xc>
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	6020      	str	r0, [r4, #0]
 800aa88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa8c:	81a3      	strh	r3, [r4, #12]
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	6163      	str	r3, [r4, #20]
 800aa92:	9b01      	ldr	r3, [sp, #4]
 800aa94:	6120      	str	r0, [r4, #16]
 800aa96:	b15b      	cbz	r3, 800aab0 <__smakebuf_r+0x70>
 800aa98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f000 f81d 	bl	800aadc <_isatty_r>
 800aaa2:	b128      	cbz	r0, 800aab0 <__smakebuf_r+0x70>
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	f023 0303 	bic.w	r3, r3, #3
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	81a3      	strh	r3, [r4, #12]
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	431d      	orrs	r5, r3
 800aab4:	81a5      	strh	r5, [r4, #12]
 800aab6:	e7cf      	b.n	800aa58 <__smakebuf_r+0x18>

0800aab8 <_fstat_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	; (800aad8 <_fstat_r+0x20>)
 800aabc:	2300      	movs	r3, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	4611      	mov	r1, r2
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	f7f9 fe62 	bl	800478e <_fstat>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d102      	bne.n	800aad4 <_fstat_r+0x1c>
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	b103      	cbz	r3, 800aad4 <_fstat_r+0x1c>
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	bd38      	pop	{r3, r4, r5, pc}
 800aad6:	bf00      	nop
 800aad8:	20001de4 	.word	0x20001de4

0800aadc <_isatty_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d06      	ldr	r5, [pc, #24]	; (800aaf8 <_isatty_r+0x1c>)
 800aae0:	2300      	movs	r3, #0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	f7f9 fe61 	bl	80047ae <_isatty>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_isatty_r+0x1a>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_isatty_r+0x1a>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	20001de4 	.word	0x20001de4

0800aafc <_init>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr

0800ab08 <_fini>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr
